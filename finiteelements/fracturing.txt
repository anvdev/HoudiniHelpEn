= Fracturing <| finite elements =


== Enable fracturing ==

* Turn on __Enable fracturing__ on the [FEM Solver|Node:dop/finiteelementsolver].

    Also, each object for which you want fracturing to occur, you need to enable fracturing. Fracturing allows the tetrahedrons of this object to break apart when impacted beyond the internal stress that is specified by the __Fracture threshold__.

* For each object you want to fracture, in the parameter editor, click the object's __Fracturing__ tab and turn on __Enable fracturing__.

* The __Fracture threshold__ parameter on the [Solid object|Node:dop/solidobject] controls the relative amount of stress in any direction above which dynamic fracturing may occur. This lets you control how quickly the object will break into pieces as a result of stresses inside the object.

* The __Fracture threshold__ on the Solid Object's __Fracturing__ tab is a scale on the __Fracture threshold__ on the solver.

    Realistic objects do not have the same fracture threshold everywhere. To vary the fracture threshold locally, you can use a `fracturethreshold` point attribute as a local scale on the object's fracture threshold.


== Tips and notes ==

* If you don't need fracturing and/or collisions, turn off the fracturing/collisions checkboxes on the FEM Solver node to speed up the simulation.

* If fractured pieces are exploding, try turning off fracturing on the solver to see the simulations without fracturing. It might reveal the real problem is prior to fracturing.

* You can use the [Solid Fracture SOP|Node:sop/solidfracture] to "clump" tets together by giving them the same `fracturepart` primitive attribute value. Tets with the same value in `fracturepart` will never break into smaller pieces.

    You can create a `fracturepart` on the embedded geometry as well, so the fractured pieces in the simulated geometry and the embedded geometry can be properly matched.

* The two features above can help prevent a problem where many tetrahedrons separate all at once, making impacts look too "crumbly".

* You can re-use the geometry nodes used for Voronoi [shattering|shatter] to create the pre-fractured pieces. The [Fractured Solid Object|/shelf/fracturedsolidobject] tool on the __Solid__ shelf tab is an example of this workflow.

* The solver compares an object's fracture threshold against the maximum relative stretch in any direction in the material at each point. The fracture threshold should be a number between `0` and `1`. This is not measured over the tetrahedron edges, but over all possible direction vectors through the material, at each point in the material. 

* More internal tetrahedrons give better results but are slower.

* When a tetrahedron fractures, it calculates self-collisions of its vertices with the surrounding tetrahedrons. At each simulation step, the object can get new points as it fractures. This means simulation times can be unpredictable as the number of points increases.
