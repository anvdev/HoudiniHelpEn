= Menus =
#action_context: h

"""Explains each of the items in the main menus."""

== File == (ref_menus_file)
#display: raised

See the  [file dialog reference|../ref/windows/file] .

New:
    #action: new
    
    Clears the current scene and starts a new scene.
    
Open:
    #action: open
    
    Loads a `.hip` file from disk.
    
Open Recent files:
    The __File__ menu lists the last four `.hip` files opened.
    Choose a `.hip` file from this list to reload it quickly.
                
Save:
    #action: save
    
    Saves the current scene to disk.

Save As:
    #action: save_as
    
    Saves the current scene to a new file.

Save as Binary:
    #action: save_as_bin
    
    Saves the current scene to a new binary scene file.
    See [text files|/assets/textfiles] for more information.

Save as Text:
    #action: save_as_text
    
    Saves the current scene to a new plain-text scene file.
    See [text files|/assets/textfiles] for more information.

New Project:
    #action: new_project
    
    Sets up a standardized directory structure and sets the `$JOB` environment variable.
    See [project management|/basics/project] for more information.

Set Project:
    #action: set_project
    
    Switches the `$JOB` environment variable to another project directory.
    See [project management|/basics/project] for more information.

Merge:
    #action: merge
    
    Imports the data from another `.hip` file into the current scene.

Show Changes:
    #action: compare
    
    Shows the changes made between the current scene and the last time the file was saved.

New Asset:
    #action: newotl
    
    Creates a new, empty [digital asset|/assets/].

Import:
    This submenu contains menu items for importing different file types.
    
    :box:
        #display: raised
        
        Geometry:
            #action: import_geo
    
            Import a geometry file such as a `.bgeo` file.
            The file can be in any format supported by Houdini's IO libraries.
            Houdini creates an object node containing a File node to import the file.

        Image:
            #action: import_img
        
            Import an image into the Houdini compositor (COPs).
            Houdini creates a File node in the default compositing network to import the file.
    
        Collada:
            #action: import
        
            Import a Collada interchange file.
            Houdini creates object nodes for the objects in the Collada file.
            See the [Collada import options|/ref/windows/import_collada].
    
        Filmbox FBX:
            #action: import_fbx
        
            Import an FBX file.
            Houdini creates object nodes for the objects in the FBX file.
            See [Filmbox import options|/ref/windows/import_fbx].
    
        Alembic Scene:
            #action: import_alembic
        
            Import an Alembic scene file.
            Houdini can create object nodes for Alembic nodes or import Alembic geometry into a single Houdini object.
            See [Alembic|/io/alembic] and [Alembic import options|/ref/windows/import_alembic].

        Soundtrack:
            #action: import_soundtrack
        
            Imports an audio file that can play with the animation in the current scene.
    
        Houdini Digital Asset:
            #action: import_otl
        
            Loads the [digital assets|/assets/] from a `.hda` file on disk into the current Houdini session.

Export:
    The submenu contains menu items for exporting data from Houdini into different file types.
    
    :box:
        #display: raised
    
        Alembic:
            #action: export_alembic
        
            Export the scene data to an Alembic scene file.
            See [Alembic|/io/alembic] and [Alembic export options|/ref/windows/export_alembic].
    
        Filmbox FBX:
            #action: export_fbx
        
            Export the scene data to an FBX file.
            See [Filmbox export options|/ref/windows/export_fbx].

Run Script:
    #action: source
    
    Choose a Python or Hscript file and it run it as if you typed the contents into the Python shell or [Hscript textport|/ref/windows/textport].

Quit Application:
    #action: quit
    
    Exits Houdini.


== Edit == (ref_menus_edit)
#display: raised

Undo:
    #action: undo
    
    Reverses the previous user action.

    To set the amount of memory reserved for undo, choose
    __Edit > Preferences__ and choose __Miscellaneous__
    from the pop-up menu at the top.

Redo:
    #action: redo
    
    Replays an "undone" action.

Undo History:
    #action: undo_mgr
    
    Opens a window showing the history of user actions (the "undo stack"). Click an action in the list to undo back to that action.

Cut:
    #action: cut
    
    Copies the current selection to the clipboard and deletes it.
    
Copy:
    #action: copy
    
    Copies the current selection to the clipboard.

Paste:
    #action: paste
    
    Inserts the current contents of the clipboard at the selection.

Preferences:
    This submenu lets you jump to a specific page of the [Houdini Preferences window|/ref/windows/mainprefs].
    
    :box:
        #display: raised
        
        General User Interface preferences:
            #action: prefs_ui
            Open the preferences window to the General UI page.
    
        Network Editor preferences:
            #action: prefs_network
            Open the preferences window to the Network Editor page.
    
        3D Viewports preferences:
            #action: prefs_viewports
            Open the preferences window to the 3D Viewports page.
    
        Shelf preferences:
            #action: prefs_shelves
            Open the preferences window to the Shelf page.
        
        Animation preferences:
            #action: prefs_animation
            Open the preferences window to the Animation page.
    
        Rendering preferences:
            #action: prefs_rendering
            Open the preferences window to the Rendering page.
    
        Handles preferences:
            #action: prefs_handles
            Open the preferences window to the Handles page.
        
        Interactive Tools preferences:
            #action: prefs_states
            Open the preferences window to the Interactive Tools page.
    
        Objects and Geometry:
            #action: prefs_obj
            Open the preferences window to the Objects and Geometry page.
    
        Motion and Audio:
            #action: prefs_chop
            Open the preferences window to the Motion and Audio page.
    
        Compositing:
            #action: prefs_cop
            Open the preferences window to the Compositing page.
    
        Scripting:
            #action: prefs_scripting
            Open the preferences window to the Scripting page.
    
        Desktops and Toolbars:
            #action: prefs_desks
            Open the preferences window to the Desktops and Toolbars page.
    
        Save and Load:
            #action: prefs_persistence
            Open the preferences window to the Save and Load page.
    
        Hip File:
            #action: prefs_hip
            Open the preferences window to the Hip File page.
    
        Warning Dialogs:
            #action: prefs_dialogs
            Open the preferences window to the Warning Dialogs page.
    
        Notifications:
            #action: prefs_notify
            Open the preferences window to the Notifications page.
    
        Performance Monitor:
            #action: prefs_perfmon
            Open the preferences window to the Performance Monitor page.
    
        External Tools:
            #action: prefs_exttools
            Open the preferences window to the External Tools page.
    
        Miscellaneous:
            #action: prefs_misc
            Open the preferences window to the Miscellaneous page.

Hotkeys:
    #action: hotkey_mgr
    
    Opens the [Hotkey editor|/ref/windows/hotkey].
    This lets you edit the hotkeys assigned to various actions in Houdini.

Color Settings:
    #action: colorsettings
    
    Opens the [Color Settings window|../ref/windows/color].
    This lets you change color preferences such as the UI color scheme.

Aliases and Variables:
    #action: aliases
    
    Opens the  [Aliases and Variables window|../ref/windows/alias].
    This lets you interactively edit Houdini's environment variables.
    
Compositing Settings:
    #action: comp_project_manager
    
    Opens the [Compositing Setting window|../ref/windows/composite].
    This lets you set defaults for compositing projects.

Clear Compositing Cache:
    #action: clear_cop_caches
    
    Releases any memory currently being used by the compositing cache to speed up compositing operations.
    
    The compositing cache can grow very large, especially when compositing over multiple frames. If you're running low on memory, this command can potentially free up a large amount.

Set Keyframe:
    #action: add_key
    
    Adds or saves a keyframe for the selected object at the current frame.

Objects:
    The checkbox items in this submenu let you quickly change certain object animation settings.
    
    :box:
        #display: raised
    
        Always Highlight Object Selection in Viewer:
            #action: highlightobjselection
        
            The selected object is highlighted (drawn in yellow) in
            the viewports. You may want to turn this option off when painting on an object or viewing textures to reduce distraction.
    
        ~~~ Bone Kinematic Override ~~~

        None:
            #action: kin_none
        
            Do not override bone kinematic defaults.
        
        IK Rest Pose:
            #action: kin_rest
        
            See the position of bones as they were posed (that is, the last time they were edited in the bone state).
    
        Capture Pose:
            #action: kin_capt
        
            See the position of bones at the capture frame.

        ~~~ Keep Position when Parenting ~~~
    
        Never:
            #action: keeppos_never
        
            Do not maintain world space position; objects are
            positioned relative to their new parent.
        
        Always:
            #action: keeppos_always
        
            Maintain the current world space position and
            orientation of objects when they are parented.
        
        Use Object Flag:
            #action: keeppos_useflag
        
            Uses the value of an object's Keep Position When Parenting parameter.

        Generally, you want to make sure "Keep Position when Parenting" is set to "Always" before parenting limbs.

        To maintain an object's world space position, Houdini may need to change one or more of the child object's Translation Order, Translate, Rotate or Scale parameters. Because this is undesirable if you have an animation channel on one of those values, "Keep Position When Parenting"" does nothing if the child object has animation on any of those parameters.

Stereo Eye:
    The items in this sub-menu control which sub-camera of the stereo rig to display in the viewport. For more information, see [Stereo Camera Rig|Node:obj/stereocamrig].
    
    :box:
        #display: raised
        
        Stereo:
            #action: eye_stereo
            Use the stereo camera when looking through a stereo camera rig.
    
        Left:
            #action: eye_left
            Use the left eye camera when looking through a stereo camera rig.
        
        Right:
            #action: eye_right
            Use the right eye camera when looking through a stereo camera rig.
    
        Center:
            #action: eye_center
            Use the center camera when looking through a stereo camera rig.

Live Parameter Display during Playback:
    #action: live_updates
    
    Toggle live parameter update on or off. When this is on, Houdini updates parameters in the parameter editor with their current values as the animation plays. For heavy scenes you may want to disable this to speed up playback.

Intercept Mode:
    #action: intercept_mode
    
    Toggle "intercept mode" on or off. When intercept mode is active, any keypresses are routed to the [Keyboard CHOP|Node:chop/keyboard]. This lets you generate channel data using keypresses.

Automatically Add Parameter to Current Take:
    #action: auto_take_mode
    
    Toggle "auto take" mode on or off. When auto take mode is on, all parameters inside a take are unlocked, and any changes to a parameter are automatically added to the current take. See [takes|/basics/takes].

Auto Save:
    #action: auto_save
    
    Toggle "auto save" mode on or off. When auto save mode is on, Houdini automatically saves the scene to a disk file at a regular interval (the default is one minute, you can change it in the [save options|/ref/windows/mainprefs#save]).
    
    Auto-save is always off when you launch Houdini. If you want auto-save you must explicitly turn it on in each session.


== Render ==
#display: raised

Create Render Node:
    The items in this submenu let you quickly create and edit a render node without having to jump to the render network.

    :box:
        #display: raised

        Mantra:
            #action: create_mantra
        
            Create a [mantra|Node:out/ifd] render node set to use the raytracing engine.
        
        Mantra - PBR:
            #action: create_mantra_pbr
        
            Create a [mantra|Node:out/ifd] render node set to use the Physically Based Rendering engine.
    
        RenderMan:
            #action: create_rman
        
            Create a [RenderMan|Node:out/rib] render node.
        
        RenderMan - RIS:
            #action: create_rman_ris
            
            Create a [RenderMan|Node:out/rib] render node set to use RIS.
        
        Alfred:
            #action: create_alfred
            
            Create an [Alfred|Node:out/alf] render node.
            
        You can create other render nodes using the items in the __Other output nodes__ submenu.
        
        Composite:
            #action: create_composite
            
            Create a [Composite|Node:out/comp] render node, which generates an image from a compositing network.
        
        Geometry:
            #action: create_geometry
            
            Create a [Geometry|Node:out/geometry] render node, which generates a geometry file from the scene.
        
        Channel:
            #action: create_channel
            
            Create a [Channel|Node:out/channel] render node, which generates channel data files from a CHOP network.
        
        Dynamics:
            #action: create_dynamics
            
            Create a [Dynamics|Node:out/dop] render node, which generates cached simulation state files from a simulation network.

Edit Render Node:
    This submenu lists all render nodes in the default render network. Choose a node to edit its parameters in a floating window.

Render:
    This submenu lists all render nodes in the default render network. Choose a node to start rendering the node.
    
Preview in MPlay:
    This submenu lists all render nodes in the default render network. Choose a node to render the node into an MPlay window.

Scheduler:
    #action: render_mgr
    
    Opens a Render Manager in a floating window. This list shows all the currently active background renders. You can pause or cancel a job, or see history of completed jobs if __Clear Completed Jobs__ is turned off.

Update Textures:
    #action: update_textures
    
    Reload cached textures from disk.

Cloud Properties:
    TBD.

Pre-flight Scene:
    TBD.

MPlay:
    The items in this submenu open instances of the MPlay image viewer.

    :box:
        #display: raised
        
        Load Disk Files:
            #action: mplay_file
            Opens an MPlay window with a file browser to select files.
        
        Listen for Renders:
            #action: mplay_render
            Opens an MPlay window that all interactive renders will be directed to.
    
        Listen for Flipbooks:
            #action: mplay_flipbook
            Opens an MPlay window that all flipbooks (2D, 3D) will be directed to.


== Takes ==
#display: raised

See [takes|/basics/takes] for more information.

New Take:
    #action: create_take
    
    Starts a new take extending the current take.

Auto Takes:
    #action: auto_take
    
    Toggles "auto take" mode on or off. This is the same as __Edit > Automatically add parameter to current take__.


== Assets ==
#display: raised

New Digital Asset From Selection:
    #action: createotl
    
    Creates a digital asset from the selected subnet node. This is the same as right-clicking a subnet node and choosing __Create digital asset__.

Unlock asset:
    This submenu lists all user assets. Choosing an asset unlocks it for editing. This is the same as right-clicking an asset node and choosing __Allow editing of contents__.

Lock asset:
    This submenu lists all unlocked user assets. Choosing an asset locks it to prevent editing. This is the same as right-clicking an asset node and choosing __Match current definition__.

Save asset:
    This submenu lists all unlocked user assets. Choosing an asset saves any changes made to the unlocked asset to the node's definition on disk. This is the same as right-clicking an asset node and choosing __Save node type__.

Install Asset Library:
    #action: openotl
    
    Installs the assets from a library file on disk into the current scene file. You can use this to import "one-off" scene-specific assets from a file not on the Houdini search path.

Asset Manager:
    #action: manageotl
    
    Opens the [Asset Manager|/ref/windows/optypemanager] window. This is the same as __Windows > Asset Manager__.

Refresh Asset Libraries:
    #action: refreshotl
    
    Reloads the list of available asset libraries and their contents. This is useful if you want to pick up files that may have been added or changed since Houdini started, for example by an external asset management system.

Create Black Boxed Asset from Selection:
    #action: blackboxotl
    
    Converts the selected asset node into a "black box" asset that cannot be unlocked or edited. The black box asset is a new asset type with a different name.

Orbolt Asset Store:
    #action: help_orbolt
    
    Opens the Orbolt asset store in a browser.

Orbolt Asset Browser:
    #action: asset_browser
    
    Shows a pane or window allowing you to browse any assets you've downloaded from the Orbolt store.

Upload to Orbolt Asset Store:
    #action: uploadotl
    
    Starts the process of uploading the selected asset to the Orbolt asset store.

Other Asset Tools:
    This submenu contains additional items for working with assets.
    
    :box:
        #display: raised
        
        Encapsulate Asset:
            #action: encapsulate_asset
        
        Compile and Embed Material:
            #action: compile_embed_material
            
        Embed Internal Assets:
            #action: embed_internal_assets
            
            

== Desktop ==
#display: raised

This menu lets you choose a "desktop" (a saved pane layout). Houdini comes with several task-based layouts. The default desktop is "Build", an all-purpose layout. You can also save your own layout as a new custom desktop using __Desktop > Save Current Desktop As__.

See [pane layouts|/basics/panes] for more information.

New Desktop:
    #action: add_desktop
    
    "Resets" the pane layout to a single pane with a scene viewer tab.

Save Current Desktop:
    #action: save_desktop
    
    Saves any changes to the current layout. This preserves the desktop's current name.
    
    If you want to save the current layout as a new named desktop, use __Save Current Desktop As__ instead.

Save Current Desktop As:
    #action: saveas_desktop
    
    Saves the current layout under a new name. The name will appear in the __Desktop__ menu, allowing you to recall the saved layout.

Save All Desktops:
    #action: save_desktops
    
    Saves any changes to all layouts. Use this if you've modified multiple layouts and want to keep all your changes.

Reload Current Desktop:
    #action: reload_desktop
    
    Resets the current pane layout by re-reading the saved defintion from disk.
    
    This is useful to discard any unsaved changes, or if you know the desktop file has changed since Houdini was started and you want to pick up the changes.
    
Desktops Manager:
    #action: desktop_mgr
    
    Opens the [desktop manager|/ref/windows/desks] allowing you to perform operations on saved layouts, such as duplicate, rename, or delete them.

Reset Main Menu to Top:
    #action: reset_menubar
    
    If you've moved the menu bar into a pane, this puts them back at the top of the main window.
    
    (You can move the menus into a pane using the __Pane interface > Move main menus here__ item in a pane menu.)
    
    On Mac OS the menu bar is always at the top of the main screen, so this has no effect.

Reset Shelf to Top:
    #action: reset_shelf
    
    If you have moved the [shelf|/shelf/] into a pane, this puts it back at the top of the main window.
    
    (You can move the menus into a pane using the __Pane interface > Move main menus here__ item in a pane menu.)

Reset Playbar to Bottom:
    #action: reset_playbar
    
    If you've moved the [playbar|/anim/playbar] into a pane, this puts it back at the bottom of the main window.
    
    (You can move the menus into a pane using the __Pane interface > Move playbar here__ item in a pane menu.)

Reset Status Bar to Bottom:
    #action: reset_statusbar
    
    If you've moved the [status line|/ref/windows/main] into a pane, this puts it back at the bottom of the main window.
    
    (You can move the status line into a pane using the __Pane interface > Move status bar here__ item in a pane menu.)


== Radial ==
#display: raised

This menu lets you choose which radial menu opens when you press the custom radial menu key. Houdini comes with several task-based radial menus. You can also create your own radial menus using the radial menu editor, and assign them to keys using the hotkey editor.

See [radial menus|/basics/radialmenus] and [hotkey editor|/baiscs/hotkeys] for more information.

Create New:
    #action: radialui_create
    
    Creates a new, blank radial menu and opens it in the radial menu editor.

Edit Current:
    #action: radialui_edit
    
    Opens the "current" radial menu in the radial menu editor.
    
Pin Radial Menu:
    #action: radialui_pin
    
    Locks or unlocks the current radial menu from changing when you change pane layouts in the __Desktop__ menu.


== Windows == (ref_menus_win)
#display: raised

Keep Floating Windows on Top:
    #action: keep_float_windows_on_top
    
    Toggles whether floating windows should always appear on top of the main window, or whether they should be allowed to go behind when they're not the current window.

New Floating Panel:
    #action: floatpanel

    Opens a new window with its own pane layout. This is especially useful for putting additional Houdini UI on multiple monitors.
    
    See [how to edit pane layouts|/basics/panes].

Animation Editor:
    #action: channeleditor
    
    Opens an [Animation Editor|/ref/panes/animeditor] window, which lets you view and edit animated parameters and how Houdini fills in the transitions between keyframes.
    
Hscript Textport:
    #action: textport
    
    Opens an [Hscript Textport|/ref/windows/textport] window, which lets you type [HScript commands|/commands/] and prints the results.

Python Shell:
    #action: python_shell
    
    Opens a Python shell window.

Python Source Editor:
    #action: python_source_editor
    
    Opens a window that lets you edit the contents of the `hou.session` module. [This module|/hom/locations#session] is a place for scene-specific Python code. 

Python Panel Editor:
    #action: python_panel_editor
    
    Opens the [Python Pane editor|/ref/windows/pythonpaneleditor] window, which lets you duplicate, edit, and rename [custom pane types defined in Python|/ref/panes/pythonpanel].

Bundle List:
    #action: open_bundlelist
    
    Opens a [Bundle List|/ref/panes/bundles] window, which shows all bundles in the current scene.

Take List:
    #action: open_takemanager
    
    Opens a [Take List|/ref/panes/takes] window, which lets you switch between and edit [takes|/basics/takes].

Parameter Spreadsheet:
    #action: open_parmspreadsheet
    
    Opens a [Parameter Spreadsheet|/ref/panes/parmsheet] window, which lets you edit multiple values on multiple nodes at once.

Tree View:
    #action: open_treeview
    
    Opens a [Tree View|/ref/panes/treeview] windows, which shows a hierarchical list of all nodes in the scene.

Houdini Engine Debugger:
    #action: engine_debugger
    
    Opens a [Houdini Engine Debugger|/ref/henginedebugger] window, which lets you start and stop the Houdini Engine debugger.  The server will remain active when the floating window is closed.

Asset Manager:
    #action: optype_mgr
    
    Opens the [Asset Manager|/ref/windows/optypemanager] window, which lets you edit, unload, and delete [digial asset|/assets/] libraries.

Gallery Manager:
    #action: gallery_mgr
    
    Opens a [Gallery Manager|/ref/windows/gallerymanager] window, which lets you view and edit gallery entries for any node type.

Persistent Handle Editor:
    #action: handleeditor
    
    Opens a [Persistent handle|/ref/windows/handleeditor] window.

Material Palette:
    #action: mat_palette
    Opens a [Material Palette|/shade/] window, which lets you create and assign materials from the gallery.

Code Viewer:
    #action: view_code
    
    Opens a Code Viewer window, which lets you view the VEX code inside a VOP node.
    
    You can drop a VOP node on the window or select a node using the chooser to view the VEX code inside the node. This is the same as right-clicking the node and choosing __View Code__.

Performance Monitor:
    #action: perf_monitor
    
    Opens a [performance monitor|/ref/panes/perfmon] window, which lets you record cook times and display the results to identify slow parts of your scene.

Audio Panel:
    #action: audio_panel
    
    Opens an [audio panel|/ref/windows/audiopanel] window, which lets you control the audio output of Houdini.

Cache Manager:
    #action: cache_manager
    
    Opens a [cache manager window|/ref/windows/caches], which lets you set cache sizes, see cache usage, and clear caches.

Shell:
    #action: shell
    
    Opens a new system command line window.

Autorigs:
    #action: open_autorigs
    
    Opens an [auto rigs|/pypanel/autorigs] builder window.

Character Picker:
    #action: open_charpicker
    
    Opens a [character picker|/pypanel/charpicker] window.

Pose Library:
    #action: open_poselibrary
    
    Opens a [pose library|/pypanel/poselibrary] window.

Pose-Space Deform:
    #action: open_posespacedeform
    
    Opens an [pose-space deform|/pypanel/posespacedeform] builder window.


== Help ==
#display: raised

Start Here:
    #action: startuphelp
    
    Opens a Houdini tutorials page in a browser.

Contents:
    #action: helpcontents
    
    Opens Houdini's online help in an embedded browser.

Example Files:
    #action: help_examples
    
    Opens Houdini's online help to show the list of example files.

Sidefx.com:
    #action: help_sesi
    
    Opens the `sidefx.com` website in a browser.

Online Tutorials:
    #action: help_tutorials_online
    
    Opens a Houdini tutorials page in a browser.

Houdini Forum:
    #action: help_forum
    
    Opens the Houdini forum in a browser.

Online Support:
    #action: help_support_online
    
    Opens the Houdini support page in a browser.

Updates:
    #action: help_updates
    
    Opens the Houdini downloads page in a browser.

Tooltip Help:
    #action: help_tags
    
    Toggles whether to show tooltips when you hover the mouse over something in the Houdini UI.

Open "Start Here" Pane at Startup:
    #action: toggle_help_on_startup
    
    Toggles whether to show a window containing links to learning materials when Houdini starts up.

About Houdini:
    #action: version
    
    Lets you know which version of Houdini you are running.





