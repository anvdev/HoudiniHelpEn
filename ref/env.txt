= Environment variables =

#type: env

See [how to set environment variables|/basics/config_env].

@env_variables Variables

#display: sortable

::HOUDINI_AUTHOR
    Controls the username and machine name used when saving HDAs 
    and hip files.  Normally your login name and hostname are used,
    but setting this to `myself@mydomain` will use a user name of myself
    and a hostname of mydomain instead.

::HOUDINI_DISABLE_CONSOLE
    If set, disables creation of floating consoles on Windows
    machines.

::HOUDINI_TEXT_CONSOLE
    If set, instead of creating a floating console, a normal window
    shell will be created on NT machines.

::HOUDINI_WINDOW_CONSOLE
    On the Windows operating system, the setting of this environment variable
    will force the creation of a floating console regardless of whether its
    output is redirected. This is only necessary for broken shells that 
    incorrectly start up Houdini window applications with redirected output.
    At the time of this writing, only Cygwin-compiled shells require this.

::HOUDINI_VERBOSE_ERROR
    Print out unexpected file save errors to the console as well as
    displaying them in error boxes.

::HOUDINI_DISABLE_FILE_LOAD_WARNINGS
    If set, suppresses the dialog that displays warnings encountered while
    loading a file.

::HOUDINI_OLD_SPINNER
    If set, the old style interrupt dialog graphic will be used (i.e.
    the spinning pie).

::HOUDINI_OLD_CONST_BEHAVIOUR
    If set, the old behavior dealing with `constant()` expression segments 
    is used instead. The old behavior allows changing the value of a
    `constant()` expression channel segment at any given frame within it, not
    just at its boundaries.

::HOUDINI_SHOW_OLD_RENDER_PROPERTIES
    If set, render properties from previous releases will be
    displayed.

::HOUDINI_SHOW_OLD_SHOPS
    If set, SHOPs from previous releases will be displayed.

::HOUDINI_DISABLE_CPUID
    Obsolete control.

::HOUDINI_DISABLE_MMX
    If set, disable MMX support for COPs and VEX. This also disables
    XMMX and SSE. This will reduce COPs processing speed by about 30%.

::HOUDINI_DISABLE_XMMX
    If set, disable Extended MMX support for COPs and VEX. Extended
    MMX is implemented in the original Athlons and Pentium IIIs. This
    also disables SSE. This will reduce COPs processing speed by about
    20%.

::HOUDINI_DISABLE_SSE
    If set, disable SSE support for COPs and VEX. SSE is implemented
    in Pentium IIIs and higher and Athlon XPs (not the original Athlons).
    This will reduce COPs processing speed by about 10%.

::HOUDINI_DISABLE_3DNOW
    If set, disable 3DNow support for COPs and VEX. 3DNow is available in
    AMD Athlon and Cyrix CPUs. 3DNow is not used if the CPU supports SSE
    (which is any Athlon XP, MP, 64 or Opteron).

::HOUDINI_DISABLE_AVX
    If set, disable use of AVX processor instructions (where available). AVX
    instructions are present starting with Intel Sandy Bridge (released Q1 2011)
    and AMD Bulldozer (released Q4 2011) processors.

::HOUDINI_DISABLE_JEMALLOCTEST
    If set, disable the test to see if jemalloc has successfully been
    loaded.  On platforms that expect jemalloc, failure to link it
    will result in memory fragmentation and poor performance.  Thus,
    a warning will be printed.  However, it may be this is an intentional
    override, in which case setting this environment variable will
    suppress the warning.

::HOUDINI_OSX_SWAP_DEL_AND_BACKSPACE
    On Mac OS X, when this variable is set the meaning of the keyboard 
    'delete' and 'backspace' keys are interchanged.

::HOUDINI_ANONYMOUS_STATISTICS
    If set to 1, this will forcibly allow Houdini to gather and send anonymous
    usage statistics to help improve the product.  Setting to 0 will disable
    statistic collection.  The default of -1 will use the anonymous usage
    statistics settings in the preferences.

::HOUDINI_ANONYMOUS_STATISTICS_UPLOAD_ERRORS
    If set, Houdini will print errors to the console when Houdini encounters
    network or server errors when attempting to upload anonymous usage
    statistics.  By default, Houdini will not print anything if these errors
    occur.

::HOUDINI_STATS_API_URL
    This variable controls which web URL Houdini sends anonymous usage
    statistics to.  The default value is http://www.sidefx.com/stats/api.

::HOUDINI_NO_START_PAGE_SPLASH
    If set to 1, Houdini will not attempt to open the Start Here splash page
    or the page that asks permission to turn on anonymous usage statistics.

::HOUDINI_CASE_SENSITIVE_FS
    If set to 1, this causes Houdini to treat the file system as
    case-sensitive. This value defaults to 0 for Windows and Max OS X. For all
    other platforms, it defaults to 1.

::HOUDINI_COREDUMP
    Setting this environment variable to 1 is useful for debugging HDK crashes.
    On Unix systems, Houdini will attempt to dump a core file instead
    of simply exiting on the `SIGILL`, `SIGEMT`, `SIGBUS` or `SIGSEGV` signals.  Please
    see signal(5) for more information.  On Windows, this will enable just in
    time debugging for debuggers such as Visual Studio.

::HOUDINI_NO_ENV_FILE
    If set, Houdini will not load the `$HOUDINI_USER_PREF_DIR/houdini.env`
    file.  This allows large facilities with standard environments to disable
    the `houdini.env` file by setting this variable in the script which they use
    to launch Houdini.

::HOUDINI_NO_ENV_FILE_OVERRIDES
    This environment variable is similar to `HOUDINI_NO_ENV_FILE`, but is less
    extreme.  Setting this stops the user from being able to override existing
    variables in their `houdini.env` file.  If they try to do so, a warning will
    be printed.

::HOUDINI_NO_LEGACY_MENUS
    When set, Houdini will not load the old MainMenuMaster, 
    MaindMenuEscape, and MainMenuCommon menu files. It will only use the
    new MainMenuMaster.xml, MainMenuEscape.xml, and MainMenuCommon.xml.

::HOUDINI_DSO_ERROR
    Determines if DSO/DLL errors on plug-ins will be printed out to
    the console.  This can help in debugging custom operators.  
    
    By default this is disabled.
    
    The existence of the variable in the environment (or setting its
    value to 1) will cause dynamic linking errors to be output.

    Setting the value to 2 will cause more verbose errors to be printed.

    Setting the value to 3 will cause all DSO related messages to be printed.

::HOUDINI_DSO_DEEPBIND
    Only applicable On Linux. If set to 1, then all dynamically loaded DSO will
    be loaded using `RTLD_DEEPBIND`.

::HOUDINI_DSO_EXCLUDE_PATTERN
    If set, this specifies a glob pattern that is used to exclude matching
    DSO/DLL files. The precise accepted syntax is as follows:
    - If it begins with a '/', then it matches at the beginning, else the
      pattern starts matching at any path component.
    - `*` matches any path component, but stops at slashes.
    - `**` matches anything, including slashes.
    - `?` matches any character except a slash (/).
    - `[...]` matches one of the enclosed characters, eg. `[abc]`
      - `-` within `[...]` denotes a character range, eg. `[a-c]`
      - If first character after `[` is `!` or `^`, then it matches
        anything except the enclosed characters.
    - `{x,y}` matches the any of the comma(',') separated patterns within

::HOUDINI_CPP_EXPAND_PRAGMA
    Determines whether the C pre-processor will perform macro
    expansion on `#include`, `#sinclude`, and `#pragma` statements.

::HOUDINI_ENABLE_UNDO_BUG_NOTIFY
    If set to 1, this environment variable enables verbose output for potential
    undo bugs as they occur in Houdini.

::HOUDINI_TIFF_BOTTOMLEFT
    Older versions of Houdini generated TIFF files with the first
    scanline of data representing the bottom of the image.  This
    control can be turned on to replicate the behavior of older
    versions of Houdini.

::HOUDINI_TIFF_SAMPLEFORMAT
    If set, the TIFF SAMPLEFORMAT tag will be output in all cases.
    This may cause older versions of the TIFF library to print
    warnings/errors about unknown tags.

::HOUDINI_DISABLE_IMAGE_DSO
    If set, no custom image formats will be loaded.  Only built-in
    formats will be installed.

::HOUDINI_THREAD_IMAGE
    If set, some old-style compositing operations will be
    multi-threaded.  On some platforms, this can provide a performance
    boost.  However, on other platforms, this can cause a performance
    hit.  This also affects Houdini applications like `ipaint`.

::HOUDINI_LMINFO_VERBOSE
    Typically, Houdini will print out warnings at start-up time if
    licenses are due to expire shortly.  If this control is set to 0,
    then no warnings will be printed out when applications start.

::HOUDINI_NOHKEY
    Setting this environment variable will prevent Houdini from launching the
    apprentice license auto-installer and the license administrator
    when a license check fails.

::HOUDINI_NOHKEY_APPRENTICE
    Setting this environment variable will prevent Houdini from launching the
    apprentice license auto-installer but will cause it to immediately launch 
    the license administrator when a license check fails.

::HOUDINI_NO_ASSET_INSTANTIATION
    Setting this environment variable will prevent Houdini from
    auto-instantiation when importing assets.

::HOUDINI_JITTERY_CAMERA
    Setting this environment variable will prevent the direct
    assignment of the camera transform to the GL view transform.  This
    will cause the camera to jitter in some cases.  It, however, fixes
    reversed-perspective problems with the ES Tornado 3000 video card.

::HOUDINI_VEX_DISABLE_AUTO_FOLDING
    Disables a specific optimization in Mantra/VEX which tries to 
    selectively retain parameters to the VEX code, so that the same 
    optimized code can be re-used between multiple instances that have 
    different parameter values. If this optimization is off, then any 
    VEX code that is instantiated multiple times with different 
    parameter values, will have each instance treated as a unique
    optimization.

::HOUDINI_VEX_RETURNBYREFERENCE
    In very old code, VEX would allow functions that computed a single
    value to also pass the return value by reference (e.g. `sin(result,
    value)` instead of `result = sin(value)`).  This form of the function
    was marked as deprecated over 5 years ago and is now no longer allowed.
    Enabling this variable will re-instate the deprecated functions.

::HOUDINI_VEX_PROFINFO_HTML
    If this variable is set, the VEX profiling information will be
    output using HTML instead of text.

::HOUDINI_VEX_DISABLE_INSTANCE_CACHE
    Disables global caching of VEX shaders for the SOP and POP contexts so
    that shader-local data (such point clouds generated with `pcgenerate`)
    are regenerated with each cook of that operator.

::HOUDINI_VEX_DISABLE_JIT
    Disables just-in-time compilation of VEX shader fragments to native
    machine code.  This variable is still used, but is deprecated in favor of
    HOUDINI_VEX_JIT_OPTIMIZE.

::HOUDINI_VEX_JIT_OPTIMIZE
    Specify JIT optimizations for VEX compilation.  The string for this
    variable is a comma separated list of various options.  If the option is
    found in the string.  If the option token is found, the flag will be turned
    off.  The flag can be turned off by prefixing the token with "no-".
    Alternatively, the value for the flag can be specified with the suffix
    "=value".  
    
    For example:
	- "native":  Enable native JIT code generation
	- "no-native":  Disable native JIT code generation
	- "native=on":  Enable native JIT code generation
	- "native=off":  Disable native JIT code generation
    
    Currently the following options are recognized:
	- "cache" - Enable JIT specialization cache (default ON)
	- "native" - Enable native JIT code generation (default ON)
	- "global" - Perform global optimization across import calls (default ON)

::HOUDINI_VEX_ASSERT
    Sets the behavior for the VEX `assert_enabled()` function.  If the
    variable is set, the `assert_enabled()` function returns true.  This
    has the effect of enabling the `assert()` macro (defined in `assert.h`).

::HOUDINI_VEX_MODULECACHESIZE
    Sets the number of LLVM modules cached by VEX.  Each cached module consumes
    some memory, but can save re-compiles if the same shader is used multiple
    times.  A value of -1 indicates that the module cache will be unbounded.

::HOUDINI_VEX_MEMORYCACHESIZE
    For efficiency, VEX has it's own memory allocator.  This variable controls
    the cache size for in MB each VEX variable type.  The cache is split across
    threads, so machines with more cores may require larger cache sizes.  This
    typically comes into play when there are large arrays being processed in
    VEX.

::HOUDINI_MAXTHREADS
    Controls the maximum number of threads to use for
    compute-intensive operations in Houdini.
    
    The default of 0 means to use all available processors.
    
    Positive values will limit the number of threads that can be used.
    A value of 1 will disable multithreading entirely (limiting to
    only one thread).  Positive values will be clamped to the number
    of CPU cores available.

    If the value is negative, the value is added to the maximum number
    of processors to determine the threading limit.  For example, a
    value of -1 will use all CPU cores except 1.

    This control can be overridden by the `-j` option to most applications.

::HOUDINI_MAXSPUS
    Controls the maximum number of SPUs to use in Cell/BE releases of
    Houdini.  The default of -1 means to use all available SPU resources,
    while a value of 0 will disable SPU use entirely.  Positive values will
    clamp the number of SPUs that can be used.

::HOUDINI_USE_HFS_PYTHON
    NOTE:
	This variable is no longer used.

	Houdini defaults to loading the Python library that is shipped
	in $HFS.  You can instruct Houdini to load a different Python library
	by modifying the library search path in your operating system (Mac and
	Linux only).  You may want to do this if there are 3rd-party modules
	installed in a different Python distribution that you wish to make
	available in Houdini.
	
	On Linux set the LD_LIBRARY_PATH environment variable to include the
	directory containing the Python library before launching Houdini.

	For example, in a terminal you can run:
	{{{
	export LD_LIBRARY_PATH=/path/to/python/lib

	cd /opt/hfsX.Y.ZZZ
	source ./houdini_setup

	houdini
	}}}

	You can alternatively set LD_PRELOAD instead of LD_LIBRARY_PATH
	if you want to load the Python library but not any unwanted libraries
	that are in the same directory.

	For example:
	{{{
	export LD_PRELOAD=/path/to/python/lib/libpython2.7.so.1.0

	cd /opt/hfsX.Y.ZZZ
	source ./houdini_setup

	houdini
	}}}

	Similarly on Mac set the DYLD_LIBRARY_PATH environment variable to
	include the directory containing the Python framework library.  When
	using DYLD_LIBRARY_PATH you must launch the Houdini executable in the
	application bundle instead of the executable in $HFS/bin.

	For example, in the Houdini Terminal you can run:
	{{{
	export DYLD_LIBRARY_PATH=/System/Library/Frameworks/Python.framework/Versions/2.7

	$HFS/Applications/Houdini\ FX\ X.Y.ZZZ.app\Contents\MacOS\houdinifx
	}}}

	You can alternatively set DYLD_INSERT_LIBRARIES instead of
	DYLD_LIBRARY_PATH to load the Python framework library.

	For example:
	{{{
	export DYLD_INSERT_LIBRARIES=/System/Library/Frameworks/Python.framework/Versions/2.7/Python

	$HFS/Applications/Houdini\ FX\ X.Y.ZZZ.app\Contents\MacOS\houdinifx
	}}}

::HOUDINI_PYTHON_VERSION
    NOTE:
	This variable is no longer used.

::HOUDINI_PYTHON_BIN
    NOTE:
	This variable is no longer used.

	If you are loading a different Python library into Houdini (see note
	for HOUDINI_USE_HFS_PYTHON) and you need to additionally set the Python
	prefix path then instead of setting HOUDINI_PYTHON_BIN, set the
	`PYTHONHOME` environment variable.

::HOUDINI_PYTHON_LIB
    NOTE:
	This variable is no longer used.

	See the note for HOUDINI_USE_HFS_PYTHON for instructing Houdini
	to load a different Python library.

::HOUDINI_OGL_MAX_GL_VERSION
    By default this is zero, indicating that Houdini should use all available
    features that the OpenGL driver provides. It can be set to any OpenGL
    version (major.minor, like "2.1") and only those OpenGL features that were
    part of the OpenGL core at that version will be enabled.

::HOUDINI_OGL_ENABLE_TEXTURE_SEQUENCES
    Defining this variable enables the AGP texturing with large texture
    sequences, which may cause the X server seizing when the application quits
    (observed on nVidia cards with drivers 7174 and less). When this variable is
    not defined, Houdini deletes last raster texture before using a new one.

::HOUDINI_OGL_DUMP_SHADER_ERRORS
    If present, GLSL compilation errors will be dumped to the console when
    encountered. This should only be used for debugging purposes.

::HOUDINI_OGL_CORE_PROFILE
    If set to 1, the OpenGL core profile will be used. On Windows and Linux,
    this can be set to 0 to use the OpenGL Compatibility profile to allow
    OpenGL 1.x and 2.x API calls and shaders. OSX does not offer the compability
    profile with a OpenGL 3.2+ context, so this variable has no effect on OSX
    (Core profile is always used on OSX). The default is 0 on Windows and 
    Linux, and 1 on OSX. If a Compatibility profile fails to provide 
    OpenGL 3.2 or higher, Houdini will attempt to use the core profile instead.

::HOUDINI_ENABLE_RETINA
    If set to 0, turns off Houdini's support for retina displays under OSX.
    This will cause Houdini to act as if the display has half the resolution
    it actually has, resulting in a slightly pixelated interface. The advantage
    is that Houdini will also use less Video RAM for buffers, and run fewer
    pixels through the OpenGL shader pipeline, resulting in slightly increased
    performance. Linux and Windows are not affected by this setting.

::HOUDINI_HIP_FROM_PATH
    When loading `.hip` files, force the Houdini HIP variable to the
    path of the HIP file specified rather than the HIP variable set
    inside hip file.

::HOUDINI_PATHMAP
    This string defines multiple mappings represented as a
    Python-style dictionary.  Mappings can map one directory to
    another directory.  The key is the directory to map and the value
    represents the destination directory.  For example:
    
    {{{
    { "c:/temp": "/tmp", "/mnt/render": "//storage/share/render" }
    }}}
        
    would create two directory mappings.

::HOUDINI_COMPARE
    This string defines the command line to launch an external compare (diff)
    program. The following variables can be used when constructing the command
    line:
    
    `"$OLDPATH"`:
        The currently saved op type
    `"$NEWPATH"`:
        The modified op type data
    `"$OLDTITLE"`:
        A title to use for the saved op type data instead of the temp file
	name (if your favorite differ supports this)
    `"$NEWTITLE"`:
        A title to use for the saved modified op type data instead of the temp
	file name (if your favorite differ supports this)

    Use quotes generously to avoid problems with spaces.

::HOUDINI_HIP_DEFAULT_NAME
    The default `.hip` file name.  This defaults to "untitled.hip" and
    is used to initialize the HIP filename when starting a new Houdini
    session.

::HOUDINI_DEFAULT_RENDERERS
    This variable provides a comma separated list of renderer(s) to use,
    overriding the preferences entirely. The format of the names should be
    the same as the `render.activelist.val` value in `$HIH/houdini.prefs`.
    Renderers enabled through this variable cannot be turned off through the
    preferences dialog.

::HOUDINI_VIEW_RMAN
    This variable specifies the command to run when "View: RMan" is
    chosen from the viewport rendering menu.

::HOUDINI_DEFAULT_RIB_RENDERER
    This variable is used in the creation script of the RIB output
    driver to create parameters appropriate for a particular RIB
    renderer.  See `$HH/scripts/out/targets`.

::HOUDINI_RIBSHADER_DIR
    This variable specifies the directory where Houdini should put RenderMan
    shaders compiled from VOP Networks. The default is `$HOUDINI_TEMP_DIR`.
    Only the compiled shader is placed in this directory. The source code
    for the shader is always put in `$HOUDINI_RIBTEMP_DIR` or `$HOUDINI_TEMP_DIR`.

::HOUDINI_RIBTEMP_DIR
    This variable specifies the directory where Houdini should put RenderMan
    intermediate (i.e. source and error) files while generating compiled 
    shaders from VOP Networks.

::HOUDINI_THUMB_RENDER
    This provides a default value for the -r option of the `thumbrender`
    application.  This application is used to render thumbnails for
    the SHOP palette.

::HOUDINI_VIEW_MANTRA
    This variable specifies the command to run when "View: Mantra" is
    chosen from the viewport rendering menu.

::HOUDINI_DISABLE_EXPORT_RENAME
    This variable disables the immediate recooking of exported CHOPs whenever
    a new node is created or when an existing node is renamed. For example,
    if you have a chop that is exporting to `/obj/geo*`, then it requires 
    recooking if an object is renamed from `/obj/foo` to `/obj/geo1`. To disable
    this behavior, set this environment variable to 1.

::MANTRA_FORCE_RAY
    Force mantra to use raytracing (same as `-r` option)

::MANTRA_ENGINE_PROCEDURAL
    Specifies the default behavior for enabling the engine procedural in
    mantra.  If the `-e` command line option isn't specified on the command line,
    this setting determines how the engine procedural will enabled.  Currently,
    the different possible values are "none", "basic" or "full".  Note that
    "full" will cause mantra to consume an Engine license (not a Render
    license).

    Specifying the `-e` option on the mantra command line overrides this variable.

::MANTRA_DISABLE_FOGBOX
    When rendering fog, mantra will create a matte shaded
    object automatically so the fog will be picked up in the
    background.  Setting this variable disables this feature.

::MANTRA_NONRAT_ERROR
    Normally, mantra will automatically convert texture files that are not
    in `.rat` format to `.rat` format internally - which can slow down render
    startup.  To disable automatic conversion to `.rat` format and instead
    print out an error when textures are not in the native format, set this
    variable.

::MANTRA_LINEAR_CREASES
    Revert to the subdivision crease algorithm used in Houdini 12.5 and
    earlier.  Subdivision creases in mantra now use Pixar-style creasing
    for Houdini 13 and later.

::HOUDINI_RMAN_INCLUDE_FIX
    Setting this variable will cause the order of pre/post includes to
    be different when generating RIB.  This allows for proper motion
    blur of RiReadArchive geometry read using the include files.

::HOUDINI_MI_DISABLE_FLIP_RMAP
    When auto-generating reflection maps for MentalRay, one of the
    images is flipped by default.  Setting this variable will turn the
    flipping off.

::HOUDINI_DISABLE_SOHO_SPOOLING
    When this variable is defined, interactive rendering from within
    Houdini will send data directly to the renderer over a pipe rather than
    first saving it to a temporary file and then spooling it to the
    renderer in a separate thread.

::HOUDINI_MMB_PAN
    When this variable is defined, the mouse buttons are remapped so that the
    left button tumbles, middle mouse pans, and right mouse button zooms.
    This is the setting used in Houdini version 8.1 and earlier.

::HOUDINI_DISABLE_SAVE_THUMB
    Disable saving of thumb-nails in `.hip` files.  This makes .hip
    files smaller and faster to save/load.

::HOUDINI_UI_COREDUMP
    Prevent Houdini from trying to saving a `.hip` file when a crash is
    detected.  Instead, Houdini will simply crash.

::HOUDINI_USER_PREF_DIR
    The directory to store user preference files. The value of this variable
    must include the substring `__HVER__`, which will be replaced at run time
    with the current `MAJOR.MINOR` version string. On Windows and Linux, this
    defaults to the expanded value of `$HOME/houdini__HVER__`. On Mac OSX, it
    will also use this default if the directory exists, else it uses the
    expanded value of `$HOME/Library/Preferences/houdini/__HVER__`.

::HOUDINI_ENABLE_FPS_SCALE
    If enabled, it will stretch all keys in your animation so that the time
    at the start of the last keyframe is the total animation length when you
    change the frame rate of your animation. Usually, when you change your
    animation frame rate, the last keyframe will end up at a fractional
    keyframe of your new frame rate because each frame in Houdini is actually
    a (1/FPS) seconds in length. Note that when you do this, the actual timing
    of your animation will be changed when you modify your frame rate.

::HOUDINI_LINUX_DOUBLE_CLICK_TIME
    Specifies the delay (in seconds) within which the mouse button needs to be
    clicked (and released) for the second time in order to consider it a
    double-click action.

::HOUDINI_ENABLE_TABLET
    Enable Wacom tablet support on Linux and Windows. This defaults to 1.

::HOUDINI_ENABLE_3DMOUSE
    Enable 3D mouse support. This defaults to 1.

::HOUDINI_USE_NATIVE_FILE_CHOOSER
    This variable controls whether Houdini will use the file chooser dialogs
    provided by the operating system. By default Houdini will try to use them,
    but only on platforms on which Houdini supports native file choosers. If
    this variable is set to 0, Houdini will use own file browser dialogs. There
    are three levels that this variable can specify.
    
    `0`:
        Only use Houdini's own file choosers. This is the default behavior.
    `1`:
        Houdini and MPlay will use native file choosers for their File > Open...
        items in their main menus. For any other file browsing, Houdini will use
        own file choosers. 
    `2`:
        If possible, Houdini will use native file choosers for browsing any
        file.

::HOUDINI_MAX_FILE_HISTORY
    This variable controls the maximum number of items kept in the recent files
    history lists. Its value can range from 1 to 64 inclusively.

::HOUDINI_X11_SYNCHRONOUS
    Force Unix X11 servers to be synchronous. If enabled, this may affect
    performance by slowing down redraws.

::HOUDINI_VIEW_METACAM
    Obsolete control.

    Used to specify Houdini digital assets lockable to the view. Please, use the
    desired light or a camera as a "Representative" operator for the HDA, 
    which can be specified in the Basic tab of the asset properties.

::HOUDINI_SKIP_NAME
    Avoid printing viewport name in Houdini

::HOUDINI_TOP_POS_SINGLE_PASS
    Set this environment variable to force only a single pass for
    drawing the wireframe outside of stamped projections in the
    TOP texture positioner view.  Otherwise multiple passes are used
    to only draw the frame outside of the stamped projection.

::HOUDINI_IPLAY_IP
    Force "ip" image device to use `iplay` instead of `mplay`.  This
    behavior can be overridden using the `HOUDINI_IP_COMMAND` and
    `HOUDINI_IP_COMMAND_FLIP` controls.

::HOUDINI_CONSOLE_LINES
    Number of lines to store in the Windows console

::HSCRIPT_NO_HISTORY
    If this variable is defined, the script applications (`hython` and
    `hbatch`) and script panes will not store the line history. They will use
    standard input directly.

::HOUDINI_INTERRUPT_THRESH
    Timeout in seconds before the interrupt dialog appears to interrupt long
    operations.

::HOUDINI_TEX3D_USAGE
    Amount of memory used by 3D texture maps in VEX.

::HOUDINI_RAT_USAGE
    Amount of memory used by RAT textures in Houdini and renders.
    This amount is specified in mega-bytes.  For example, setting the
    control to 32 will limit Houdini/Mantra to use 32 Mb of RAM for
    RAT file texturing.

::HOUDINI_RAT_FILES
    The maximum number of files held open by the Houdini texture
    engine for rendering or other applications.

::HOUDINI_RAT_LOCALCACHE
    Specifies the size of the local texture disk cache in MB.

    When texture are stored on network drives, and there are more
    textures than will fit in memory (i.e. there's texture cache
    thrashing), setting a local disk cache will cause discarded tiles
    to be written to a local disk file rather than having to be
    re-fetched over the network.  This may improve performance on
    heavily loaded networks.

    The cache file is created in `HOUDINI_TEMP_DIR` (which should have
    enough space to store the cache file).

::HOUDINI_RAT_OPTIMIZE_BANDWIDTH
    When textures are stored on network drives, Houdini/Mantra can
    attempt to optimize data transfer over the network.  This control
    can be used enable/disable this behavior.  The default behavior
    is to perform bandwidth optimization.

    This feature may not be supported on all operating systems.

::HOUDINI_PTEX_USAGE
    Amount of memory used by `.ptx` textures in Houdini and renders.
    This amount is specified in mega-bytes.  For example, setting the
    control to 32 will limit Houdini/Mantra to use 32 MB of RAM for
    `.ptex` files.

::HOUDINI_PTEX_FILES
    Maximum number of files held open by the `ptexture` library in
    Houdini and renders.

::HOUDINI_PTEX_WINDING
    Controls the expected orientation of `ptexture` faces.  Setting the
    value to 1 will swap the u and v coordinate from the standard
    Houdini format, which is typically the expected orientation from
    other software packages.  When 1 you won't have to swap uv's in
    shaders or SOPs.

::HOUDINI_UVENLARGER_DIFFUSE_WRAP
    When set to 1, `Diffuse Fill` UDIM Post Process in Bake Texture will wrap
    diffusion across 0-1 boundaries, which can be help reduce visible seams if
    an edge of a polygon is touching the boundary in UV space, and texture is
    sampled at higher mipmap level with wrapped texture filter.

::HOUDINI_MDISPLAY_WAIT_TIME
    Number of seconds to wait before deciding that `iplay` could not be started.

::HOUDINI_OVERRIDE_XRES
    Specifies the horizontal resolution of your monitor in pixels.
    Houdini will not create any windows wider than the value specified
    here. You can use this value to force Houdini to only use a
    portion of your screen.

::HOUDINI_OVERRIDE_YRES
    Specifies the vertical resolution of your monitor in pixels.
    Houdini will not create any windows taller than the value specified
    here. You can use this value to force Houdini to only use a
    portion of your screen.

::HOUDINI_UISCALE
    This specifies a fixed scale factor to adjust the dots-per-inch
    Houdini uses for displaying ui.  A value of 100 will provide the
    default of 85 dpi.  A value of 200 will have all fonts and icons
    twice that size, and 50 will make them half that size.  A value of
    -1 will cause the dpi to be calculated from the monitor's
    dimensions and resolution, or by `HOUDINI_OVERRIDE_*`.

    By default the value is 100.

::HOUDINI_SCRIPT_DEBUG
    If set, errors will be printed when loading dialog scripts and
    scripted operators.

::HOUDINI_IMAGE_DEBUG
    If set, some image formats will be more verbose about errors encountered
    when saving/loading images.  It's possible that many false positives will
    be reported with this setting turned on, so it's not recommended to have
    this enabled by default.

::HOUDINI_TARGA_LINEAR
    Houdini defaults TARGA images to sRGB color space.  However, older
    versions of Houdini expected TARGA format to be in linear space.  Setting
    this variable will change the default color space for TARGA images to
    linear.

::HOUDINI_ENABLE_EXR_TEXTURE
    When enabled (default on) this allows Houdini to access .exr files directly
    for texture evaluation.  While convenient, this may have performance
    penalties if there are large filter areas.  Disabling this will cause .exr
    files to be converted internally to .rat files for more efficient texture
    access.  There is a cost (time and memory) to converting to .rat files.

::HOUDINI_SCRIPT_LICENSE
    This variable is primarily used to determine which license should be
    used when using the hou module from a standard python shell.  The
    license will determine which features are available in the hou module.
    It is recommended that you set this variable with os.environ, but you must
    do so before importing the hou module.

    Note that `hython` and `hbatch` will also use this variable.  The `hbatch`
    and `hython` options will override this variable, though.

    Possible values of the variable are:
    `"hbatch"`:
        Access to all of Houdini.  Checks out for a Houdini Batch license,
        and if one could not be found, checks out an Houdini Master license.
    `"hbatch -R"`:
        Same as `"hbatch"`, but only checks for a Houdini Batch license.  
        See the -R option in `hbatch` for more information.
    `"hscriptexper"`:
        Access to all of Houdini, including the experimental parts.  It uses a
        Houdini Master Experimental license.
    `"hescape"`:
        Access to all the nodes that Houdini Escape has access to.  uses
        a Houdini Escape license.
    `"hescape -p"`:
        Access to all the nodes that Houdini Escape has access to, plus the
        third party rendering nodes.  Uses a Houdini Escape license and
        a Plus license.

::HOUDINI_RMAN_CURVE_STEP
    Obsolete control.
    Overrides the step size when writing RiCurve primitives for RIB.  This
    is obsolete and may be removed in future versions.  It has been replaced 
    by the `ri_curvestep` detail integer attribute.

::HOUDINI_DISABLE_ALEMBIC_INDEXED_ARRAYS
    Disable saving string attributes as Alembic indexed arrays.  By
    default, Houdini will save strings as indexed attributes in cases
    where it makes sense.  This option will disable this feature.

::HOUDINI_ALEMBIC_OGAWA_STREAMS
    When doing threaded processing on Alembic Archives, use this many
    streams. The default of zero lets Houdini pick the optimal number, and
    1 disables threaded processing of Alembic archives. Higher values enable
    threading but cause more open files, so it should generally not be set
    higher than the processor count.

::MANTRA_BIAS_NORMAL
    Specifies that biasing for ray tracing operations in mantra should
    operate along the normal vector rather than along the outgoing ray.

::HOUDINI_UI_QUEUE_SIZE
    Specifies the size of the UI event queue.  Increasing this can
    help prevent queue overflows.

::FPS
    This variable is used by `iplay` to set the default frames per
    second.  It is automatically set by the OpenGL output driver.

::HOUDINI_PERFORMANCE_SIZE
    Specifies the number of lines that the performance monitor keeps.

::HOUDINI_ABEKAS_PAL_XRES
    Overrides the default resolution of the `abekas` image device.

::HOUDINI_ABEKAS_PAL_YRES
    Overrides the default resolution of the `abekas` image device.

::HOUDINI_GAUSS_EXP
    Specifies the exponent for the Gaussian filter kernel.  This
    affects any Gaussian filtering (image scaling, rendering, etc.)

::HOUDINI_MITCHELL_B
    Specified the B parameter of the Mitchell filter kernel.  This 
    affects any Mitchell filtering (image scaling, rendering, etc.)

::HOUDINI_MITCHELL_C
    Specified the C parameter of the Mitchell filter kernel.  This 
    affects any Mitchell filtering (image scaling, rendering, etc.)

::HOUDINI_CHOP_OLDNOISE
    The noise CHOP in Houdini5 and greater has a new method for
    computing random values.  This produces different results than
    Houdini4, but is more consistent on different hardware
    platforms.  If this variable is set, the noise CHOP in Houdini5
    will generate same values as Houdini4.

::HOUDINI_FULL_SHADERSTRING
    This variable determines whether shaders are output to mantra or `prman`
    with values set for all their parameters. If set to 0, then only
    parameters whose values are not at default are sent. This results in
    smaller IFD or RIB files. However, if the shader is changed without
    regenerating its corresponding .ds files, then the output might be wrong.

::HOUDINI_TYPED_SHADERSTRING
    This variable determines whether the shader string output to `prman`
    contains only the parameters that are tagged with a type.
    If the variable is not set, then all parameters are included whether or 
    not they have a script type information. Otherwise, if it is set,
    then shader string will contain only parameters that have an explicit
    `script_ritype` tag set.

::HOUDINI_RSL_HASHING
    To prevent name collisions on .slo files, Houdini will normally do
    hashing on the SLO shader name.  Mangling/hashing the shader name
    will help in cases where there are multiple shaders with the same
    name, but in different sub-networks.  In addition, hashing will
    help when the same `.hip` file is being used to generate shader files
    on a shared network drive (preventing overwriting by separate
    Houdini processes).

    The value of this variable has different levels of name mangling.
    
    `0`:
        Disable all mangling of names
    `1`:
        Hash shader name with the operator path name and the Houdini
        process id.
    `2`:
        Place shader in a sub-directory based on the `.hip` file name
    `3`:
        Place each shader in a sub-directory based on the `.hip` file
        name and the operator's full path.

::HOUDINI_VOP_DEFINITIONS_PATH
    Defines the directory search path where Houdini looks for connector
    type definitions (such as new struct definitions). The default is to look
    in the `vop` subdirectory of HOUDINI_PATH directories.

::HOUDINI_NO_DEFAULT_SHELF_TOOLS
    This variable, when set to non-zero, disables the automatic generation
    of the shelf tools for Houdini Digital Assets that don't define
    any shelf tools (or explicitly removed all the tools from its
    tool section). Otherwise, when a digital asset is loaded, Houdini
    will generate a default tool that will allow the user to instantiate
    it from the shelf or the TAB menu.

::HOUDINI_SHELF_EXCLUDE_DIRS_PATTERN
    If set, this specifies a regular expression that is used to exclude
    matching subdirectories when searching for shelf files.
 
::HOUDINI_CHOP_LINEWIDTH
    This variable controls the line thickness in the CHOP viewer.

::HOUDINI_CHOP_UNITS
    This sets the default parameter for the Units parameter of CHOPs. Valid
    values include: frames, samples, seconds.

::HOUDINI_CHOP_IMAGE
    This variable can be set to point to an image file which is
    displayed when the CHOP viewer is disabled.

::HOUDINI_COLOR_PICKER_GAMMA
    This variable specifies the gamma exponent for the device specific
    color correction of the color picker gadgets and color parameters.

::HOUDINI_CINEON_WHITE_POINT
    Defines the white point for reading and writing Cineon files.
    This value is not used if a LUT file is used. It defaults to 685.

::HOUDINI_CINEON_FILM_GAMMA
    Defines the film gamma for reading and writing Cineon files.
    This value is not used if a LUT file is used. It defaults to 0.6.

::HOUDINI_CINEON_BLACK_POINT
    Defines the Cineon black point for reading and writing Cineon files.
    This value is not used if a LUT file is used. It defaults to 95.

::HOUDINI_CINEON_FULL_RANGE
    If set, the generated LUT from the `CINEON_WHITE_POINT` and
    `CINEON_FILM_GAMMA` is not clipped above the white point; the
    full range of the Cineon data is preserved. Only used by the 
    Houdini 4.0 Compositor.

::HOUDINI_CINEON_RENDER_LUT
    Defines the default render LUT filename for reading and writing 
    Cineon files.

::HOUDINI_CINEON_PREVIEW_LUT
    Defines the default preview LUT filename for reading and writing
    Cineon files. Only used by the Houdini 4.0 Compositor.

::HOUDINI_IMAGE_DISPLAY_GAMMA
    Defines the default gamma for Houdini (found in Edit > Color Settings),
    for displaying images in the composite view, render view, 3D viewport
    and MPlay.

::HOUDINI_IMAGE_DISPLAY_LUT
    Defines the default display LUT for Houdini (found in Edit > Color Settings),
    for displaying images in the composite view, render view, 3D viewport
    and MPlay.

::HOUDINI_OCIO_SRGB_FILE_COLORSPACE:
    Sets the source colorspace for an sRGB file when loaded into MPlay.

::HOUDINI_OCIO_FILENAME_COLORSPACE:
    Enables detection of the OpenColorIO colorspace of an image file by looking
    at the filename itself. If set to 1, detection is enabled. The longest,
    rightmost string that matches a colorspace will be taken as the colorspace.
    If none are found, use Houdini's heuristics for determining the colorspace
    (JPG is sRGB, EXR is linear, etc). If set to 2, detection occurs in the same
    way but when no colorspace is found, the "default" role defined by the
    OpenColorIO `config.ocio` file is used (OpenColorIO strict parsing). When 
    set to 0, detection is not performed and Houdini's native heuristics are
    used to determine the colorspace.

    This only has an effect if an valid `OCIO` environment variable is set.
   

::HOUDINI_IMAGE_DISPLAY_OVERRIDE
    If set to 1, the `HOUDINI_IMAGE_DISPLAY_GAMMA` and `HOUDINI_IMAGE_DISPLAY_LUT`
    will always override the values stored in color.pref. When 0, these 
    variables will only take effect if `colors.pref` is not present. Setting this
    to 2 will only allow gamma to override, and 3 only the LUT.

::HOUDINI_IMAGE_INSPECT_LUT
    Defines the default inspect LUT filename for inspecting images in
    the compositor's viewer and MPlay.

::HOUDINI_AUTOCONVERT_IMAGE_FILES
    By default Houdini linearizes any non-linear image formats that it loads,
    and converts them from linear to the image format's native colorspace when
    writing image files. This can be globally disabled by setting this variable
    to 0, though local options can still override it (`icp -g auto`, the 
    Linearize Non-Linear Images in the File COP). This sets the initial 
    default for those parameters. This should only be used if a LUT pipeline is
    handling the linearization of images. This should generally be used in 
    conjunction with a `HOUDINI_IMAGE_DISPLAY_GAMMA` setting of 1.0.

::HOUDINI_LOD
    This is an Level of Detail number, such as 0.01 or 1.0.  It becomes 
    the default LOD for new windows.  Higher LODs will result in more 
    accurate drawing of curves and surfaces, however at a corresponding 
    cost in display speed.  By default, it is set to 1.0.  If you find
    yourself having to constantly change the View Parameter:Viewer:LOD
    setting, you might save some work by just making your default a
    better value.

::HOUDINI_WF_GAMMA
    Specifies the gamma value written out to Wavefront `.rla` files.

::EDITOR
    Houdini will use this variable to determine which external graphical
    editor to invoke when editing text.  The editor should run in the
    foreground.

    If the VISUAL environment variable is set, then it is used instead of
    EDITOR and started as a graphical process. In other words, the VISUAL
    environment variable will override this and thus have no effect if VISUAL
    is also set. If both the VISUAL and EDITOR variables are _not_ set, then
    a default editor (Windows Notepad, Mac OS X Text Edit, Linux GEdit) is used.

    This environment variable may be used by applications other than Houdini.

::VISUAL
    Houdini will use this variable to determine which external editor
    to invoke when editing text.
    
    If this environment variable is not set, then the EDITOR environment
    variable is used. See the help for the EDITOR environment variable to see
    what are the defaults if both are not set.

    This environment variable may be used by applications other than Houdini.

::HFS
    The path where Houdini is installed.
    Houdini reads the configuration information from `$HFS/houdini`.

::SHELL
    When Houdini starts external applications, it uses the SHELL
    variable to determine how to start them.
    This may be used by applications other than Houdini.

::HOME
    This variable determines your "home" directory.
    This may be used by applications other than Houdini.
    Houdini mostly uses files in `$HOME/houdiniVERSION`, where VERSION i
    the current version number (ie: `$HOME/houdini6` or `$HOME/houdini6.1`).

::HSITE
    The HSITE variable is a path to the site-specific Houdini
    configuration information.  This allows a site to have a common
    set of defaults and files.  It is, by default, in the `HOUDINI_PATH`
    between HOME and HFS.  To change global configuration information,
    you should use this rather than editing the contents of
    `$HFS/houdini`.

    Like `HOME`, Houdini uses `$HSITE/houdiniVERSION`, where version is
    the current version number (ie: `$HSITE/houdini16` or
    `$HSITE/houdini16.1`)

::JOB
    See [project management|/basics/project].

::HOUDINI_TEMP_DIR
    Specifies a directory where Houdini will generate temporary files.

::HOUDINI_UNDO_DIR
    Specifies a directory where Houdini will store undo information.
    If not specified, the temporary directory will be used.

::HOUDINI_CONDENSE_HIP
    If this variable is set Houdini will attempt to make paths entered
    "friendly" by replacing portions of filename paths with `.hip` if
    it's appropriate.  This behavior is off by default.

::HOUDINI_UNBUFFERED_STDINOUT
    If this variable is set, Houdini will not buffer the console's standard
    input and output.  When output is unbuffered, any output you write to the
    console (from C++, Python, etc.) will appear immediately, without you
    having to write a newline character or flush the output.  This variable
    is similar to Python's `PYTHONUNBUFFERED` variable.

::HOUDINI_MESSAGE_COMMAND
    An external program which Houdini uses to display graphical messages.

::HOUDINI_CONFIRM_COMMAND
    An external program which Houdini uses to display confirmation boxes.

::HOUDINI_WEB_BROWSER_COMMAND
    An external program which Houdini uses to display web pages. For example
    `"/usr/bin/firefox"` on Linux or `"c:/Progra~1/Mozill~2/firefox.exe"` on 
    Windows (though `"c:\\\Progra~1\\\Mozill~2\\\firefox.exe"` is also valid).

::HOUDINI_TERMINAL_COMMAND
    An external program which Houdini uses as a terminal. For example
    the default `"xterm"` or `"gnome-terminal"`.

::HOUDINI_ERRORLOG_FILENAME
    If set to a valid file name, Houdini will log all errors of severity 
    above `HOUDINI_ERRORLOG_LEVEL` to this file.

::HOUDINI_ERRORLOG_LEVEL
    The minimum error level that Houdini will write to the error log file
    specified by `HOUDINI_ERRORLOG_FILENAME`.  Valid values are integers 
    between 0 (all errors will be logged) and 6 (nothing will be logged)
    inclusive.  Default value is 3.  
    Error levels are defined as follows: 1, message; 2, prompt; 3, warning;
    4, abort operation; 5, fatal error.

::HOUDINI_DEFAULT_TEXTURE_COLOR
    Specifies the default color to use when texture maps cannot be
    found while rendering.  This can be specified as a single string
    containing four floating point numbers representing the red,
    green, blue and alpha components of the default color.  For
    example:
    
    `setenv HOUDINI_DEFAULT_TEXTURE_COLOR "0 0 0 0"`
       
    to set it to zero black.

::HOUDINI_DESKTOP_DIR
    This variable specifies the file path to the folder or the directory 
    that is considered the user's system desktop directory. This variable is
    used in the file chooser dialog to jump to the user's desktop.

::HOUDINI_VEX_DEFAULT_AMBIENT
    The default VEX ambient light shader.  If no shader can be found
    for an ambient light source, this shader will be applied at render
    time.

::HOUDINI_VEX_DEFAULT_LIGHT
    The default VEX light shader.  If no shader can be found for a
    light source, this shader will be applied at render time.

::HOUDINI_VEX_DEFAULT_MATTE
    The default VEX matte surface shader.  This shader is used at render
    time to provide a background surface if there is fog applied to a scene.

::HOUDINI_VEX_DEFAULT_SHADOW
    The default VEX shadow shader.  If a light source is casting shadows,
    but no shadow shader is found, this shader is applied at render time.

::HOUDINI_VEX_DEFAULT_SURFACE
    The default VEX surface shader.  If no surface shader can be
    found, this shader will be applied at render time.

::HOUDINI_VEX_DEFAULT_VOLUME
    The default VEX surface shader applied to volumes.  If no surface
    shader can be found for an object, this shader will be applied at
    render time.

::HOUDINI_OGL_DEBUG
    Starts Houdini with a debug GL profile, if supported by the OpenGL driver.
    This can be used to help debug GL render hooks in the HDK. The value 
    specifies the level, which includes reporting from all levels below it.
    This information is provided by the OpenGL driver and requires the 
    GL_ARB_debug_output extension. Messages are written to the standard error 
    stream and prefixed with `HOUDINI_OGL_DEBUG`.

    `0`:
        No debugging (default)
    `1`:
        High priority messages only
    `2`:
        Medium and high priorities
    `3`:
        Low, medium and high priorities
    `4`:
        All messages (notifications, low, medium and high priorities)

::HOUDINI_OGL_DEBUG_EXCLUDE
    Excludes certain messages types from debug output when `HOUDINI_OGL_DEBUG` is
    enabled. Multiple message types and sources can be excluded, specified by
    whitespace-separated strings.

    `error`:
        OpenGL Errors
    `performance`:
        Issues affecting performance 
    `portability`:
        Legal uses of OpenGL on this platform that may not work on others
    `undefined`:
        Use of OpenGL whose behavior is not defined by the OpenGL specification 
    `deprecated`:
        Use of OpenGL features that are deprecated (legacy)
    `other`:
        Other miscellaneous messages
    `annotation`:
        Houdini debug annotations
    `group`:
        Houdini main rendering group annotations
    `opengl`:
        Message originated from the OpenGL driver
    `compiler`:
        Message originated from the GLSL compiler, or other compiler
    `window`:
        Message originated from the Window Manager (WGL, GLX, AGL)
    `houdini`:
        Message originated from Houdini
    `thirdparty`:
        Message originated from outside OpenGL, Houdini or Window Manager

::HOUDINI_OGL_PICKBUFFER_PATH
    For debugging viewport picking. Specifies a directory where pick buffers
    should be written out as image files for later inspection. Use the
    `HOUDINI_OGL_FILECOUNT` variable to control the number of files to write
    before looping around to overwrite existing files.

::HOUDINI_OGL_SNAPBUFFER_PATH
    For debugging viewport snapping. Specifies a directory where snap buffers
    should be written out as image files for later inspection. Use the
    `HOUDINI_OGL_FILECOUNT` variable to control the number of files to write
    before looping around to overwrite existing files.

::HOUDINI_OGL_BEAUTY_PATH
    For debugging viewport drawing. Specifies a directory where geometry
    draw should be written out as image files for later inspection. Use the
    `HOUDINI_OGL_FILECOUNT` variable to control the number of files to write
    before looping around to overwrite existing files.

::HOUDINI_OGL_VIEWPORT_PATH
    For debugging viewport drawing. Specifies a directory where final viewport
    buffers should be written out as image files for later inspection. Use the
    `HOUDINI_OGL_FILECOUNT` variable to control the number of files to write
    before looping around to overwrite existing files.

::HOUDINI_OGL_FILECOUNT
    Controls the number of images to keep when writing out OpenGL buffers with
    the `HOUDINI_OGL_SNAPBUFFER_PATH`, `HOUDINI_OGL_PICKBUFFER_PATH` and
    `HOUDINI_OGL_BEAUTY_PATH` values.

::HOUDINI_COPY_SUFFIX
    When copy/pasting, this variable can be used to create user-specific temporary files.

::HOUDINI_OPNAMESPACE_HIERARCHY
    Defines the operator type namespace hierarchy as a space-separated
    list of namespace names and/or operator type names, sorted according to
    the descending preference order. This hierarchy is used to resolve
    any ambiguous operator type names used in scripts (eg, in opadd command)
    A few examples:
    
    Given hierarchy `"userB userA"` and available operators `userA::hda` and
    `userB::hda`, the command `"opadd hda"` will choose `userB::hda`.
    
    Given hierarchy `"Sop/hda::2.0"` and available operators `hda::2.0` and
    `hda::3.0`, the command `"opadd hda"` will choose `hda::2.0`.
    
    Given hierarchy `"Sop/hda::"` and available operators `hda` and `hda::1.0`,
    the command `"opadd hda"` will choose `hda`.

::HOUDINI_RMAN_CURVE_BASIS
    Obsolete control.
    Specify the curve interpolation when generating RiCurve primitives in a
    RIB stream.  This should be one of `"linear"` or `"cubic"`.  This is obsolete
    and may be removed from future versions.  It has been replaced by the
    `ri_curveinterpolation` detail string attribute.

::HOUDINI_COP_DISK_DEFAULTNAME
    Obsolete control

::HOUDINI_COP_ENSURECOLORPLANES
    Forces each COP to generate C and A color planes.  Provides backwards
    compatibility with old versions of Houdini.

::HOUDINI_MANTRA3_SHADOW
    Obsolete control

::HOUDINI_MANTRA3_REFLECT
    Obsolete control

::HOUDINI_RI_SHADERPATH
    When the RSL shader search path is not specified on the RIB output driver
    in the Shader Path parameter (or if the parameter does not exist),
    then this environment variable is checked.  If this variable exists,
    then its value will be output to the RIB stream.  If the variable
    doesn't exist, a specially constructed search path will be output 
    to the RIB file. That specially constructed path consists of 
    the current directory, followed by the list of `ri_shader` sub-directories 
    in HOUDINI_PATH, followed by the RenderMan's default shader search path.

::HOUDINI_RI_RIXPLUGINPATH
    When the RIS shader search path is not specified on the RIB output driver 
    in the Rix Plugin Path parameter (or if the parameter does not exist),
    then this environment variable is checked.  If this variable exists, 
    then its value will be output to the RIB stream.  If the variable
    doesn't exist, then no RIS plugin path will be output to the RIB file.

::HOUDINI_FILE_VIEWER
    Specify an external application to view files.

::HOUDINI_CHECK_XFORM
    When generating scripts for renderers, if this variable is set,
    the transforms on objects will be tested to see if they are
    singular (i.e. whether there are zero scales).  If the transform
    is singular, the object will not be output.

    The value of this variable is the threshold at which the transform
    is considered zero.  Thus, the variable should be set to some very
    small floating point number.

::HOUDINI_STPATH
    Specify a path to search for the source to a shader when editing
    shader code from pop-up dialog scripts.

::HOUDINI_STEDIT
    Specify an external application to edit shaders with.

::HOUDINI_DOUBLEBUFFER
    This variable can be set to either ON or OFF.  It will force
    houdini to run in either single or double buffer mode.

::HOUDINI_WORKSHEET_BOXPICK
    This environment variable is used to override using the left mouse
    button for box picking in the network worksheet.  Can be set to
    either "middle" or "right".

::HOUDINI_DEFOPTYPEPREFIX
    When you convert a subnet into a new operator type, this prefix,
    if present, will be used for guessing what the basename of the new
    operator should be.  If not present, the username is used.

    For example, setting this to `"foobar_"` will ensure all operators
    created will have their basename type prefixed by `foobar_`.  This
    can be used to ensure conflicts don't occur with other projects
    operators.

::HOUDINI_VEX_COMPILER
    External application used for compiling VEX code. Usually "vcc".

::HOUDINI_ABEKAS_LOGNAME
    Specify the user name for logging into an Abekas frame recorder.

::HOUDINI_ABEKAS_LOGPASSWD
    Specify the password for logging into an Abekas frame recorder.

::HOUDINI_MD_COMMAND
    Specify the external application used by the md image device to
    read images from stdin and display them in a persistent frame
    buffer device (i.e. MPlay).

::HOUDINI_MD_COMMAND_FLIP
    Specify the external application used by the md image device to
    read images from stdin and display them upside down in a
    persistent frame buffer device (i.e.

::HOUDINI_MPLAY_LOCKPATH
    Specify a directory to create the MPlay lockfiles.  These files
    will normally be created in the user's HOME directory.  The value
    of this variable should point to a directory where lockfiles can
    be created (i.e. /tmp or c:/temp).

::HOUDINI_EXTERNAL_HELP_BROWSER
    When this variable is defined, Houdini will launch a default web 
    browser to display the help documents externally. This applies only
    to the Houdini's floating help browser pane; the embedded panes will
    still show the Houdini's own help browser. This environment variable
    is useful to display html content which cannot be normally displayed
    in the standard help browser (such as https).

::HOUDINI_IP_COMMAND
    Specify the external application used by the ip image device to
    read images from stdin and display them in a viewer (i.e. `iplay`).

::HOUDINI_IP_COMMAND_FLIP
    Specify the external application used by the ip image device to
    read images from stdin and display them upside down in a viewer
    (i.e. `iplay`).

::USER
    Internally, Houdini will to override this variable with
    information from the login session.  This variable represents the
    name of the user logged in.

::HOUDINI_OS
    The OS that Houdini believes it's running on.  Possible values of
    this variable are currently defined as `"Windows"`, `"Linux"`,
    or `"MacOS"`.

::HOUDINI_UI_RESOURCES
    An application variable which specifies the name of the resource file used
    for Houdini. It is rare that you would need to change this variable,
    and incorrectly setting it will cause the graphical Houdini applications
    to fail on startup.

::HOUDINI_PATH
    The path of directories where Houdini looks for configuration
    files.

::HOUDINI_OTL_PATH
    This path is not used directly by Houdini.  It is used to provide
    default values for the `HOUDINI_OPLIBRARIES_PATH` and `HOUDINI_OTLSCAN_PATH`
    values in a way that is backward compatible (since `HOUDINI_OTL_PATH`
    used to mean what `HOUDINI_OPLIBRARIES_PATH` now means).

::HOUDINI_OTLSCAN_PATH
    This path specifies the directories Houdini will search for OTL files.
    This value is only used if the Operator Type Manager is configured not
    to use `OPlibraries` files to find OTL files. The default for this value
    is the HOUDINI_OTL_PATH with `/otls` appended to each directory in
    that path.

::HOUDINI_OPLIBRARIES_PATH
    The path of directories where Houdini looks for `OPlibraries` files
    for loading OTL files at startup.  `OPlibraries` files are only used
    if the Operator Type Manager is configured to use them. Otherwise
    OTL files are scanned for directly.  This path by default is equal
    to the `HOUDINI_OTL_PATH`.

::HOUDINI_SCRIPT_PATH
    The path of directories where Houdini searches for scripts.  This
    includes `.cmd` files for `hscript`, `.class` files for the java command,
    `.tcl` and `.tk` files for the `tcl` and `tk` commands, and command scripts
    for the Alfred Output Driver.

::HOUDINI_SOHO_PATH
    The path of directories used by soho.

::HOUDINI_CLIP_PATH
    The path of directories where Houdini looks for `.clip` and `.bclip` channel files

::HOUDINI_CUSTOM_PATH
    The path of directories where Houdini looks for custom panel information.

::HOUDINI_DESK_PATH
    The path of directories where Houdini looks for desktops.

::HOUDINI_DSO_PATH
    The search path for loading custom plug-ins (Dynamic Shared Objects or Dynamic Link Libraries).

::HOUDINI_GALLERY_PATH
    Specifies the search path to the directory that contains the gallery files.
    If this variable is not set, Houdini looks in the `gallery` subdirectories
    of the standard search path, which includes `$HFS/houdini/gallery/`, for
    example.  Gallery files specify the predefined parameter values for any node
    type, much like the presets. However, they are used predominantly for
    defining shaders and materials.

::HOUDINI_IMAGE_DSO_PATH
    The search path for loading custom image format plugins for
    reading and writing images of that format (`.so`, `.dll`).

::HOUDINI_AUDIO_DSO_PATH
    The search path for loading custom audio format plugins for
    reading and writing audio or channel files (`.so`, `.dll`).

::HOUDINI_PDG_DSO_PATH
    The search path for loading custom PDG node, work item, and scheduler
    definitions (`.so`, `.dll`).

::HOUDINI_VEX_DSO_PATH
    The search path for loading custom VEX functions.

::MANTRA_DSO_PATH
    The search path for loading mantra specific plug-ins (procedurals)

::HOUDINI_ENABLE_OLD_PRESETS
    If set, the preset menu in the parameter pane toolbar will show 
    the old-style presets options for loading and saving the presets to a file.

::HOUDINI_USE_OTL_AS_DEFAULT_HDA_EXT
    If set, Houdini will use the older `.otl` as the default extension for
    digital assets instead of the newer `.hda` extension.

    This can be useful when using a legacy asset management system that
    does not yet understand the new `.hda` extension.

::HOUDINI_GEOMETRY_PATH
    The search path for geometry files.

::HOUDINI_GEOMETRY_CACHESIZE
    The size for caching of tessellated geometry in Houdini.  Some uses
    for tessellated geometry include viewport rendering, and ray
    intersections.

::HOUDINI_MACRO_PATH
    The search path for toolbar macro files.

::HOUDINI_MENU_PATH
    The search path for XML menu files, such as the main menu, the node RMB
    menu, parameter menu, and shelf menu.

    Note, the paths are scanned in reverse order, i.e., the files from
    directories further in the path are loaded first, and files from directories
    earlier in the path are loaded later. This ensures that the default
    menus are loaded first, which allows custom files to modify their
    configuration.

::HOUDINI_PDG_PATH
    The search path for PDG templates, interface files and custom Python node
    definitions.

::HOUDINI_PYTHON_PANEL_PATH
    The search path for factory and custom Python panel files.  The panel files
    are searched for and loaded when Houdini starts. They can define interfaces
    that appear in Python Panels or set the configuration of the Python Panel
    interfaces menu.

::HOUDINI_TEXTURE_PATH
    The search path for loading images.  This includes .rat files and
    other 2D formats as well as .i3d 3D texture files.

::HOUDINI_TOOLBAR_PATH
    The search path for factory and custom shelves and shelf tools (i.e., 
    shelf files). The shelf files are searched for and loaded when Houdini
    starts. They can define new tools that appear in the TAB menu or new
    groupings of tools (ie, toolbars or shelves) which can be displayed in the
    shelving area (usually, just below the main menu).

::HOUDINI_RADIALMENU_PATH
    The search path for factory and custom radial menus. The radial menu files
    are searched for and loaded when Houdini starts.

::HOUDINI_UI_APP_PATH
    An application search path for .ui definition files. Use care when changing
    this path, otherwise the graphical Houdini applications may not start.

::HOUDINI_UI_AUDIO_PATH
    An application search path for the audio notification files used by the 
    interface. Use care in changing this path, otherwise audio notifications
    may stop working.

::HOUDINI_UI_CURSOR_PATH
    An application search path for locating the Houdini mouse cursor set. Use
    care when changing this path, otherwise the mouse cursor may not reflect
    its current context.

::HOUDINI_UI_DIALOG_PATH
    An application search path for locating the Houdini dialog files generated
    from states, handles, operators and HDAs. Use care when changing this path, 
    otherwise the parameter pane will not show any user interface for the 
    chosen objects.

::HOUDINI_UI_PATH
    The base path for all user interface files. Use extreme care when changing
    this variable, or graphical Houdini applications may not start. Before
    adding paths to this variable, check the other `HOUDINI_UI` variables to see
    if one or more of those paths will accomplish what you need. Adding a new
    path to this variable can be expensive.

::HOUDINI_UI_TEMPLATE_PATH
    An application search path for locating the parts Houdini uses to compose
    a user interface for states, handles, operators and HDAs. Use extreme care 
    when changing this path. Houdini may not recover very well if the user
    interface parts are missing.

::HOUDINI_UI_ICON_PATH
    The search path for icon files. Setting this path will override the
    default of `$HOUDINI_PATH/config/Icons`.

::HOUDINI_GEOMETRY_FORMAT
    Specifies the default geometry format used when saving geometry.
    The default is to use the current version of Houdini's version.
    Setting to `"hclassic"` will save geometry in Houdini 11's geometry
    format, which doesn't support all the features of later formats.

::HOUDINI_ICON_CACHE_DIR
    The directory to store the cache of rendered icons in. By default, this
    cache is stored in `$HOUDINI_USER_PREF_DIR/config/Icons`. If your home
    directory is slow (for example, if home directories are stored on networked
    servers), setting this to a local path may help Houdini's startup
    time.

::HOUDINI_VEX_PATH
    The search path for VEX code.  Setting this path will override the
    default path of `$HOUDINI_PATH/vex/`.  Searching for the dialog
    scripts is independent of VEX searching and is controlled by the
    `HOUDINI_PATH`.

::HOUDINI_GLSL_PATH
    The search path for GLSL code.  Setting this path will override the
    default path of `$HOUDINI_PATH/ogl2/`.  Searching for the dialog
    scripts is independent of GLSL searching and is controlled by the
    HOUDINI_PATH.

::HOUDINI_ASSET_STORE_PATH
    The search path for the user's asset store related files (asset OTLs,
    licenses, list of installed assets, etc)

::HOUDINI_OUTLINEFONT_PATH
    This is the path searched for Adobe Type 1 or True Type fonts used
    in the [Font SOP|Node:sop/font] and [Font COP|Node:cop2/font].

::HOUDINI_BACKUP_DIR
    This is the directory used to store the backed-up hip files when the 
    "Numbered Backup" save option is set.  HOUDINI_BACKUP_DIR must be set to a
    native file path.  Custom file system (FS) paths are not supported.

::HOUDINI_BACKUP_FILENAME
    A template for the filename used for file backups when the
    "Numbered Backup" save option is set.  Two variables are required:
    $BASENAME, which will be replaced by the name of the file being saved
    without its extension; and `$N`, which is replaced by the backup number.
    `$N` can be followed by a single digit which is interpreted as the number
    of digits to be used in the backup number; numbers with fewer digits than
    this will be padded with zeroes.  Default value is `$BASENAME_bak$N`.

    A subdirectory path may be included, but only `$BASENAME` will be replaced
    in this part of the template.  This may be used to group all the backups
    for a given file into a subdirectory (e.g. `$BASENAME/$BASENAME_bak$N`).
 
::HOUDINI_AUTOSAVE_FILENAME
    A template for the filename used for auto save file backups when the
    "Numbered Backup" auto save option is set.  Two variables are required:
    `$BASENAME`, which will be replaced by the name of the file being saved
    without its extension; and `$N`, which is replaced by the backup number.
    `$N` can be followed by a single digit which is interpreted as the number
    of digits to be used in the backup number; numbers with fewer digits than
    this will be padded with zeroes.  Default value is `$BASENAME_auto$N`.

    A subdirectory path may be included, but only `$BASENAME` will be replaced
    in this part of the template.  This may be used to group all the backups
    for a given file into a subdirectory (e.g. `$BASENAME/$BASENAME_auto$N`).

::HOUDINI_MAX_BACKUP_FILES
    Setting this environment variable will limit the number of backup files
    Houdini creates when the "Numbered Backup" save option is set.  Setting
    this environment variable to 0 will disable the limit and Houdini will
    write as many backup files as resources permit (default). Once the limit
    is reached, the file with the oldest numbered suffix in the filename will
    be deleted.

::HOUDINI_NO_SPLASH
    Setting this environment variable will disable the Houdini splash screen
    from being displayed.

::HOUDINI_SPLASH_MESSAGE
    Defines a custom message that will appear on the splash screen.  Placing
    the three character string //n in this message will place a new line in the
    splash screen.

::HOUDINI_SPLASH_FILE
    Defines a custom file to load for the splash screen.  You may want to
    augment this with the `HOUDINI_SPLASH_MESSAGE` to write build-specific
    information.

::HOUDINI_BUFFEREDSAVE
    When enabled `.hip` files are first saved to a memory buffer and
    then written to disk.  This is useful when saving over the network
    from Windows 2000 machines, or other places where seeking to the
    network is expensive.

::HOUDINI_VIEWERSTATE_PATH
    The search path for viewer state files. These are python files used for 
    implementing viewer states. Houdini searches them at startup to register 
    standard and user-defined viewer states. The registration of python viewer 
    states is lazy, they are registered only when required. 

::HOUDINI4_COMPATIBILITY
    When this is enabled, some of the quirks of Houdini 4 are turned
    on.  This is designed to be used to allow old hip files to be
    loaded.  Support for these inconsistencies is not guaranteed in
    future versions of Houdini.  Currently, this will:

    - Change the order of points in Spheres, Tubes, Torii, and
      Circles under certain orientations.
    - Reverse the direction of the Clip SOP's "distance"
      parameter.
    - Revert to the old capture region weighting method 

::HOUDINI55_COMPATIBILITY
    When this is enabled, some of the quirks of Houdini 5.5 (and earlier) are
    turned on.  This is designed to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:

    - Not always use the shortest path rotation blending the PolyWire
      SOP and Composite CHOP
    - Revert to the old `boneangle()` behavior of calculating the angle
      between the two negative z axes of the given bones
      (Note that usually this expression would have been used as
      (180-boneangle(...)) which can easily be converted into the new
      behavior by no longer subtracting from 180)
    - The Switch Operators in POPs, SOPs, COP2s and SHOPs will not
      consolidate null inputs.
    - When globbing channel patterns, the order will be reverted back to 
      reverse creation order. This affects the Fetch CHOP, and the
      following hscript commands: `chls`, `chread`, `chwrite`
    - The `"tmgls -l"` hscript command will revert to showing paths that
      start with /Director.
    - Revert to the old behavior where when Houdini is told to look at
      something with an up vector that is parallel to the target
      direction, we do nothing.  This affects all of Houdini. This includes
      (but not limited to) the Look At parameter in all operators,
      the `mlookat()` expression function, and the `lookat()` VEX function.

::HOUDINI6_COMPATIBILITY
    When this is enabled, some of the quirks of Houdini 6.0 (and earlier) are
    turned on.  This is designed to be used to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:

    - With soft transforms (SoftPeak, SoftTransform, and Soft
      Options in the Edit SOP that are not applied) and Ignore
      Connectivity Off, connectivity does not respect the soft
      radius.  In Houdini 6.1 and later, two points are connected
      only if there is a sequence of edges within the soft radius
      that connects them.  In 6.0 and earlier, or with this flag
      on, they are connected if there is any sequence of edges
      that connects them.
    - The [Fetch CHOP|Node:chop/fetch] will create the order of its fetched tracks in the
      following order:
      - animated channels (in the parameter order of fetched operator)
      - chop data tracks
      - non-animated parameters (again in parameter order)
    - The [Edit SOP|Node:sop/edit] will use an old method for determining how a surface
      changes relative to the rest input.

::HOUDINI7_COMPATIBILITY
    When this is enabled, some of the quirks of Houdini 7.0 (and earlier) are
    turned on.  This is designed to be used to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:

    - The [Object CHOP|Node:chop/object] has a parameter __Compute__ whose value 
      __Single Bearing Angle__ measures an angle between +z axis
      and the direction vector from source to target object. This
      angle was incorrectly decremented by 90 degrees in earlier versions.
      Right now, when a target object is right ahead of the source 
      (measuring along z-axis), the angle is correctly computed as 0
      instead of -90 which would be the case in Houdini 7.0. 

::HOUDINI8_COMPATIBILITY
    When this is enabled, some of the quirks of Houdini 8.0 (and earlier) are
    turned on.  This is designed to be used to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:

    - The global VOP variable list will include the illuminance global 
      variables on only on nodes that are direct children of Illuminance 
      VOPs. That is, the variables of deeply nested children will not be
      taken into consideration. Though omitting such variables is 
      technically wrong, adding the illuminance variables to all child
      nodes of any depth would mess up the variable order and
      break existing VOP Networks.

    - The csh-style variable modifiers will be disabled. Normally, 
      Houdini uses `csh`-style modifiers to expand variables for `hscript` and
      houdini. For example, for variable value of `ryan.cmd`, `$var:r` 
      returns "ryan".

::HOUDINI95_COMPATIBILITY
    When this is enabled, some of the quirks of Houdini 9.5 (and earlier) are
    turned on.  This is designed to be used to allow old hip files to be
    loaded identically.  Support for these inconsistencies are not guaranteed
    in future versions of Houdini.  Currently, this will:

    - The [Transform CHOP|Node:chop/xform] will use the old (incorrect) interpretation of the
      Transform Order parameters.

::HOUDINI10_COMPATIBILITY
    When this is enabled, some of the backwards compatibility issues of Houdini
    10.0 (and earlier) are turned on. This is designed to allow old hip files
    to be loaded identically in later versions. Support for these
    inconsistencies are not guaranteed in future versions of Houdini.
    Currently, this will:

    - Provide old behavior of the `cycle()`, `cyclet()` `hscript` expressions
      and HOM functions.

::HOUDINI11_COMPATIBILITY
    When this is enabled, some of the backwards compatibility issues of Houdini
    11.0 (and earlier) are turned on. This is designed to allow old hip files
    to be loaded identically in later versions. Support for these
    inconsistencies are not guaranteed in future versions of Houdini.
    Currently, this will:

    - Patterns matching deprecated capture attributes names can match the
      modern capture attributes in the [Attribute Transfer SOP|Node:sop/attribtransfer] and [Attribute
      Composite SOP|Node:sop/attribcomposite].
    - The unix command will default to running `csh` instead of
      the value in the `$SHELL` variable.
    - The operator type name specified for node creation will be used
      exactly as is, without `optype` namespace or version lookup. 
      This is equivalent of always specifying `-e` for `opadd` or passing true 
      as exact_type to `hou.Node.createNode()`.
      It allows scripts generated by `opscript` in H11 to always recreate
      exact node network, even if there are newer versions of some
      operators.

::HOUDINI11_PERFMON_COMPATIBILITY
    When this is enabled, clicking on the Windows > Performance Monitor 
    menu entry will open the performance monitor that was available
    in Houdini 11.1 and earlier versions.  The 11.1 performance monitor
    also supplies performance data to the node information tooltip
    window (i.e. ((MMB)) a node).

::HOUDINI10_VOLUME_COMPATIBILITY
    When this is enabled the `.bgeo` saving of volumes will use the untiled
    format compatible with early versions of 10.0 and earlier versions of
    Houdini.

::HOUDINI13_VOLUME_COMPATIBILITY
    This setting will turn off saving of shared data for volume
    primitives.  When this is enabled geometry files may be
    significantly larger and sharing information will be lost when
    re-loading geometry.  This usually only impacts geometry that has
    multiple copies of the same volume primitive.

::HOUDINI13_GEO_COMPATIBILITY
    This setting will enable the saving of `.geo/.bgeo` files compatible with
    13.0 versions of Houdini.  See also HOUDINI13_VOLUME_COMPATIBILITY.

::HOUDINI14_GEO_COMPATIBILITY
    This setting will enable the saving of `.geo/.bgeo` files compatible with
    14.0 versions of Houdini.  If this is not set, packed geometry
    primitives will not be loaded properly.

::HOUDINI15_PARMDATA_COMPATIBILITY
    This setting will enable the saving of geometry parameter data
    in a fashion compatible with early 15.0 and 15.5 versions of Houdini.

::HOUDINI15_5_GEO_COMPATIBILITY
    This setting will enable the saving of `.geo/.bgeo` files compatible with
    15.5 versions of Houdini.  If this is not set, files with polygons or
    tetrahedra saved in Houdini 16.0 or later will not be loaded properly in
    Houdini 15.5 or earlier.

::HOUDINI16_5_DEFORM_COMPATIBILITY
    This setting will enable the old bone deform algorithm that allowed for
    separately deforming the two ends of capture regions by animating their end
    caps.

::HOUDINI6_FILTER_COMPATIBILITY
    There was a large bug found in the low level filtering code in
    Houdini6.1.  Fixing this bug caused the results of filtering to
    change quite dramatically from previous versions.  To maintain
    previous behavior, this control can be set.  However, use of this
    control is discouraged since the filtering was incorrect before
    the fix.  This control may be removed in future versions of
    Houdini.

::HOUDINI13_FILTER_COMPATIBILITY
    There was a large bug found in the mip-map computations for
    texturing in Houdini13.  Fixing this bug caused the results of
    filtering mip maps to change quite dramatically from previous
    versions.  To maintain previous behavior, this control can be
    set.  However, use of this control is discouraged since the
    filtering was incorrect before the fix.  This control may be
    removed in future versions of Houdini.

::HOUDINI_SIMPLIFIED_NODE_NAMES
    When this is enabled, node names are not permitted to have `.` or `-`
    characters in them. By default these characters are allowed.

::HOUDINI_HIPEXT
    When this variable is set, Houdini will no longer add the `.hip` extension
    from the Save dialog.  This also controls the addition of `.otl` and `.bgeo`
    extensions in the relevant save dialogs.

::HOUDINI_ACCESS_METHOD
    This value can be 0 (the default), 1, or 2. It selects the method used
    by Houdini to check file and directory permissions under Windows. 0 checks
    the permissions of the current user against the Windows user and group
    permissions set for the file in question. This method may be slow on
    machines that use a network login server. 1 uses a different method for
    checking the Windows user and group permissions, but relies on
    functionality that is broken in Windows 2000 Service Pack 2. Method 2
    simply checks the file attributes. This method is fast, but ignores the
    user and group permissions, and so may report that some files or
    directories can be written to when actually they cannot.

::HOUDINI_COOK_MODE_THRESHOLD
    Setting this variable will set a safety limit (in Megabytes) for the memory 
    consumption of Houdini. If Houdini goes over this memory limit, it will 
    immediately switch into the "Never" cook mode and alert the user. Setting 
    this environment variable to 0 will disable this feature. This setting 
    is only necessary when running on 32-bit operating systems.

::HSCRIPT_SAFEQUIT
    If this variable is set, the quit command in `hscript` will prompt
    the user to verify that they want to quit.

::HSCRIPT_ALLOW_BACKGROUND_RENDER
    By default, `hbatch` will force renders to block `hbatch` until the
    render is complete.  Setting this variable will allow `hbatch` to
    render in the background.

::HOUDINI_OLD_RATS
    This variable controls the format for RAT file textures that will
    be generated by Houdini.  When it is set to 0, the new TBF file format
    will be used.  When set to 1, the old RAT format will be used.  The
    default value for this option is 0.  In general, TBF textures will
    have better performance, so this variable should only be enabled
    when a texture must be compatible with versions of Houdini prior
    to version 8.0.

::HOUDINI_QTML_USE_GDI
    This variable is used to tell QuickTime to use GDI instead of DirectDraw
    or DCI on windows platforms.  GDI is forced when set to 1, and QuickTime
    makes the decision when set to 0.  The default value for this option is
    1 to avoid crashes in QuickTime dialog components that seem to be related
    to some nvidia drivers.

::HOUDINI_MAX_CACHED_FBX_SCENES
    Sets the maximum number of cached FBX scenes to keep in memory. Useful in 
    scenes that link to multiple FBX files on disk to avoid reloading complete
    files every time a node cooks. The default value is 1, the minimum is 0,
    and the maximum is 20.

::HOUDINI_NETEXCHANGE_HEARTBEAT
    When a distributed simulation is exchanging data with other nodes it
    will often block while waiting for the other nodes to catch up.  During
    this time the process can appear dead because it is no longer using any
    CPU.  When this heartbeat is a non-zero positive value, it represents the
    number of seconds between printing out heartbeats to standard out, thereby
    reminding the world that this process is still alive.

::HOUDINI_DOPVOLUME_NANTEST
    When enabled the various DOP gas micro solvers will scan their fields for
    NANs before and after processing.  This can be useful for finding where
    these numbers are showing up in a simulation.  It is helpful to set 
    `perfmon -o stdout` first so one can tell which micro-solver is operating
    when the NaN test outputs an error.

::HOUDINI_MULTITHREADED_COOKING
    EXPERIMENTAL: When enabled, Houdini will attempt to perform multithreaded
    node cooking where possible.  As of Houdini 11, cooking problems can occur
    such as deadlocks if enabled. Note that this environment setting currently
    does NOT affect anything other than viewport object cooking.

::HOUDINI_OGL_FIXEDVOXELSIZE
    Instead of scaling the density of voxels in volumes by their size, all
    voxels are treated as if they were 1x1x1 cubes when computing opacity for
    display.  This results in things appearing more opaque if they are higher
    resolution.

::HOUDINI_OCL_VENDOR
    Specifies the platform vendor to choose when creating the OpenCL
    context Houdini uses for OpenCL processing.

::HOUDINI_OCL_DEVICETYPE
    Specifies the type of OpenCL device to use for OpenCL processing.  The
    choices are GPU and CPU.  If HOUDINI_OCL_VENDOR is set, then once a
    platform vendor is identified, only devices of the specified type will
    be used.  If HOUDINI_OCL_VENDOR is not set, then all available OpenCL
    platforms will be searched and the first device of the specified type
    returned.  Setting this variable is therefore and easy way to switch
    devices.

::HOUDINI_OCL_DEVICENUMBER
    In the case of multiple OpenCL devices existing of the type specified by
    HOUDINI_OCL_DEVICETYPE, this variable selects which of these devices to
    use for OpenCL processing.  For example, with a computer with more than
    one GPU this allows selection of a GPU other than the default for OpenCL.

::HOUDINI_OCL_PATH
    The search path for OpenCL kernels.  Setting this path will override the
    default path of `$HOUDINI_PATH/ocl/`.

::HOUDINI_OCL_MEMORY_POOL_SIZE
    Houdini uses a memory pool for allocating device memory through OpenCL for
    improved performance and to decrease fragmentation.  This variable is the
    percentage of total device memory to allocate for the pool. For example, the
    default setting of 0.125 will allocate 1/8 of device memory for the memory
    pool.  Note that if the specified OpenCL device is 32-bit, the total device
    memory is clamped to 4GB before being multiplied by this percentage.

::HOUDINI_OCL_REPORT_MEMORY_USE
    When enabled, Houdini will output OpenCL memory usage statistics after
    every set of OpenCL kernel calls.

::HOUDINI_IOBUFFER_SIZE
    The number of megabytes to spool into the background output thread
    before blocking the addition of new write tasks.

::HOUDINI_DOP_MAXCACHE
    Sets a maximum DOP cache size in megabytes.  Even if the DOP node
    has a cache size larger than this specified, it will be clamped
    by this amount.  If negative (the default) no clamping is done.

::HOUDINI_SOP_DISABLE_CACHENODE
    The Cache SOP is disabled if this option is set.

    NOTE: This may break networks that rely on caching, and/or greatly
    slow down networks by causing recooking where caching was used.

    It can be useful if Cache SOPs are only used for playblast and
    one wants to ensure a farm machine doesn't accumulate memory.

::HOUDINI_SOP_DISABLE_COMPILENODE
    The [Block End Compile SOP|Node:sop/block_end] will always be non-compiled if this is set.

    This is useful if you want to do performance testing to see differences
    between compiled and non-compiled settings, or rule out compiling
    as a source of a bug.

::HOUDINI_RUN_IN_FOREGROUND
    If set to 1, Houdini GUI applications will by default run as a foreground
    application, if run form a shell or a terminal. Otherwise, GUI applications 
    will put themselves in the background, no longer associated with the 
    shell or terminal. This option has no effect on OSX.

::HOUDINI_OGL_FAST_BONES
    When enabled, nulls and bones rendering is done by accumulating
    all the objects and issuing one instanced drawing call.

::HOUDINI_FAST_SKIN_BLENDSHAPES
    Enable experimental feature to use the GPU to do deformation
    in SOP_Deform and SOP_BlendShapes.

::HOUDINI_DISTRIBUTEDPROJECTION_DIAGNOSTICS
    Perform extra checks to verify distributed slices are building
    coherent projection matrices during distributed pressure solves.
    Turn this on if distributed solves are failing to converge to
    get extra diagnostic information to submit.

::HOUDINI_SAS_DISABLE_ASSET_DOWNLOAD
    If set to 1, prevents graphical Houdini from downloading assets 
    (i.e. Simple Toon Character) from Orbolt that are regularly installed in
    every Houdini distribution.  Default is 0.

::HOUDINI_USE_HFS_OCL
    Set to its default value of 1, this variable tells Houdini to load the
    built-in CPU OpenCL driver that is shipped in $HFS (64-bit Windows and Linux only).
    This built-in CPU device can be selected using the regular OpenCL
    device specifications, e.g. `HOUDINI_OCL_DEVICETYPE=CPU`.

    Houdini will also fall back to using this  driver if the usual OpenCL
    device selection process fails, making it safer to submit OpenCL jobs to a
    renderfarm that has no GPUs.  Set this variable to 2 to disable this
    fallback mechanism, or 0 to disable the built-in device completely.
    
    On OSX this variable has no effect.

::HOUDINI_DISABLE_AUDIO_SERVER
    If set to 1, prevents the Audio Server from initializing.
    Default is 0.

::QT_MOUSE_COMPRESS_LIMIT
    On Linux, Qt compresses mouse move events for improved performance.
    Compression works by issuing out a single mouse event to the application
    for a group of mouse events that occurred within a small time period.
    The downside to mouse event compression is that it diminishes the quality
    for operations that track mouse movement (i.e. drawing curves in the
    viewport).  This is why Houdini disables mouse event compression by default.

    You can turn compression back on by setting QT_MOUSE_COMPRESS_LIMIT to a
    non-zero, integer value.  The value represents the maximum number of mouse
    move events to be compressed for each compression run.  The higher the
    limit the more compression that is allowed.

    Set this variable only if you are experiencing slow response times when
    interacting with Houdini's viewport or any interface in Houdini that tracks
    mouse movement (i.e. an OpenGL viewport written in PySide or PyQt).

    This variable affects only Linux.

::HOUDINI_CHOP_MOTION_SAMPLES
    This variable overrides the Global Animation Settings CHOP Motion Samples
    value if the hchannel.pref file isn't present.
    It can be use to increase the CHOP sampling rate for Constraints at render time.

::HOUDINI_NVIDIA_OPTIX_DSO_PATH
    Defines the OptiX DSO search path. The existance of this variable
    also determines whether the IPR toolbox enables the denoise button or not.

::HOUDINI_NVIDIA_OPTIX_DEVICENUMBER
    Device ID to use for OptiX denoiser. Use "hgpuinfo -o" to determine OptiX
    device IDs. Leave it undefined or -1 to use the first device.

::PDG_DIR
    This variable can be used in place of __PDG_SHARED_ROOT__ to indicate the 
    working directory of a PDG scheduler.
