= Starting Houdini from the command line =

== Command line options ==

If you start Houdini from the command line, you can specify options, and also optionally a list of files to open (`.hip` scene files, `.cmd` or `.py` scripts, `.hda` libraries to load).

`houdini [<<options>>] [<<file>> ...]`

Houdini recognizes the following options.

`-foreground`:
    In Mac OS X and Linux, when you run Houdini from the command line, by default it "backgrounds" itself, returning control of the terminal to the shell. This option instead keeps Houdini in the "foreground", meaning you won't be able to type more commands to the shell until Houdini exists or you press ((Ctrl + Z)) to pause the foreground process.

`-background`:
    Houdini will "background" itself after starting, returning control of the terminal to the shell. This is the default.
    
`-geometry`:
    Define the window geometry on the screen (see also `-span`). For example
    
    `houdini -geometry=<<W>>x<<H>>+<<X>>+<<Y>>`
    
    (where <<W>> is width, <<H>> is height, <<X>> is horizontal position, and <<Y>> is vertical position). The geometry specification cannot have spaces. <<X>> and <<Y>> may be negative (in which case you would use `-` instead of `+` as a separator). Some window managers do not allow larger windows than the screen, overlapping of manager toolbars, and/or positioning offscreen.

`-span`:
    When you specify this option on a computer with multiple monitors, Houdini will start up spanning all monitors, so the main Houdini window fills them all (where possible, discounting resolution differences and non-rectangular layouts). This only works on some window managers, and has no effect in single-monitor setups. Cannot be used with `-geometry`.

`-screen <<N>>`:
    Which screen to open the main Houdini window on (for computers with multiple monitors). Note the space between the option and the screen number.

`-s <<name>>` / `-desktop <<name>>`:
    The pane layout to start up with. These are listed in the __Desktop__ menu in Houdini, such as `Build` or `Technical`. You can list all available layouts in a Python shell using [Hom:hou.ui#desktops].

    See [pane layouts|/basics/panes] for more information about switching and saving desktop layouts.

    TIP:
        This starts up Houdini using the named desktop, but does not change the default desktop preference.

`-j<<N>>`:
    The maximum number of threads Houdini may use. Note *no* space between option and the number of threads.

`-n`:
    Start Houdini in ["manual" cook mode|/basics/cooking]. 

`-apprentice`:
    Start Houdini in Apprentice mode. This will use an Apprentice or FX License.

`-core`:
    Start Houdini in Core mode. This will require a Core license, unless `-force-fx-license` is also used.

`-indie`:
    Start Houdini in Indie mode. This will require an Indie license, unless `-force-fx-license` is also used.

`-force-fx-license`:
    Force Houdini to use an FX license, even if it would not normally use one. Combine with `-core` to run Houdini Core using an FX license.

`waitforui`:
    If mixed in with the <<files>> to load, specifies a point at which Houdini should wait until the GUI is available before loading the rest of the files.
    
    For example:
    
    {{{
    #!sh
    houdini -foreground myscript.cmd waitforui setupshelf.py my.hip
    }}}
    
    In this example, Houdini would load `myscript.cmd` immediately, but wait until the GUI was available before loading `setupshelf.py` and `my.hip`. This is useful for scripts that require certain UI elements to function (such as desktops, shelves, or panes).

== Exit codes ==

If started from the command line, Houdini may exit with one of the following codes:

`0`:
    No error.
`1`:
    Generic error (catch-all code).
`2`:
    Misuse of shell built-ins (according to Bash documentation)
`3`:
    Failure to check out or verify an appropriate product license.
`4`:
    Socket communication failure.
`5`:
    Error while parsing UI definition file (.ui).
