= Houdini Preferences =

#helpid: h.pane.preferences


== General User Interface == (ui)

Draw Lines Smoothly:
    Enables the OpenGL option of anti-aliasing all vectors in Houdini including the UI and the 3d viewports. You can see this immediately on the wires that connect tiles, the tile profiles, etc. 
    
    See also, the [Smooth Lines option|/ref/windows/displayopts_3d] on the __Wireframe__ subtab of the __Optimization__ tab in the Display Options window.

Color Pane Headers with Network Contexts:
    The Pane header contains the pane tab and the path gadget, which has a gray background by default. If this is option is turned on, the background color of the pane headers will be changed to their representative network type color.

Show Images for Image Files in File Browsers:
    The default value for __Show Images__ in image-based file browsers (in the ((RMB)) menu over the files).

Left-hand Menus:
        Build menus to the left, rather than the right of the mouse cursor. This is useful for right handed people using on-screen styli.

Play Audio with Popup Notifications for:
    Enables or disables the sounds that play with message, warning, or error dialog windows.

File Choosers:
    Allows you to select a file chooser style. 
    
    NOTE:
        This option is only available for Macs. 

    Houdini Chooser Only:
        Houdini will use own chooser for all file browsing
    Mix of Houdini and Native Choosers:
        Houdini will use native OS's file chooser for __File > Open__, and own chooser for all other file browsing.
    Native Chooser Only:
        Houdini will use file chooser native to the OS for all file browsing.

Startup in Desktop:
    Which desktop appears when Houdini starts up. By default it is __Build__.

Global UI Size:
    Allows you to change the Size of the UI. Changes to this parameter will take effect in your next Houdini session.
    
    Small: 
        A very compact size designed to maximize viewer area. 
    Compact: 
        Slightly more compact size than the __Normal__ size, reducing margins and
        icon sizes.
    Normal:
        The default Houdini UI size.
    Large:
        Slightly larger UI size for small, high-res screens. Icon buttons and
        fonts are about 10% larger.
    High DPI:
        Very large UI size for use with high DPI screens (>200dpi), such as the
        Macbook Pro's Retina display.


== Network Editor, Nodes, and Trees == (net)

Animate network changes:
    Animates certain changes and transitions in the network editor for clarity (for example, moving nodes out the way when a new node is placed). Turn this off to disable animations.

Use simplified shape when node shapes off:
    In the network editor's __View__ menu, you can turn off display of custom node shapes. If that option and this option are both on, Houdini uses an even simpler default node shape (a simple rectangle instead of a rounded rectangle). This may speed up the display of _extremely_ complex networks.

Display full comments and descriptive parameters:
    By default the network editor cuts off long node comments and descriptive parameter values (displayed below the node name) after a certain number of lines. Turn this on to always display the full text of comments and descriptive parameters no matter how long.

Display VOP input and output descriptive labels:
    On VOP nodes, label inputs and outputs with the human-readable label instead of the internal name.

Stacked look for nodes with interesting contents:
    By default, nodes that users might want to dive into (such as unlocked assets, Geometry objects, subnets, and so on) are drawn with a stacked look to make it clear to new users they can dive into them. Turn this option off to never draw the stacked look for any nodes.

Node info windows close when losing focus:
    When this option is on, if you open an [info window|/network/nodes#info] with the info button on the node ring, the window stays open until it loses focus, so you don't have to manually close it. If you turn this option off, the window always stays open until you close it.
    
    :platform:Linux:
        On Mac and Windows, this option is on by default. On Linux, this option is off by default, since some users have the window manager set up so "focus follows mouse", which always makes info window close immediately.

Flag hotkeys work on existing node selections:
    When this option is off (the default), [flag hotkeys|/network/flags] work by holding the key and clicking a node to set the flag. When this option is on, pressing a flag hotkey sets the flag on the selected node(s).

Allow diving into locked assets:
    If you turn this off, you cannot dive into locked assets, unless they have a dive target node specified. A studio may want to specify that this option be turned off to prevent artists from accidentally diving into assets and getting lost.

Snap radius:
    The radius for snapping moved/placed nodes to align with other nodes. Increase this distance to make nodes more likely to move to align with other nodes when dropped.

Connection snap radius:
    The radius for snapping wires to connectors. Increase this radius to have wires jump onto connectors from farther away. Decrease it to have wires not jump to connectors until you get closer.

Shake distance:
    Shaking nodes disconnects them from their wires. This slider controls how far you have to move the mouse back and forth for Houdini to recognize a shake. If you are getting accidental disconnects because Houdini thinks you are shaking, you might want to decrease this. Turn the slider all the way down to disable shaking to disconnect.

Show previews on new COP nodes:
    You can show or hide the preview thumbnail on each individual compositing node. This checkbox controls whether newly created compositing nodes show or hide the preview.

Initial VOP detail level:
    You can set the [compactness level|/network/flags#vop] on each individual VOP node. This menu controls what the initial level for newly created VOP nodes.

Display icons in operator tree views by default:
    Various interfaces in Houdini show hierarchical lists of nodes (for example, the node picker or the tree view pane). Turn this off to not display icons next to node names in these tree views.

Display Embedded Visualizer Editor:
    When one or more visualizers are attached to a node, display the visualizer settings in a separate tab in the parameter editor.


== 3D Viewports == (3dview)

Orientation:
    Y Up:
        The standard Houdini orientation with the positive Y axis pointing up.
    Z Up:
        An alternate right-handed orientation with the positive Z axis pointing
        up.

Tumbling Method:
    Standard Houdini Tumbling:
        The normal Houdini method of tumbling the display (using
        ((LMB))). It is such that the tumbled is attached to the
        mouse, and moving the mouse back to the same location on the
        screen results in the tumble returning the same result for
        that location. This is intuitive for most users.
    Classic Houdini Tumbling:
        With the classic method of tumbling, you move the mouse in
        small circular motions counter to the direction you want to
        turn. You will get a tumble-orientation that moves
        continuously counter to the direction in which you are
        moving the mouse. This actually provides more control over
        the tumble once you have got the knack of it.
    80's Style Euler Tumbling:
        Provides the option for 80's Style Euler tumbling - for
        those who prefer it.
    90's Style Euler Tumbling:
        When tumbling vertically, do not lock at the y-axis, but tumble
	right over, now viewing your model upside down.  This allows
	more fluid control while still maintaining a fixed up direction.
        
Use Alt Key for View Controls:
        Allows you to tumble, dolly, track, tilt, zoom, and box zoom using the ((Alt)) key. See [View the scene|/basics/view] for more information.
        
Panning Method:
    Move Pivot when Panning:
        The pivot about which the Viewport swivels will always be
        the center of the Viewport - even if you've panned the
        geometry off to the side.
    Maintain Viewport Pivot when Panning:
        The pivot about which the view swivels will be maintained
        around the geometry in question - even when it has been
        panned away from the center of the Viewport.

Default Tumble Pivot:
    Determines the default tumbling behavior for new viewers.

    Keep Pivot on Tumble:
        Tumbling will use the current view pivot.
    Set Pivot on Tumble:
        Tumbling will set the view pivot to be on the geometry lying under the
        mouse at the start of the tumble operation, if any, and otherwise
        leave the view pivot unchanged.

Default Dolly Direction:
    Determines the default dolly behavior for new viewers.

    Dolly along View Direction:
        Move the camera in the view direction.
    Dolly along Projected Direction:
        Move the camera along a direction projected from the mouse position at
        the start of the dolly operation.

Default Zoom Center:
    Determines the default zoom behavior for new viewers.

    Zoom about View Center:
        Zoom the view about its center.
    Zoom about Mouse Position:
        Zoom the view about the mouse position at the start of the zoom
        operation.
        
Default Homing Method:
    Controls what happens when you hit the home hotkey. The default is Oblique, which has a value of 45 degrees.
    
Wire Toggle Mode:
        Allows you to change the shading mode. You can also do this by pressing the ((W)) hotkey in the viewport.

Delay Inactive Viewport Redraws:
    If this option is turned on, Houdini will delay inactive viewport redraws in the quad view. In the quad view, one section is active and the other three are inactive. When an action is done in the active viewport, it will be updated aggressively and the inactive viewports will lag behind. The inactive viewports will be redrawn once the active viewport is completely updated. Turning this option on improves performance.
    
Highlight component under mouse when selecting:
        Allows you to turn off the display of highlighting the component under the mouse in the viewport.


== Shelf Tools and Tab Menu == (shelves)

Tool History Length:
    The number of least recently used menu items that are kept as history
    in the Tab menu.

Tab Menu Operator Namespace Filtering:
    Determines which variants of the same operator are displayed in the 
    Tab menu.  The operator variants share the same base operator name but 
    differ in scope, namespace, and/or version.

    Show All Operators:
	Displays all available operator variants.

    Show Only Operators with Preferred Versions:
	Displays several operator variants, one from each namespace defined
	for a given operator. For each namespace, an operator variant with 
	the preferred (usually highest) version is displayed.

    Show Single Operator from the Preferred Namespace:
	Displays only one variant of the operator. The displayed variant
	is from the namespace with the highest precedence order, as configured
	by the user with `HOUDINI_OPNAMESPACE_HIERARCHY` environment variable.
	If there are a few variant candidates in the same namespace, the
	preferred version is used.


== Takes == (takes)

Allow Auto Take Mode for Locked Assets:
    Allows you to edit contents of locked assets in the auto take mode, overriding the interior parameters inside the current take.
    
    NOTE:
        This parameter affects the auto take mode, not takes in general.


== Animation == (anim)

=== Keying ===

Auto-Key: Add Keyframes on Parameter Change:
    When enabled, parameters changes are immediately processed (i.e.
    "cooked"), and the changes reflected in the geometry displayed
    in the Viewport.
    
    Auto-Key Tuples Parameters:
        When this checkbox is turned on, and when the Auto-Key is active, keyframes are inserted on all tuple parameters. This is very important when animating using the manipulators.

Auto-Commit: Save Parameter Change at Keyframes:
    When you change keyed parameters on [keyframes|/anim/basics], the new values are automatically saved as the new keyed values. You do not need to explicitly key the values.
    
Set Auto-Add to Channel List Flag when Creating Channels:
    Automatically turns on the auto-add to channel list flag when creating a channel. This is for advanced use cases where __Add Parameters with Animation__ isn't enough.
 
Set Additional First Key at Frame:
    Will set an extra keyframe at the specified frame (typically
    frame 1) when a keyframe is added. If left blank, no extra
    keyframes will be added.

    If set to '1' - it will approximate the behavior of older (pre
    H6) versions of Houdini, which would automatically add a key at
    the first frame.

Global Set Key:
    Set Keys on Pending Channels:
        Set keys on channels where changes have been made.
    Set Keys on All Channels:
        Sets keys on all channels in the channel list.
    Set Keys on Selected Channels:
        Sets keys on selected channels in the channel list.

=== Initial Segment ===

Default / Rotation Function:
    You can set the default segment interpolation function to be of
    the type you specify here. e.g. [cubic|Exp:cubic]. You can also
    set the default function used for rotations.

=== Added Segments ===

Auto Function:
    Attempt to automatically determine the best function to
    interpolate between added [keyframes|/anim/basics]. When disabled, adding
    keyframes inserts segments of the type specified here.

Auto Slope:
    Attempt to automatically match incoming / outgoing slopes on
    channels. When disabled, adding [keyframes|/anim/basics] will set the new
    segment slopes to the specified value.

Hold Last Key:
    When adding [keyframes|/anim/basics] in the last segment of a channel, the
    final segment is modified to hold it at the same value between
    the last keyframe and the end of the animation. Enabling this
    parameter allows you to insert keyframes repeatedly without
    changing the interpolation of the last segment.
    
=== Animation Editor and Motion FX Viewer === (anim_select_change)

Update Channel List When Nodes are Selected:
    Parameters of the selected node(s) will be added to the [Channel List|/ref/panes/chanlist].

Add Parameters With Auto-Add to Channel List flag:
    Parameters of the selected node(s) which are marked as `autoadd` will be added to the [Channel List|/ref/panes/chanlist].

Add Parameters With Animation:
    When this checkbox is turned on, the [Channel List|/ref/panes/chanlist] will be populated by parameters that have animation. It's an easy way to see the animated parameters on selected nodes without having to set the auto-add flag or add channels manually.

Add Parameters from Descendants:
    When this checkbox is turned on, the [Channel List|/ref/panes/chanlist] will expand the selected nodes to include all the child nodes.

Add Parameters from Constraints:
    When this checkbox is turned on, the [Channel List|/ref/panes/chanlist] will expand the selected nodes to include all the constraints nodes.
View Overridden Parameters in Motion FX View:
    Parameters of the selected node(s) that are currently overridden by CHOPs will be displayed in the [Motion FX View pane|/ref/views/chopview].

When Parameters are Added to Channel List:

    Keep Channel List Selection:
	Keep the [Channel List|/ref/panes/chanlist] Selection When Nodes are Re-Selected. When off, the channel selection state will will reset to the state from the auto-select flag.

    Open Animation Editor if Closed:
	If enabled, a new [Animation Editor|/ref/panes/animeditor] window will pop-up if there is none currently visible in the desktop.

    Follow Channel References:
	If enabled, the [Channel List|/ref/panes/chanlist] follows channel references and CHOP exports. When this checkbox is turned off, you will see the result of the expression in the graph editor, but won't be able to edit any keyframes.

    Underline in the Parameter Editor:
	Parameters in the [Channel List|/ref/panes/chanlist] will be rendered with an underline in the Parameter Editor.

    Use Channel Color:
	Parameters in the [Channel List|/ref/panes/chanlist] will be rendered with an underline color matching the channel color.

== Rendering == (render)

Available Render Nodes:
    Lists the render nodes available in Houdini that you can enable or disable.It is possible to override the preferences with the
    `HOUDINI_DEFAULT_RENDERERS` environment variable. Any render nodes thus overridden will
    be grayed out in the preferences.
    If a render node, which is not enabled in this list, exists in the scene, its
    temporary enabled state will be noted in the __Enabled By__ column. Any render node enabled
    through that mechanism will not affect the session-to-session preferences.

Make All Render Nodes Available in Tool Palette and Tab Menu:
    If enabled, all render nodes will be shown in the output driver tool palette and tab menu.
    Otherwise, only the subset of render nodes selected in __Available Render Nodes__ will be
    shown.


== Handles == (handles)

Hide Locked Handle Parts:
    Keeps locked handle parts from being displayed. You will need to
    reload the file to take effect for existing handles.

Color Transform Handles By Axis:
    If this option is turned on, the transform handles in the 3D viewer will display different colors depending on the axis they affect.
    
Keep handle alignment when reselecting:
    If this option is turned on, the transform handles in the 3D viewer will maintain the same orientation when different objects are selected.

Default Handle Alignment:
    Determines the initial orientation for transform handles in the 3D viewer.
    
    Object:
        Align to the local space.
    World:
        Align to world space.
    View:
        Align to view.
    Parent Object:
        Align to the object's first input.
    C-Plane:
        Align to the construction plane.

Handle Scale:
    Scales fixed-size handles in the viewports.

Pick Distance (Pixels):
    Specifies how far away the mouse cursor can be from a handle in order
    to pick and manipulate that handle.

Show Negative Axes for Translate Handles:
    Extends the translation handle axes in the negative direction.
    
Show Planar Dragging Targets for Translate Handles:
    Shows small draggable translate planes away from the center of the handle.
    
Allow Planar Dragging of Translate Handles Between Axes:
    Allows you to select a drag plane between the translation handle axes in the 3D viewer.
    
    Prefer Planar Dragging Between Axes Over Back Facing Axes:
        Disables the back facing parts of translation arrows, so that when you are dragging on a plane you don't accidentally select them.

Allow Dragging of Rotate Handles Between Rings:
    Allows you to click and drag between the rings of rotation handles in the 3D viewer when no translation handles are available. This will allow you to perform rotations in all 3 axes simultaneously.

Allow Indirect Handle Dragging with MMB:
    Allows you to drag handles with the ((MMB)) without starting the drag on the handle itself.  
    
    Not all handles support this option.  When multiple handles are displayed, the one closest to the mouse cursor that does support it will be chosen.

    Translate Handle:
        Controls how indirect dragging behaves with translate handles.

        Map Drag to Axis:
            Drags along the handle axis best matching the mouse motion.
        Map Drag to Construction Plane:
            Drags across the construction plane, defaulting to the view
            plane when the construction plane is not displayed.
        Map Drag to View Plane:
            Drags across the view plane, regardless of whether or not
            the construction plane is displayed.

    Spider Handle:
        Controls how indirect dragging behaves with the spider handle
        available for joints.

        Map Drag to Axis:
            Drags along the handle axis best matching the mouse motion.
        Map Drag to Construction Plane:
            Drags across the construction plane, defaulting to the view
            plane when the construction plane is not displayed.
        Map Drag to View Plane:
            Drags across the view plane, regardless of whether or not
            the construction plane is displayed.

    Prefer Indirect Translate Over Indirect Rotate:
        Controls which operation indirect dragging performs for handles showing
        both translate and rotate components.

    Prefer Indirect Translate Over Indirect Vector Rotate:
        Controls which operation indirect dragging performs for handles showing
        both translate and vector rotate components.

    Prefer Indirect Translate Over Indirect Scale:
        Controls which operation indirect dragging performs for handles showing
        both translate and scale components.

Hide Rotate Handle Rings Parallel to the View Direction:
    If this option is turned on, rotate handles will hide any rings edge on to the current view direction.  Turning this option off will only affect rotate handles without any translate axes.

Show View Axis Ring for Rotate Handles:
    If this option is turned on, rotate handles will draw an outer ring for rotating about the current view axis.
    
Default Transform Handles to Gimbal Mode:
    If this option is turned on, the initial mode of rotation handles in the 3D viewer will be in Gimbal Mode. In gimbal mode, the rotation circle handles will always be aligned so that manipulating them will only affect the rotation angle of their respective axis.

Default 2D Orientation Handle Transform is Global:
    This setting affects the orientation handles for manipulating [lights and cameras|/shelf/lightsandcameras]. There are two ways to manipulate the handle: in local space or in global space. 
    
    If this option is turned on, the default mode will be in global space. To manipulate in local space, hold down the shift key when manipulating the handle. If this setting is turned off, the default mode will be in local space, and the shift key needs to be held down for global space manipulations.

Open Animation Editor If Closed When Scoping From Handles:
    When scoping from handles, it will open up a new [Animation Editor|/ref/panes/animeditor] (if one is not already open).
    
Add to Channel List When Setting Keyframes:
    Do not Modify Channel List:
        Do not alter what is in the Channel List.
    Add to Channel List:
        Add channels to the Channel List in keeping existing channels.
    Isolate in Channel List :
        Add channels to the Channel List in replacing existing channels.

Scale Handle Style:
    Switches between different styles of the scale handle.
    
    Cloverleaf:
        The classic Houdini rounded square scale handle that can incorporate
        translate widgets.
    Axis:
        A simpler scale handle that may be more familiar to some users, but
        cannot incorporate translate widgets.


== Interactive Tools == (states)

Use Cook Selection to Update Geometry Selection Type in SOP States:
    Specifies whether SOP tools update the component selection type to match the type of component the tool operates on.
    
    This addresses the situation where you've selecting one component type, say edges, but the node takes that edge selection, and generates output of a different type, say faces. In that case, you would see a faces selected in the viewport, but if you started selecting, you would still be selecting edges. When this option is on, if for example the node generates faces, Houdini automatically switches the selection mode to faces.
    
    If you change this preference while a tool is active, you may need to leave and re-enter the tool for this to take effect. Not all tools support this preference.

Automatically Turn Construction Plane On:
    Toggle which interactive tools automatically turn on the construction plane when started with it off but the reference plane on.


== Objects and Geometry == (geo)

=== Preferences ===

Highlight Object Selections in Viewport:
    Provides visual feedback when objects are selected in the
    Viewport.

Automatic Parameter Folder Flipping when Picked in Viewer:
    Flips parameter pane folders to the folder that contains the
    first parameter that is referenced by any channel in the
    selected object if such a reference exists.
    
Default Geometry Display:
    Specifies the default geometry display mode of the 3D viewer. This only affects the 3D viewer in Geometry selection mode. 
    
    Show Current Operator:
         Geometry is displayed and selected from the current (ie. the last selected) node. 
         
    Show Display Operator:
        Geometry is displayed and selected from the node with the display flag enabled.

Default Context Creation:
    Specifies the default context creation mode. To change it in the 3D viewer, use the icon menu in the upper-right corner. 
    
    Create at Object Level:
        Creating new geometry (eg. Box tool) from the shelf will create a new object to contain it. 
    
    Create in Context:
        Geometry will be created within the current context (eg. another piece of geometry in the same object).
    
Use Existing Selection to Complete Actions:
    If enabled, tools use the existing selection if available to complete their
    actions when they are invoked.

Secure Selection On by Default:
    Enables secure selection by default. When secure selection is enabled,
    it prevents you from losing your selection with a stray click.

Create Full Loop Selections Through Any Topology:
    When enabled, loop selections performed in the viewport will create full
    loops even if this means passing through regions of irregular topology.  If
    this option is disabled, loops will terminate at points where there are
    multiple possible paths. Consider the example of  selecting a longitudinal
    edge on a polygon mesh sphere. If this option is turned on, an edge loop
    will be created that passes through the poles of the sphere. If this option
    is turned off, the loop will stop at the poles.

Select Entire Subnets On by Default:
    When enabled, the default behavior will be to select the subnets
    when you select the containing node.

Highlight Selected Geometry in Viewport:
    When an object is selected, Houdini will highlight the
    corresponding object in the Viewport.

Popup Menu Selection:
    If this option is turned on, a menu will pop-up when clicking a spot in the 3D viewer for selecting has multiple objects to allow you to choose which one to select.
    
    When clicking on a spot in the 3D viewer for selecting has multiple objects, a menu will pop-up to allow choosing between them.

Keep Position when Parenting:
    Never:
        When set to Never, objects will not maintain their world
        position when you parent objects together, rather, they will
        assume a space relative to the parent object.
    Always:
        When set to Always, objects will maintain their world
        position and orientation even if you rewire an object node
        to set its parent (this is done by changing the object's
        Transform/Rotate/Scale parameters).
    Use Object Flag:
        This setting will maintain an object's world position
        according to the Keep Position When Parenting parameter of
        the individual object.
        

Bone Kinematic Override:
    None:
        If none is selected, there is no kinematic override.
    IK Rest Pose:
        If rest is selected, all bones are cooked at their rest positions. The bone rest positions control how Inverse Kinematics are solved for them.
    Capture Pose:
        If capture is selected, all bones are cooked at their capture positions. The bone capture positions are used when capturing skin geometry using the Capture and Capture Proximity SOPs.
    
Keep Position When Moving:
    If this option is turned on, moving an object will not affect the position and orientation of its child objects. This is done by modifying the child object pre-transforms and/or transform parameters.
    
Read-Only Pre-Transforms:
    If this option in turned on, you will not be able to manipulate objects' pre-transforms.

=== SOP Caching == (sopcache)

Cull Level:
    Higher settings tell Houdini to be more aggressive at keeping the
    cache size down, saving memory at the expense of speed.
    
Memory Limit:
    The amount of memory to use to cache geometry transforms.
    
Unloading:
    Never:
        Never unload SOPs.
    Flag:
        Only unload SOPs if the unload flag is set.
    Always:
        Always unload SOPs.
Memory:
    Never:
        Ignore the memory limit.
    Always:
        Unload SOPs when the memory limit is reached.

=== OBJ Caching === (objcache)

Houdini can cache object transforms for individual objects once it's
calculated them when you turn on the object's __Cache data__ option.
This is especially useful for objects whose world space position is
expensive to calculate (such as [Sticky objects|Node:obj/sticky]),
and objects at the end of long parenting chains (such as
[Bones|Node:obj/bone]). This option is on by default for Sticky and
Bone objects.

Memory limit:
    The amount of memory to use to cache object transforms.
Enforce Limit:
    Controls whether Houdini observes the __Memory limit__ or not.
Clear cache:
    Empties the cache immediately.

TIP:
    To turn off caching on all objects without setting their
    individual __Cache data__ options, set the memory limit to 0 and
    click __Clear cache__.


TIP:
    You can use the [objcache|Cmd:objcache] command to manage the
    OBJ cache through HScript.

<!--
TIP:
    To turn the __Cache data__ option on or off for all [Sticky
    objects|Node:obj/sticky], choose __View > Enable/Disable
    transform caching for all sticky objects__ in the viewer pane.
-->


== Particles == (part)

Skip Particle Info Generation (Faster):
    Bypasses the generation of info in the pop tiles' info pop-up
    (click tile with ((MMB))). This speeds up the particle
    simulation, at the expense of generating more informative
    feedback.


== Motion and Audio == (audio)

Maximum Time Slice Size (Frames):
    This option allows you to limit the size of a Time Slice,
    expressed in frames. The default maximum is 60 frames. This is
    useful if you only need a few frames of history, and the [Playbar|/anim/playbar]
    is jumping ahead by large intervals. If a Time Slice is larger
    than this maximum size, it will be clipped from the current
    frame backwards (causing a gap between this slice and the
    previous one). The slice will always end on the current frame.

Enable Time Slice Flag when Creating CHOP:
    Sets the default behavior for when you place a CHOP in the
    Layout Area.

    All chops with Time Slice capability created while this option
    is on will have their Time Slice flags enabled by default.
    Otherwise, all chops are created with the Time Slice flag turned
    off. This is a convenient option to leave on when creating and
    working with large Time Sliced networks. This option is off by
    default.

Minimal Time Slice Cooks:
    Some Time Sliced chops can minimize their cooking, rather than
    cooking every frame. When cooking is unnecessary, or it produces
    the same output, these chops will stop cooking until an input
    changes.

    chops that have this feature are:

    * Copy chop

    * Count chop

    * Envelope chop

    * Lag chop

    * Spring chop

    * Trigger chop

    Minimal Cooking will not apply to these Time Sliced chops if
    they have non-constant chop inputs or time dependent chop
    inputs. This option is off by default. It can speed up
    puppeteering and chop networks that respond to isolated inputs
    or events.


== Compositing == (comp)

=== Cache ===

Interactive Cache Size:
    The size of the tile cache, in MB. If you use the compositor
    constantly, you should set this to a fairly large value
    (half the available memory for systems with more than
    256Mb). This only applies to interactive applications.

Non-interactive Cache Size:
    The size of the tile cache, in MB, that is used when the
    compositor is not being used interactively (hbatch, hython).

Reduce Cache Size when Idle:
    In interactive applications like Houdini, 
    when the compositor goes idle for a short time (5 minutes) 
    it begins slowly pruning the cache down to this size. This 
    can free up memory for use in the rest of the application.

Clear Cache:
    Clears all the compositing caches.

=== Cooking ===

Multi-threaded Cooking:
    If enabled, multi-threaded cooking is enabled. Otherwise,
    only 1 thread is used to cook images (the main Houdini
    process).

Threads:
    Specifies the number of threads to use when cooking. If set
    to 1, only the main Houdini thread cooks images (as if
    Multi-threaded cooking was off). To saturate a
    multiprocessing computer, use twice as many cooking threads
    as processors.

Use GPU to Assist Compositing:
    Allows certain COPs to be accelerated using OpenGL. Changing this preference requires a restart of Houdini. The following is a list of available accelerated operations. Operations that are greatly accelerated are marked with a *. 

    - 2D transforms, including motion blur*
    - Fog (noisy fog*)
    - Z-composite
    - Lighting (all, volumetric*)
    - Environment map 
    - all basic color corrections (bright, gamma, color curve, HSV, hue curve*, color correct, etc)
    - Expand*
    - Convolve*
    - Deform*
    - Corner Pin & Unpin
    - Noise (perlin, imp. perlin, sparse*, alligator*; no random)


Use Collapsible Pixel Operators:
    If enabled, collapsible pixel operators in series (blue
    COPs) will be combined into one operation. If off, they are
    all processed individually.

Tile Size:
    The size of the tiles. The image is divided into these tiles
    and processed in chunks. If you are always working at a
    specific resolution, you may want to specify a tile size
    that exactly divides the horizontal and vertical resolution.
    Changing this value will flush all the caches. A tile must
    have at least 1024 pixels in it.

Resolution Limit:
    Allows you to specify the max. size an image in the
    compositor is allowed to be.


=== Interactive ===
    
Cook Displayed Operators on Startup or Load:
    If this option is turned on, COPs that are displayed cook initially when the hip file is loaded. If this option is turned off, they will not cook and the viewport will remain black.

Use Fast Interactive Cooking:
    If enabled, the resolution of images is automatically
    down-scaled to a smaller resolution while an interactive
    edit is in progress (dragging a handle, sliding a slider or
    XCF slider). This gives much quicker feedback at the expense
    of quality. If off, the image will be cooked at normal
    resolution.

Only Use Fast Cooking On Slow Operations:
    If enabled, fast operations (like Bright, Gamma and Timing
    COPs) do not cause the interactive down-scaling of images.
    If off, all operations down-scale the image during user
    interaction.

Use Fast Cooking on Images Larger Than:
    Sets a lower resolution limit on the images that will be
    down-scaled during user interaction. Images smaller than
    this limit will not be down-scaled. In the case that the
    image doesn't match the aspect ratio of this preference, the
    number of pixels in the images is compared and used as the
    limit.

Interactive Rendering Fraction:
    Specifies the down-scale factor. Smaller factors give much
    faster updates during interaction at the expense of image
    quality.

Cooking Feedback:
    Allows you to set the type of feedback which you receive
    while a single image is cooking:

    None:
        Nothing updates until the image is finished cooking.
    Progress Bar:
        A progress bar at the top of the image viewer updates
        periodically while cooking the image.
    Image Update:
        The viewport containing the image being cooked updates
        periodically, showing the actual progress of the cook.
        This has a fairly minimal performance hit.

=== Selectors ===

Never Prompt for Optional Inputs:
    If enabled, once the minimum number of sources are
    connected, input selection is considered to be complete. If
    an Always Place option is specified, the COP will be
    immediately placed in its selected Viewport.

Never Prompt for a Generator's Input(s):
    If enabled, inputs for generators are never prompted.

Always Place the New COP in the Current Viewport:
    If enabled, once selection of all inputs is complete the COP
    will be placed in the current viewport without prompting for
    the destination viewport.

Always Place New Generators in a New Viewport:
    If enabled, generators will be added to a new viewport, if
    available (otherwise the current Viewport is used). If off,
    you will be prompted for a destination viewport.


=== Names ===

This page allows you to customize the names of common plane
types. The default names are the first letter of the English
plane name, capitalized. These are the names that are used in
the scope fields, plane lists, VEX scripts and output Houdini
`.pic` files.

=== Colors ===

COPs can be colored by family type. Any new COP in that family
will have its tile colored to the family color for easy
identification.

Enable COP Auto Coloring:
    Enables or disables this feature for all COP types. You can
    also individually disable family types that are not
    important to you.

Generators:
    The color for all generators. Because generators can take an
    input and generate planes 'inline' (in the middle of a
    network), this helps you spot where in the network planes
    may be created or masked.

Pixel Functions:
    The color for all Collapsible pixel operations. Because
    collapsible pixel operations only work when grouped together
    in a chain, this helps you optimize your network for these
    types of operations.

Timing:
    The color for all timing-related operations and non-image
    related operations (like merge and delete). These operations
    normally do not cook images or use any cache memory. This
    helps you track down timing changes in a large network.

VEX:
    The color for all VEX-based operations. VEX COPs have the
    special characteristic that all plane names matching the VEX
    script's parameter names override those parameters on a
    per-pixel basis, so it is important to recognize these
    COPs.

=== Cineon ===

This page defines the default values for all Cineon parameters
in all new File COPs and Compositor output drivers. It also
defines the cineon parameters that are used when a Cineon file
is loaded or saved outside these two contexts (like from the
Save Image... COP tile menu). Cineon files have an extension of
`.cin`.

Convert from 10 bit Log:
    If enabled, the Cineon file is converted into linear space.
    Otherwise it remains in its 10 bit log space (with values
    from 0 - 1024).

LUT File:
    The _LookUp Table_ file containing the 10bit cineon
    conversion (.lut). This file may be created manually or with
    the standalone icineon or ilut tools.

Black Point:
    The Cineon value (0-1023) that maps to black when converted to linear colorspace. This and the __White Point__ and __Film Gamma__ is used when loading Cineon files (.cin). This only has an effect if the __LUT File__ field is empty, otherwise the LUT is used for the conversion instead. 

White Point:
    The Cineon white point, which defines the Cineon value
    (0-1023) which represents 90% image intensity. This
    parameter is not used if a LUT file is specified.

Film Gamma:
    The Cineon film gamma, which defines the gamma to use in the
    conversion from Cineon space to linear image space (the
    space which the compositor operates in). This parameter is
    not used if a LUT file is specified.
         
            
== Scripting == (scripting)

Expression Language:
    hscript:
        Changes the default expression of new nodes to hscript.
    python:
        Changes the default expression of new nodes to python.
    
Parameter Fields:
    Entry boxes for parameters, such as those in the [parameter editor|/ref/panes/parms].

Text Editors:
    Multiline text editors, such as those located in Edit Comments.
    
Textport:
    The [textport|/ref/windows/textport].

    Syntax Highlighting:
        Turns on text colors to help you differentiate between syntax.
    
    Parenthesis and Quote Matching:
        Highlights the matching parenthesis or quote when your cursor moves over it. This lets you know if things are properly matched up as well as where complicated expressions begin and end.
        
    Context Sensitive Popup Help:
        Shows the possible completion names when you start typing a valid function name or operator path. It also provides help as to the parameters of that function.


== Desktops and Toolbars == (desk)

Save Desktops Automatically:
    Changes to Panes within Desktops are saved automatically.

Show Hidden Files:
    Shows files that are marked as hidden (whose filename starts
    with a period).

Show All Files:
    Shows all files, regardless of what type they are.

Path Menu Behavior:
    Allows you to define the path menu behavior when you open the [Desktop Manager|desks] window and use the drop-down menus to switch the Location of a desktop, instead of being prompted each time (default behavior).


== Save and Load Options == (persistence)

Save Method:
    Overwrite File:
        Will overwrite the existing file you opened with the present
        state of the hip file.

    Increment Filename:
        If enabled, and the name of your file contains a number,
        then the number will be bumped up by one every time you save
        the file. This does not happen with Save As, only with Save
        (also see the _-i_ option on the _mwrite_ command in the
        _Scripting_ section).

    Make Numbered Backup:
        With this setting, the filename of the `.hip` file will
        remain the same, but backup files will be created which are
        incrementally numbered. The default backup directory is:
        _./backup_ and the backed up files will have a __bak{num}_
        suffix.

Save View Commands For:
    This preference is helpful for reducing file bloat.

    All Viewers:
        Save view commands for all existing viewers (whether
        currently open or not), as well as any stashed view commands
        for viewers which have not yet been created.

    Existing Viewers:
        Save view commands for all existing viewers (whether
        currently open or not), skipping any stashed view commands
        for viewers which have not yet been created.

    Open Viewers:
        Save view commands only for viewers that are currently
        open.

Auto Save Every __ Minutes:
    Specifies the interval for the auto save feature.

Auto Save Method:
    Overwrite File:
        Will overwrite the existing file you opened with the present
        state of the hip file.

    Increment Filename:
        If enabled, and the name of your file contains a number,
        then the number will be bumped up by one every time the file
        saves.

    Make Numbered Backup:
        With this setting, the filename of the `.hip` file will
        remain the same, but backup files will be created which are
        incrementally numbered. The default backup directory is:
        `./backup` and the backed up files will have a `auto{num}`
        suffix.
        
NOTE:
    You must turn on the __Auto Save__ checkbox in the __Edit__ menu to enable auto saving.
    Auto-save is automatically disabled when Houdini starts up, because it can slow down
    Houdini and take up a lot of disk space if it is left on unintentionally.
    You must manually enable it for each session.

Warn About Deprecated Operators:
    If enabled, Houdini will open a warning dialog box with the list of nodes
    using operators that have been marked as deprecated. Toggle off if you 
    prefer not to see such warnings. 
    
    NOTE:
        Operators that have been marked deprecated may be subject to removal from future versions of Houdini.


== Hip File Options == (hipfile)

Unit Length:
    The length in meters of one Houdini unit. This value is used by some unit-specific DOPs parameters.
    
Unit Mass:
    The mass in kilograms of one Houdini unit. This value is used by some unit-specific DOPs parameters.
    
NOTE:
    Unit time is always one second.


== Notifications == (notify)

Notification Area:
    Notifications, such as errors, warnings, prompts, and help tips can be
    displayed directly in the viewport or the status bar. Only messages related
    to the viewport will be shown in the viewport; cook messages and progress
    will be still be reported in the status bar.

    Viewport:
       Notifications will appear at the bottom of the viewport.

    Status Bar:
       Notifications will appear in the main status bar of Houdini.

Help Tip Area:
    Notifications that act purely as help tips and do not direct actions or 
    reports warnings or errors can be treated differently than other 
    notifications.
    
    Viewport:
        Help tips will appear at the bottom of the viewport.

    Status Bar:
        Help tips will appear in the main status bar of Houdini.

    Suppress:
        Help tips will not be shown.

Echo Hotkey Commands:
    Commands executed by hotkeys will have their action displayed in the 
    viewport or status bar.

Message Time Limit:
    Help tips, messages, and hotkeys will be shown for a short time if this
    option is enabled, otherwise they will be shown until the next message
    replaces it. The duration of the display can be specified as well.    


== Warning Dialogs == (warning)

The options in this window allow you to toggle warnings on and off. By default all of the warning dialogs are turned on.

<!--
Warn Before Overwriting Files:
Warn Before Unlocking Nodes:
Warn Before Deleting Spare Parameters:
Warn When Deleting Parameters Without Deleting References:
Warn When Creating Nested Channel Groups:
Warn Before Copying Channels into Sibling Group:
Warn Before Deleting Shelf Elements:
Warn Before Deleting Gallery Entries:
Warn When Changing to Inactive Snap Mode Option Page:
-->


== Performance Options == (perf)

Percentage Thresholds:
    This setting controls the color values used to display relative cook times
    for node when using the [performance monitor|/ref/panes/perfmon].

    For more information on how to use the ramp, see [Ramp parameters|/network/ramps].


== External Tools == (exttools)

File Compare:
    External GUI compare (diff) program.
    
    Executable Path:
        The full path to the executable.

    Command Line Arguments:
        This arguments used when launching the external compare (diff)
        program. The following variables can be used when constructing the command line:

        $OLDPATH:
            (Required) Replaced with the path to the 'older' file, also considered the 'left' file.
        $NEWPATH:
            (Required) Replaced with the path to the 'newer' file, also considered the 'right' file.
        $OLDTITLE:
            Replaced with a title to use for the left side instead of the temp file name.
        $NEWTITLE:
            A title to use for the right side instead of the temp file name.

Folder Compare:
    External GUI compare program that supports comparing folders.  See `File Compare` for more detailed information.


== Miscellaneous == (misc)

Restrict Web Browser to Safe Commands:
    Restricts the HScript commands that can be run from the Houdini
    embedded web browser. Turning on this option can help prevent
    malicious scripts from running commands through Houdini.

Use External Help Server:
    Opens the Houdini help documentation in your system's default web browser instead of Houdini's built-in browser.

Reserve <<n>> KB for the Undo System:
    Specifies how much memory should be used for Houdini's Undo
    system - the more memory you allocate, the more Houdini can
    Undo.

Delete Channels When Reverting to Defaults:
    Causes the Revert to Defaults operation to delete any channels
    on the parameters changed by this operation.

Revert Invisible Parameters to Defaults:
    Specifies whether or not invisible parameters should be affected
    by a Revert to Defaults operation.
    
Make Spare Parameters for Unknown Channels:
    If this option is turned on, spare parameters are created to hold the values of extra parameters that are not in your version of Houdini so that you can see what changed and possibly rescue the values, rather than discarding those parameters into the bitbucket. This is useful when your hip file is from an older version or if the otl defining the node is older. However, you can turn this option off if you do not want to clutter your nodes with obsolete parameters.
    
Spare/HDA Parameter Deletion:
    
    When you are in a Type Properties and you delete one of your parameters, there might be parameters inside the asset that point to that parameter. 
    
    The default is to Automatically Delete all References that are found. Automatically Delete only Simple Channel References does a more conservative job which could leave some references, but is less likely to destroy complicated expressions.  Do Not Automatically Delete any References leaves dangling references, yet eliminates the possibility of expressions being affected.
