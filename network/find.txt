= Find nodes in a network =

"""How to use the Find dialog to find nodes based on various criteria."""

:task: Open the find dialog:
    In the network editor, choose __Edit > Find__ or press ((Ctrl + F)) or ((/)).

    * Type names or name patterns to search for in the text box at the top of the dialog.

    * Turn on __Ignore case__ to do case-insenstive matches.
    
    * As you type, matching nodes appear in the table at the bottom of the dialog.
    
    * Press ((Enter)) to select all matching nodes, or use the arrow keys or mouse to double-click a node in the results table.

:task: Move through results:
    Once there are search results in the table at bottom of the find dialog, you can use the __Next__ and __Previous__ buttons to select each node in the results.
    
    If the find dialog is closed, you can still move through the search results using:
    
    * __Edit > Next matching node__ and __Edit > Previous matching node__ in the network editor menus.
    
    * ((<)) and ((>))
    
    * ((Ctrl + G)) and ((Ctrl + Shift + G)).

:task: Add search criteria:
    In the find dialog, click [Icon:BUTTONS/list_add] __Add filter__ and choose the [filter type|#filters] to add. You can continue to click __Add filter__ to add more search criteria.
    
    * You can choose whether _all_ rows must match or _any_ of the rows can match.
    
    * Click the [Icon:BUTTONS/list_delete] delete button to the right of a row to remove it.


== Filters == (filters)

TIP:
	Click __All__ to require nodes to match _all_ of the filters. Click __Any__ to show nodes that match _any_ of the filters.

Name:
	Finds nodes by name.
	
	For example, you can set up a "*Name* _matches pattern_ `left_*`" filter.

Parameter:
	Finds nodes by the _evaluated_ value of a parameter on the node. You must fill in the _internal name_ of the parameter you want to search. You can see the internal name of a parameter in the tooltip when you hover over the parameter label in the parameter editor.
	
	For example, you can set up a "*Parameter* `tx` >= `0`" filter.

Raw Parameter:
	Finds nodes by the _unevaluated, textual_ value of a parameter on the node. This lets you search the text of expressions, for example, rather than the number the expression evaluates to.
	
	For example, you can set up a "*Raw Parameter* `tx` _contains_ `$F`" filter.

Wrangle Snippets:
	Finds Wrangle nodes by searching the contents of the VEX snippets. This filter matches snippets containing the given text (you cannot use wildcards in the search text).

	(This is a convenience equivalent to adding a __Node type__ filter for nodes whose names end in `wrangle`, plus a __Parameter__ filter for parameters named `snippet` containing the search text.)

	For example, hyou can set up a "*Wrangle VEX contains* `@N +`" filter.

Parameter State:
	Finds nodes that have parameters in a certain state.
	
	For example, you can set up a "*Parameter State* _has an expression_" or "*Parameter State* _off default_" filter.

State:
	Finds nodes that are in a certain state.
	
	For example, you can set up a "*State* _has_ Bypass flag" filter.

Type:
	Finds nodes of a certain type.
	
	For example, you can set up a "*Type* _is not_ Sop `*wrangle`" filter.


== Search syntax == (syntax)

You can also use special search syntax in the search field at the top of the dialog. These let you type equivalents of the various search criteria

* Bare words are name substring searches. For example `foo` matches any name containing foo.

    Technically we're just taking the input, putting it inside asterisks, and putting that into the Houdini pattern matching function, so you can use Houdini's pattern matching syntax here.

* To match an exact name, put it in quotes: `"foo"`.

* Use plus and minus to match flags and states. For example, all nodes with the template flag on and no warnings or errors: `+template -warning -error`. Flags/states accept prefixes, e.g.: `+t -warn`.

* Raw parameter search: `tx=$F ty=2 tz=sin`. The operator `~=` uses Houdini pattern matching, for example `file~=$F`.

    If you want to search for a value with spaces, enclose the value in quotes. For example, `label~="The *"`

* Evaluated parameter search: `ty:0 tx:>5 tz:<=0`. The operator `~=` uses Houdini pattern matching, for example `file:~=*foo*`

* You can use `&` ("and"), `|` ("or") for boolean searches, and parenthesis for grouping. For example:  `(ty:0 | ty:-5) | +warning NOT (rx:0 & ry:0)`.

* Prefix a search by node type with an apostrophe: `'objmerge`.
