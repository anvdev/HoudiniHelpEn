= Parameter editor =
#action_context: h.pane.parms
#bestbet: preset presets

"""How to change the behavior of nodes by changing their parameters."""


== Overview ==

Parameters are the options on an individual node. For example, each light has a __Translate__ parameter that controls
the light's position, a __Color__ parameter that controls the color of the light cast, and numerous other parameters.

[Image:/images/ui/parms2.png]


== Editing ==

:task:Edit a parameter value:
    * Click in a parameter value box and type a new value.

    * Press ((Alt + E)) to edit the field contents in an external
      editor (as defined by the `$EDITOR` environment variable).

:task:Undo to the previous value of a field:
    Click ((RMB)) in the text field.

:task:Reset a value to the default:
    ((Ctrl + MMB)) click the parameter.

:task:Find a particular parameter on a node:
    Click the [Icon:BUTTONS/search] search icon in the top right of the parameter editor to show the [search toolbar|#search].

:task:Delete animation channels on a parameter:
    ((Ctrl + LMB)) click the parameter, or ((RMB)) click it and choose __Delete channels__.

:task:Change a value by dragging in the viewer:
    # Select one or more scoped channels in the
      [channel list|/ref/panes/chanlist] .

    # In the viewer pane, hold ((J)) and drag ((LMB)) to modify the
      parameter value(s), or drag ((MMB)) to show a
      [value ladder|/basics/ladder].

:task:Change a value using the value ladder:
    # Press ((MMB)) on a parameter name or an individual edit field.
      The [value ladder|/basics/ladder] appears.

    # Drag up and down the ladder to choose the magnitude of the
      change. Drag left and right to change the value.

:task:Create a new parameter editor pane that always edits at a certain node:
    # Select the node you want to edit.
    
    # Click the [Icon:BUTTONS/new_tab] "new tab" button in the pane header and choose __New pane tab type > Parameters__.
    
    # In the new parameter editor pane, click the [Icon:BUTTONS/pinned] Pin button to pin the parameter editor to the node so it won't follow the selection.

:task:Create a relationship between two parameter values:
    See [referencing parameter values|copying].

:task:Protect a parameter from being changed:
    * Right-click the parameter in the parameter editor and choose __Lock Parameter__.

    * To unlock a parameter again, right-click the parameter and choose __Unlock Parameter__.

    Locked parameters have a gray background in the edit field(s).


== Entering expressions ==

:task:Enter a short expression directly:
    Type the formula directly into the parameter's text box.

:task:Enter an expression using an editor window:
    Right-click the parameter and choose __Expression > Edit Expression__.

:task:Switch between viewing the computed value for the current frame and the expression itself:
    Right-click the parameter and choose __Expression > Toggle Expression__.

:task:View the animation curve generated by an expression:
    Right-click the parameter and choose __Channels > Add to Channel List__.


== Text box color coding ==

[Include:/network/edit_field_colors]


== Parameters that reference other nodes ==

In Houdini, various parameters contain references to other nodes instead
of numeric or string values.

:task:Insert the name of a node in a node parameter:
    * Type the path to the node in the parameter's text field. You
      can use a relative path from "this" node (the node with the
      parameter you're editing).

    * Click the [Icon:BUTTONS/chooser_node] node chooser
      icon next to the parameter to choose a node from a
      tree list of all existing nodes.

    * Drag a node from the network editor and drop it onto the
      parameter's text field to insert its name in the field.

:task:Edit the parameters of a referenced node:
    * Click the [Icon:BUTTONS/jump] jump icon next to
      the parameter's text field to jump to the referenced
      node's parameters in the current editor.

    * Ctrl-click the jump icon to edit the referenced node's
      parameters in a new window. This lets you quickly edit the
      referenced node's parameters without losing focus on the
      current node.


== Copy, paste, and link parameter values == (link)

See [pasting references|copying#link].


== Presets ==

A Preset file contains preset values for the parameters of an operator.
You can use them to fill in common values, or to save important
variations of a node. Saved presets are node specific.

Use the menu items in the [Icon:BUTTONS/gear] gear pop-up menu
on the toolbar to load, save, and select presets.

:task:Save the parameter values of a node to a preset:
    # In the parameter editor, click the [Icon:BUTTONS/gear] gear menu and choose __Save Preset__.
    
    # Give the preset an name, for example `center_pivot` and click __Save Preset__.
    
    For more information see the [save preset dialog|/ref/windows/savepreset] help.

:task:Set the parameter values of a node from a preset:
    In the parameter editor, click the [Icon:BUTTONS/gear] gear menu and choose the name of a preset.

:task:Delete a node preset:
    In the parameter editor, click the [Icon:BUTTONS/gear] gear menu and choose __Delete preset__.
    
    Use the [delete preset dialog|/ref/windows/deletepreset] to choose the preset you want to remove.

NOTE:
    Load from `.preset` File and Save to `.preset` File are older ways
    of saving and applying presets. Using the above methods to save and
    apply presets is the preferred method. However, `.preset` files are
    ASCII files, which are easier to edit than the `.idx` files that the
    new method uses, so they still have some usefulness.


== Defaults ==

* The parameter editor shows values different from the default as *bold*.

* You can temporarily change the original "factory" defaults for a type of node. For example, you can change the default __Depth__ for the [Subdivide node|Node:sop/subdivide] to `2`, so new Subdivide nodes will start with __Depth__ at 2, and reverting to defaults will reset the value to `2`, not the original "factory" default of `1`.

    This does not affect the "bold" display style in the parameter editor. The parameter editor always bolds values that are different from the _original_ defaults, regardless of how you've changed the defaults.

    Changes to the defaults only last for the current "session". If you quit and restart Houdini, it will start with the original defaults.

* If you want to _permanently_ change the default values for newly created instances of a node, you can use a [creation script|/hom/locations] (`HOUDINIPATH/scripts/<<category>>/<<nodename>>.py` or `<<nodename>>.cmd`) to modify new nodes of a type as they are created.

:task:Reset a single parameter to the default value:
    In the parameter editor, right-click the parameter label and choose __Revert to default__.
    
    ~~~ or ~~~
    
    ((Ctrl + MMB)) click the parameter label.

:task:Reset all parameters on a node to their default values:
    In the parameter editor, click the [Icon:BUTTONS/gear] gear menu and choose __Revert to factory defaults__.
    
:task:Make a nodes current values the new default:
    In the parameter editor, click the [Icon:BUTTONS/gear] gear menu and choose __Override factory defaults for this session__.

:task:Revert the defaults for a node to their original values:
    In the parameter editor, click the [Icon:BUTTONS/gear] gear menu and choose __Revert to and restore factory defaults__.
    
    This will also revert all the parameters on the node to their original default values.


== Toolbar ==

Node menu:
    Shows the icon of the node you are currently editing. Click to show the node's context menu (this is the same menu you get if you right-click the node in the [network editor|/ref/panes/network]).

Node type:
    For example, a Geometry object will show *Geometry*.

Name text box:
    The node's name. When you create a node it has a default name of the operator type name plus a number. You can edit the text box to change the node's name (this is the same as clicking the node's name in the [network editor|/ref/panes/network]). 
    
    Node names can only contain letters and numbers. Spaces are not allowed in the name.

[Smallicon:BUTTONS/gear] Gear menu:
    Use the items in this menu to edit various node and parameter settings. See [gear menu|#gear] for more information.

    - Edit the node's parameter interface. See the [Edit Parameter Interface window|/ref/windows/edit_parameter_interface].

    - Save presets and reload presets.

    - Edit the node's delete script (this lets you define a script that Houdini will run if/when the node is deleted).

[Smallicon:BUTTONS/info] Info:
    Click to show a small window of information about the node. For example, a geometry node will show the bounding box, number of points, attributes, and other information. This is the same information represented in the [node info window|nodes#info] in the network editor.

[Smallicon:BUTTONS/hscript] Expression language:
    This menu controls which expression language you will use to write new expressions (HScript expressions or Python). You can choose the expression language of each individual parameter using the [parameter's context menu|#parmmenu].

[Smallicon:BUTTONS/search] Search:
    Click to show or hide a toolbar with [controls for searching and filtering|#search] the parameters.

[Smallicon:BUTTONS/help] Help:
    Click to view documentation for the current node.

    
== Searching and filtering parameters == (search)

Often you want to quickly jump to one specific parameter in a complex interface, or show only the parameters that are not at their default values, or find parameters with expressions. The filter and search toolbar makes this easy.

:task: Show the filter and search toolbar:
    In the top-right corner of the parameter editor, click the [Icon:BUTTONS/search] search icon in the parameter editor's toolbar to show or hide the search and filter controls.

* The pop-up menu on the left filters which parameters are shown in the parameter editor:

    * All parameters (in this mode, the text box only searches parameters, not tabs or other groups).
    
    * All parameters and headings (in this mode, the text box searches parameters as well as tab names and group headings).
    
    * Only parameters that are _time-dependent_ (that change based on the current frame number). For example, parameters with expressions that use `$F`.

    * Only parameters that are shown in the [animation editor|/ref/panes/animeditor] (see [Channel List|/anim/scope] for more information).

    * Only parameters that have the auto-add to channel list flag turned on.

    * Only parameters that are selected in the scene graph.
    
    * Only parameters that are not at their default values. This makes it easy to see what parameters have been edited.
    
    * Parameters with expressions.
    
    * Parameters with _overrides_. Usually this means the parameter's value is computed by a CHOP network. For example, [motion effects|motioneffects] set up a CHOP network to control parameters.

    * Only parameters that are marked as invisible or are hidden because of hide when conditionals (see [conditional rules|/ref/windows/optype#conditionals])
    
    * Raw value or expression. When this filter is active, the search box searches the raw (unevaluated, unexpanded) textual parameter contents. For example, you can search for `$F` to find any parameters that use the current frame variable.

* The text box on the right usually filters parameters by their label (or internal name). This makes it faster to find a certain parameter quickly if you know its name.

    When the filter is set to "Raw value or expression", the search box searches the parameter _value_ rather than name/label.

TIP:
    Houdini preserves the tab structures around the matching parameters, so you still might need to click through tabs to find the parameter you're looking for.


== Gear menu == (gear)

:box:
    #display: raised

    Edit Parameter Interface:
        #action: edit_spare_parms
    
        Opens a window allowing you to add, edit, or remove [spare parameters|spare] on the current node instance.
    
        This is different from right-clicking the node and choosing __Type Properties__. That edits the parameter interface of all nodes of that type, while this edits the extra parameters that might exist on this particular node.

    Edit Rendering Parameters:
        #action: edit_render_parms
    
        Opens a window allowing you to add, edit, or remove [render properties|/props/] on the current node instance.
    
        The only difference between this and __Edit Parameter Interface__ is this automatically shows the tab of available render properties instead of the tab of available spare parameter types.

    Edit Deletion Script:
        #action: edit_delete_script
    
        Opens a window allowing you to edit a script that will run when/if the current node is deleted.
    
        (You can set the deletion script programmatically using [Hom:hou.Node#setDeleteScript].)

    Edit Comments:
        #action: edit_comments
    
        Opens a window allowing you to edit the comment string associated with the current node.
    
        This is the same as editing the comment in the [node info window|/network/nodes#info] in the network editor.

    ~~~~~

    Revert Parameter Interface:
        #action: revert_spare_parm_layout
    
        Reverts the parameter interface of the current to the standard initial interface for its node type.

    Delete All Spare Parameters:
        #action: delete_spare_parms
    
        Deletes any spare parameters on the current node.

    Add Spare Input:
        #action: add_spare_input
    
        Adds a spare reference to another node. These are used in [compiled node blocks|/model/compile] to avoid external references in expressions.

    ~~~~~

    Add Visualizer:
        The items on this submenu let you attach a visualizer to the this node.

    Show Visualizers:
        #action: show_visualizers
    
        Opens a window that lets you edit the settings of any visualizers attached to the current node.

    ~~~~

    Save Preset:
        Saves the current parameter values as a preset you can recall or copy onto other nodes of the same type.

    Save as Permanent Defaults:
        Saves the current parameter values as the defaults for new nodes of the same type.

    Delete Preset:
        Opens a window allowing you to delete a saved preset for the current node type.

    ~~~~~

    Revert to Factory Defaults:
        Resets all parameter values to the defaults for this node.

    Revert to and Restore Factory Defaults:
        Resets all parameter values and their defaults to the "factory" default shipped with Houdini, reverting any changes and/or custom defaults.

    Override Factory Defaults for This Session:
        Saves the current parameter values as the defaults as the defaults for new nodes of the same type, but only until you restart Houdini.

    Type Properties:
        Opens the [Type Properties window|/ref/windows/optype] for the current node type. For assets this lets you edit the type's parameter interface and other options.

    ~~~~

    The rest of the menu lists any saved presets for this node type.


== Parameter context menu == (parmmenu)

:box:
    #display: raised

    You can [edit the contents of this menu|/basics/config_menus] in `PARMmenu.xml`.

    Revert to Previous Value:
        #action: revert_to_prev_val
    
        Returns to the previous parameter value.

    Channels:
        This submenu controls items for working with animation channels.

        :box:
            #display: raised
        
            Add to Channel List:
                #action: scope_append_channels
            
                Adds this parameter to the list of parameters shown in the [animation editor|/ref/panes/animeditor] (see [Channel List|/anim/scope] for more information).
        
            Isolate in Channel List:
                #action: scope_channels
            
                Replaces any parameters shown in the [animation editor|/ref/panes/animeditor] with this parameter (see [Channel List|/anim/scope] for more information).
        
            Remove from Channel List:
                #action: remove_channels
            
                Removes the parameters from the [animation editor|/ref/panes/animeditor] (see [Channel List|/anim/scope] for more information).
        
        
            Auto-Add:
                #action: auto_scope
            
                Toggles [Auto-Add|/anim/scope#autoscope] for this parameter. An "auto-add" parameter is automatically added to the Channel List when you select the object.
            
            Select in Channel List:
                #action: select_append_channels
            
                Selects this parameter in the list of parameters shown in the [animation editor|/ref/panes/animeditor] (see [Channel List|/anim/scope] for more information).
        
            Select/Replace in Channel List:
                #action: select_channels
            
                Selects this parameter and clears the previous selection in the list of parameters shown the [animation editor|/ref/panes/animeditor] with this parameter (see [Channel List|/anim/scope] for more information).
        
            Deselect in Channel List:
                #action: remove_channels
            
                Deselects this parameter in the list of parameters shown in the [animation editor|/ref/panes/animeditor] (see [Channel List|/anim/scope] for more information).

            Auto-Select:
                #action: auto_select
            
                Toggles [Auto-Select|/anim/scope#autoscope] for this parameter. An "auto-select" parameter is selected in the Channel List when you select the object.


            Pin in Channel List:
                #action: pink_append_channels
            
                Pins this parameter in the list of parameters shown in the [animation editor|/ref/panes/animeditor] (see [Channel List|/anim/scope] for more information).
        
            Pin/Replace in Channel List:
                #action: pin_channels
            
                Pins this parameter and clears the previous pins in the list of parameters shown the [animation editor|/ref/panes/animeditor] with this parameter (see [Channel List|/anim/scope] for more information).
        
            Unpin in Channel List:
                #action: pin_remove_channels
            
                Unpin this parameter in the list of parameters shown in the [animation editor|/ref/panes/animeditor] (see [Channel List|/anim/scope] for more information).

            Create Channel Group :
                #action: create_channel_group
            
                Create a channel group from the selected channels. This mostly used when ((RMB)) on a parameter tab, or from a selection in the Channel List.

            Select Nodes from Channels :
                #action: select_nodes_from_channels
            
                Select the nodes in the viewport from the selected channels.
		This is really usefull on character rigs where all the handles are promoted on the top level digital asset.
		You can hold ((S)) and ((LMB)) on a parameter label or tab to select controllers.
		This also from the channel list, but you need to press ((S)) alone without clicking.

            Select/Append Nodes from Channels :
                #action: select_append_nodes_from_channels
            
                Same as __Select Nodes from Channels__, but appending to the current viewport selection.
		You can hold ((Shift+S)) and ((LMB)) on a parameter label or tab to append controllers to the selection.

            Extrapolation :
		Set the channel extrapolation of all the selected channels.
		You can choose from __Default, Hold, Cycle, Extend, Slope and Oscillate__ extrapolation modes and apply it before and/or after the channels' end.
		See [Edit Channel Properties|/ref/windows/edit_chan_props] for the extrapolation mode descriptions.

            Edit Channel Properties:
                #action: edit_chan_alias
            
                Opens an [Edit Channel Properties|/ref/windows/edit_chan_props] window allowing you to edit channel metadata such as how to extend before and after the keyframed animation.

    Keyframes:
        This submenu controls items for working with keyframes.

        :box:
            #display: raised
        
            Set Keyframe:
                #action: set_keyframe
            
                Sets a keyframe on the parameter at the current frame.
        
            Remove Keyframe:
                #action: rem_keyframe
            
                Removes any keyframe on the parameter at the current frame.
        
            Step to Previous Key:
                #action: prev_key
            
                Go to the previous keyframe for this parameter.
        
            Step to Next Key:
                #action: next_key
            
                Go to the next keyframe for this parameter.
            
            Bake Keyframes:
                #action: bake_keys
            
                Writes the computed animated values of this parameter directly into the parameter at each frame and then removes the keyframe animation.
        
    Expression:
        This submenu contains items related to expressions.
    
        :box:
            #display: raised
        
            Toggle Expression:
                #action: toggle_expr
            
                Switch the text box between showing the _computed_ value for the current frame, and the expression itself. This is the same as clicking the parameter label.
        
            Edit Expression:
                #action: edit_expression
            
                Open the parameter value in an editor window. This is useful for long, multi-line expressions.
        
            Expand String Value:
                #action: expand_values
        
                Turns string expansion on or off in the parameter value.
        
            Use Python:
                #action: use_python
            
                Interpret expressions in this parameter as [Python expressions|/hom/expressions].
            
            Use HScript expressions:
                #action: use_old_language
            
                Interpret expressions in this parameter as [HScript expressions|/expressions/].

    Motion Effects:
        This submenu contains canned effects you can apply to transform parameters. The effects are implemented using CHOP networks you can then modify and elaborate if needed.
    
        :box:
            #display: raised
        
            Jump to Effect Network:
                #action: jump_export_chop
            
                Jumps to the CHOP network implementing any effect(s) on the parameter.
        
            Edit Parameters:
                Choose an applied effect from this menu to edit the effect's parameters.
        
            Enable Effect:
                #action: toggle_effect
            
                Toggles any motion effect(s) on the parameter on or off.
        
            ~~~~~
        
            The rest of the menu lists the available effects. Available effects include Cycle, Cycle with Offset, Despike, Lag, Limit, Noise, Shift, Smooth, Spring, Stretch, and Wave.
        
            You can [edit this part of the menu|/basics/config_menus] using `EffectsMotionMenu.xml`.

    Reference:
        The items in this menu let you [create references|copying#data] in this parameter to other data in the scene.

        :box:
            #display: raised
        
            Scene Data:
                #action: reference_scene_data
            
                Creates a reference in this parameter to a transform or parameter value elsewhere in the scene.
        
            Local Variable:
                #action: get_lvar
            
                Creates a reference in this parameter to one of the node's local variables. This is useful if you don't already know or forget what local variables are available.
        
            Local Attribute:
                #action: get_local_attr
            
                Creates a reference in this parameter to one of the attributes in the node's geometry.

    Copy Parameter:
        #action: copy_parm
    
        Copies a reference to this parameter to the clipboard. You can then choose to paste the data into another parameter in different ways.

    Paste Values:
        #action: paste_vals
    
        Pastes the _value(s)_ from the copied original. If you copied parameters with expressions, this will paste the computed values of the expressions instead of the expressions.

    Paste Expressions/Channels:
        #action: paste_channels

        Pastes animation (keyframes and expressions) from the copied original.

    Paste Relative References:
        Pastes references (using the [Exp:ch] expression function using relative paths) to the copied original. This links the two parameters, so changes to the first parameter are pulled into the second parameter.
    
        See [linking parameters with references|copying#link] for more information.

    Paste Other:
        This submenu contains lesser-used paste methods.

        :box:
            #display: raised
        
            Paste Expressions:
                #action: paste_exprs
            
                Pastes the expression(s) (if any) from the copied original at the current time.
            
            Paste Absolute References:
                #action: paste_refs
            
                Like Paste Relative References, but pastes [Exp:ch] expressions using absolute paths instead of relative paths.

    Delete Channels:
        #action: del_channels
    
        Removes any keyframe animation from this parameter.

    Include in Take:
        #action: take_activate
    
        Adds this parameter to the current [take|/basics/takes], allowing you to modify it in the take.

    Lock Parameter:
        #action: lock_parm
    
        Prevents this parameter from being edited or animated. For example, Houdini will not allow you to type in the parameter's text box or use a handle associated with the parameter.

    Unlock Parameter:
        #action: unlock_parm
    
        Unlocks this parameter if it was locked. This allows you to edit the parameter.

    Revert to Defaults:
        #action: revert_defs
    
        Resets this parameter to the default value. You can change the default with __Make Current Value Default__.

    Revert to and Restore Factory Defaults:
        #action: revert_factory_defs
    
        Resets this parameter and its default to the "factory" default shipped with Houdini, reverting any changes and/or custom default.

    Make Current Value Default:
        #action: set_curr_as_def
    
        Makes this parameter's current value the default. New instances of the node type will use this value, and the __Revert to defaults__ menu item will revert to this value.

    Export Parameter to Type Properties:
        #action: export_parm_type_props
    
        Adds parameter to the Existing Parameter list in the Operator Type Properties dialog.

    More:
        This submenu contains lesser-used items for modifying the parameter.
    
        :box:
            #display: raised
        
            View Dependencies:
                #action: view_deps
            
                Opens a window listing dependencies (references on other nodes to this parameter) and references (references in this parameter to other nodes).
        
            Bypass Spare Parameter:
                #action: bypass_spare_parm
            
                Disables this parameter, so the node acts like the parameter doesn't exist (if it is a [spare parameter|spare]).
        
            Delete Spare Parameter:
                #action: delete_spare_parm
            
                Deletes the parameter from the node interface (if it is a [spare parameter|spare]). 
        
            Bind to Viewport Ladder Handle:
                #action: bind_to_ladder
            
                Sets this parameter as the parameter controlled by the ((MMB)) ladder interactions in the viewport.
                    
            Unbind All Viewport Handles:
                #action: unbind_all_handles
            
                Removes any custom handles bound to this parameter.


@related

- [Animating parameters|/anim/basics]
- [Creating variations with takes|/basics/takes]


