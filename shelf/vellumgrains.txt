#icon: SHELF/vellum_grains
#parent: vellum

= Vellum Grains =

"""Configures vellum grains from geometry and adds to current vellum simulation."""

:video:
    #src: /videos/VellumGrains.mp4

This tool lets you pick a piece of geometry and configure it as vellum grains.  It will then be added to the active simulation and merged with any other existing vellum objects.

The object will be filled with points and solved with the points treated as hard spheres, giving a dry-sand effect.

NOTE:
    The default substeps of 1 is usually not sufficient for grains, so the substeps will be increased to 5 to provide better initial values.

== Using Vellum Grains == (includeme)

    # Select the geometry object to configure as vellum grains.
    
    # Click the [Icon:SHELF/vellum_grains]__Vellum Grains__ tool on the __Vellum__ tab.
    
    NOTE:
        There is a [Surface Collider|/shelf/clothbodycollider] tool on the __Vellum__ shelf that you can use for objects that will be colliding with your grains. It is essentially the same as the [Deforming Object|/shelf/deformingobject] shelf tool on the __Collisions__ tab, as they are both designed for deforming objects. However the [Surface Collider|/shelf/clothbodycollider] does not try to generate a VDB collision object, which is less expensive.
    
For specific parameter information, see the [Vellum Constraints|Node:sop/vellumconstraints_grain] and [Vellum Solver|Node:dop/vellumsolver] help.

== Working with Vellum Grains ==

This is very similar to the [Dry Sand|/shelf/drysand] tool on the __Grains__ shelf. However, it works inside the Vellum world, so you can have the grains interact with other Vellum objects. 

One important thing to note is that grains require higher __Substeps__ on the [Vellum Solver|Node:dop/vellumsolver] other Vellum objects. This is not an issue when using the shelf tool, but if you are creating the network manually, you will need to increase this value to at least 5 to prevent the grains from exploding. There is also a special __Grain Collisions__ section on the __Advanced__ tab of the [Vellum Solver|Node:dop/vellumsolver] for more control.

Unlike the other vellum objects, grains has its own [Vellum Configure Grain SOP|Node:sop/vellumconstraints_grain] node to set constraints, because it works so differently. There are two ways to create grains. You can either take the incoming points and add grain to them, which will cause them to start bouncing with each other. You can alternatively __Create Points from Volume__, which is the default. This will treat the incoming geometry as a closed volume, fill it with points, and then configure them as grains.