HScript language guide

List of HScript commands

VARIABLES

    In HScript, you can assign strings to variables with the set
    command:


    Set a variable
        set x = "hello"

    Set a global variable
        set -g x = "hello"

        or

        setenv x = "hello"

    Unset a variable
        set -u x

    A variable name must begin with letter or an underscore (_),
    followed by any number of letters, numbers or underscores.

    To use a variable in a command, prefix its name with a dollar sign
    ($):

  > > set foo = "bar"
  > > echo $foo
  > bar

    You can optionally enclose the name of the variable in curly braces
    ({}) to prevent the variable name from running into surrounding
    text:

  > > echo ${foo}baz
  > barbaz

    In addition, when you use curly braces HScript will expand variable
    references in the name before looking up its value. This lets you
    simulate simplistic arrays:

  > set foo1 = Padma
  > set foo2 = Mohammed
  > for i = 1 to 2 echo ${foo$i} end
  > Padma
  > Mohammed

    In HScript, variables can be local or global (sometimes called
    system variables).

    Local variables are local to the script being run. When the script
    is finished, the variable disappears. Local variables cannot be used
    outside the script in which they're defined. To create or set a
    local variable, use set. The variables created by the for and
    foreach loops are always local.

    Global variables are available to all scripts and to any programs
    started by Houdini. To create or set a global variable, use setenv
    or set -g.

    VARIABLE MODIFIERS

        You can add modifiers to the end of variable names to edit the
        returned value. These modifiers do not change the value stored
        in the variable, they only change the value returned by the
        variable reference with the modifier.

        To modify the variable value, add :<code> to the end of the
        variable name. For example:

      > > set afile = /home/matt/bin/foo.bar
      > > echo $afile:e
      > bar
      > > echo ${afile:e}
      > bar

        The available codes are:


        :h
            (Head) The path part of a pathname (that is, the path up to
            the filename).

          > > echo ${afile:h}
          > /home/matt/bin

        :t
            (Tail) Just the filname part of a pathname.

          > > echo ${afile:t}
          > foo.bar

        :e
            The extension on the end of the filename.

          > > echo ${afile:e}
          > bar

        :r
            (Root) All parts of a pathname _except_ the extension.

          > > echo ${afile:r}
          > /home/matt/bin/foo

        :s/<ptrn>/<repl>/
            Substitute occurrences of pattern <ptrn> with <repl>. See
            the :g and :a modifiers below.

          > > echo ${afile:s}/foo/baz/
          > /home/matt/bin/baz.bar

        :u
            Convert the value to uppercase. See the :g and :a modifiers
            below.

          > > set str = Hello There
          > > echo ${str:u}
          > HELLO THERE

        :l
            Convert the value to lowercase. See the :g and :a modifiers
            below.

          > > set str = Hello There
          > > echo ${str:l}
          > hello there

        Use the following prefixes to modify the behavior of the codes:


        :g
            (Global) Treat the string as a whitespace-delimited list of
            strings, and apply the following code to each component
            independently.

        :a
            (All) Recursively apply the following code as many times as
            possible.

        For example:

      > set A = "foo1 foo2 foo3 foofoo4"
      > 
      > $A:u == "Foo1 foo2 foo3 foofoo4"
      > $A:u:u == "FOo1 foo2 foo3 foofoo4"
      > $A:gu == "Foo1 Foo2 Foo3 Foofoo4"
      > $A:gu:u == "FOo1 Foo2 Foo3 Foofoo4"
      > $A:au == "FOO1 FOO2 FOO3 FOOFOO4"
      > 
      > $A:s/foo/bar/ == "bar1 foo2 foo3 foofoo4"
      > $A:s/foo/bar/:s/foo/bar/ == "bar1 bar2 foo3 foofoo4"
      > $A:gs/foo/bar/ == "bar1 bar2 bar3 barfoo4"
      > $A:as/foo/bar/ == "bar1 bar2 bar3 barbar4"

PUT THE OUTPUT OF A COMMAND IN A VARIABLE

    Unlike expression functions, HScript commands are not functions and
    do not have return values. They just print output to the textport.
    If you try to assign the result of a command to a variable, as in:

  > set objects = opls /obj

    ...you'll just get the string "opls /obj" in the $objects variable.
    However, you can capture the output of a command as a string and put
    it in a variable to achieve the same effect. To capture the output
    of a command, put it inside a run expression function and then use
    backquotes to evaluate the expression in HScript. Essentially,
    you're calling HScript inside an expression (to get a return value)
    inside HScript.

  > set objects = `run("opsls /obj")`
  > echo $objects
  > model ambient1 light1 light2 light3 cam1

REDIRECT THE OUTPUT OF A COMMAND TO A FILE

    To redirect the output of an HScript command to a file, use
    >filename in the command. To append to the file instead of
    overwriting it, use >>filename. To redirect the error output and the
    standard output of a command, use >&filename.

    When using the unix command to launch an external process, you may
    want to do redirection in the external shell instead of in the
    textport. Enclose the argument in single quotes to prevent the
    Houdini command interpreter from acting on the redirection before
    the external shell can see it.

  > unix myscript.pl '>output.txt'

CONTROL STRUCTURES

    IF

        The if statement executes a block of commands if a condition is
        true. You can optionally test alternate conditions with else if
        and execute a block of code if all other conditions fail with
        else.

      > if condition1 [then]
      >     commands to execute if condition is true
      > else if condition2
      >     commands to execute if condition2 is true
      > else
      >     commands to execute otherwise
      > endif

        For example:

      > if ( $F == 1 ) then
      >     echo Frame One
      > else
      >     echo Not Frame One
      > endif

        Currently, statements inside the if clause must occur on
        separate lines. That is, statements like if ($F == 1) echo Frame
        One will not work.

    FOR

        The for statement loops over a block of statements, incrementing
        a "counter" variable from a start number to an end number,
        optionally by a certain step.

      > for count_variable = start to end [step stepsize]
      >     commands to loop
      > end

        Do not add a $ before the name of the count variable in the for
        statement. For example:

      > for i = 1 to 3
      >     echo $i
      > end
      > 
      > for i = 1 to 100 step 3
      >     echo $i
      > end

    FOREACH

        The foreach statement loops over a block of statements, setting
        a variable to the next element in a list each time.

      > foreach iterator_variable (list_string)
      >     commands to loop
      > end

        For example:

      > foreach i ( a b c )
      >     echo $i
      > end
      > 
      > foreach object ( `run("opls -d")` )
      >     echo Object $object
      > end

        HScript does not have a real list or array type. The list the
        for each statement loops over is a string that HScript splits
        into elements the same way it parses the command line into
        arguments. See how HScript splits up the command line.

    WHILE

        The while statement loops over a block of statements as long as
        a condition is true. while condition commands to loop while
        condition is true end For example:

      > set i = 0
      > while ( $i < 10 )
      >     set i = `$i+1`
      >     echo $i
      > end

    BREAK/CONTINUE

        The break statement exits the current loop prematurely. The
        continue statement ends the current iteration of a loop
        prematurely and starts the next one.

CONDITION OPERATORS

    You can use these operators in the if and while structures:


    ()
        Grouping, precedence.

    == != < > <= >=
        Comparison: equal, not equal, less-than, greater-than, less-than
        or equal, greater-than or equal.

    && ||
        Logical and, logical or.

    You can enclose HScript expressions in parentheses for clarity, but
    it is not necessary:

  > for i = 1 to 10
  > ...
  > end
  > 
  > for (i = 1 to 10)
  > ...
  > end

QUOTED STRINGS

    Text inside single quotes (') is not expanded.

    Text inside double quotes (") has variables expanded.

    A double-quoted string is considered one argument.

    A backslash character (\\) escapes the next character. For example,
    to use double-quotes in a string: "I had a \\"great\\" time.".

    When a string doesn't require variable expansion, use single quotes
    to speed up evaluation.

    If you have two quoted strings next to each other with no spaces,
    they are considered a single argument.

    For example:

  > set foo = "Hello world"
  > echo '$foo='"$foo"
  > $foo=Hello world

    ...the echo command has one argument: '$foo=Hello world'.

    HScript evaluates backquotes with a higher priority than double
    quotes. If a double-quoted argument encloses a back-quoted string,
    the back-quoted string may contain double quotes without terminating
    the initial double quote delimiter.

    For example, the string:

  > foo`ch("/obj/geo1/tx")`

    ...is considered a single argument.

    As a general rule, do not include spaces between backquotes and
    what's inside them. Houdini may not evaluate them if there are extra
    spaces.

COMMENTS

    Everything following a # character on a line is considered a
    comment. To use a literal # in an unquotes string without starting a
    comment, put a backslash (\\) in front of it.

SPLITTING THE COMMAND LINE

    Houdini splits input lines into words at space characters. The
    special characters ; < > ( ) = form separate words and Houdini will
    insert spaces around these characters in unquoted strings. HScript
    is very lax about arguments. Basically anything it doesn't
    understand as a command or option, it will treat as a string. This
    can be useful when not having to put quotes around something makes
    multiple levels of quoting easier. However, it may insert extra
    spaces around special characters in unquoted strings.

    As a general rule, you should put quotes around strings you don't
    want HScript to alter.

USING THE HSCRIPT TEXTPORT

    The textport lets you input HScript commands and see the results. To
    open a new textport window, choose Windows > HScript textport. To
    put a textport in a pane, open the pane's Pane menu and choose
    Textport.

  * Quick copy and paste: select text, then click [MMB] to immediately
    paste it into the command line.

  * Quick help: type help command_name to print a text version of the
    command's online help in the textport.

  * Type ahead: you can start typing new commands before Houdini has
    finished executing the current command. Houdini will execute the
    "buffered" commands when it's done.

  * Scrolling: use Page up and Page down to scroll, or press [RMB] to
    grab the contents of the window and drag.

  * Continuation: if you press [Enter] in a command line that's not
    finished (for example, in the middle of a for loop), the command
    line will continue until you finish the open block (with end).

  * Command history


        Recall a previous command on the command line
            Press [Up] and [Down] to move through the history of
            previous commands. You can edit the text of the recalled
            command before executing it.

        Repeat the last command
            Type !! on the command line.

        Repeat a previous command
            Type !-num on the command line to execute the command from
            num entries ago. For example, type !-5 to repeat the fifth
            most recent command.

        Repeat the last command matching a pattern
            Type !string on the command line to execute the previous
            command containing string.

        View the command history
            Use the history command to print the command history.

  * Create aliases of commonly used commands

        In HScript you can use the alias command to assign are
        frequently used command, often with arguments, to a new command
        name. For example, if you find you frequently need to list the
        names of the objects in the scene, you can assign the command to
        the shorter, easier to type alias objs.

      > alias objs "opls /obj"

        Now typing objs on the command line will execute opls /obj.

        HScript's alias expansion is not as sophisticated as csh. For
        example, there is no recursive alias expansion; the following
        sequence of commands will not produce the expected result:

      > alias opcd opcf
      > alias cd opcd

        The cd alias will result in an unknown command "opcd" message
        since the alias expansion terminates after the first expansion.

        Also, HScript's alias expansion does not include the history
        meta-character substitution feature of csh.

HSCRIPT STANDALONE APPLICATION

    The hscript application is in $HFS/bin. Running it on the system
    command line will give you a console similar to the textport in
    which you can run HScript commands and see the results.

    The hscript application lets you write batch scripts that exercise
    the full power of Houdini without having to start up the entire
    graphical interface.

    Use hscript -q on the command line to suppress the version
    information the utility normally prints when it starts up. This is
    useful when you're redirecting the output of the hscript standalone
    process.

CREATE AND USE SCRIPT FILES

    You can encapsulate a group of commands in a script file so you can
    reuse its functionality. Simply create a text file containing the
    commands you want to run. In general, you'll want to save the script
    file in the script path, for example in
    $HOME/houdiniversion/scripts.

    In scripts, you can use the exit statement to exit the script
    prematurely. This exits all loops cleanly. HScript does not support
    setting an "exit status" like a UNIX shell, but you can use a global
    variable to achieve the same thing.

    You can pass arguments to the script when you run it to customize
    its behavior. To use arguments in the script file, use $argn
    variables:

    $arg0 is set to the name of the script as it was called.

    $arg1, $arg2, $arg3, etc. are set to the arguments passed in to the
    script.

    $argc is set to the number of arguments passed in to the script. For
    example, if the script is called with myscript first second third
    (three arguments), $argc is 3.

    To do simple parsing of the command line, or to work with a variable
    number of arguments, you can use the shift command. The shift
    command removes the first argument and shifts all the remaining
    arguments down, so $arg1 is now what was $arg2. So, you can iterate
    through all the arguments by processing the value of $arg1, then
    calling shift to move the next argument into $arg1.

    You can also read input from the user with the read command.

    RUN A SCRIPT

        Run a script in the script path. Type the script name (with the
        .cmd extension), followed by any arguments: myscript.cmd hello
        15 Run any script file from disk. Use the source command and the
        filename, followed by any arguments:

        source ~/myscript.cmd 1 10 hello

    THE HOUDINI SCRIPT PATH

        The HOUDINI_SCRIPT_PATH environment variable contains a list of
        directories to search for scripts. It includes
        $HFS/houdini/scripts (for factory-installed scripts),
        $HSITE/scripts (for site-specific scripts), $JOB/scripts (for
        job-specific scripts), and $HOME/houdniversion/scripts (for each
        user's scripts).

        If a script file is in the path, you can run the script by
        typing its name (with the .cmd extension) in Houdini.

        Scripts in directories later in the path will override scripts
        with the same name earlier in the path. You can use this feature
        to replace factory-installed scripts (such as 123.cmd) with your
        own scripts by putting script files with the same name in
        $HOME/houdniversion/scripts.

RUN SCRIPTS IN RESPONSE TO EVENTS


    Startup
        $HFS/houdini/scripts/123.cmd

        Houdini runs this script when it first starts up. It does not
        run again if you choose File > New. This script contains a lot
        of code to set up the initial Houdini environment (including
        loading the initial geometry). If you want to change something
        in this file, you should copy it to somewhere higher in the
        script path (for example, $HOME/houdniversion/scripts) and
        modify that copy. 123.cmd is the startup script for Houdini FX.
        Other products such as Halo, Alfred, etc. use separate startup
        scripts in scripts/ named for the product.


        NOTE
            Only Houdini FX runs 123.cmd. Houdini Core runs
            houdinicore.cmd instead of 123.cmd on startup. Both 123.cmd
            and houdinicore.cmd serve the same purpose but for different
            products.

    Open or create a new scene file
        path/scripts/456.cmd

        Houdini runs this script after you open a saved scene. This
        script does not exist in a factory install. If you create it
        somewhere in the script path (for example,
        $HOME/houdniversion/scripts), Houdini will run the script
        whenever a new scene opens, including on File > New.

    Create a node
        $HFS/houdini/scripts/op_type/op_internal_name.cmd

        When you create a node, Houdini runs the corresponding script in
        a subdirectory of scripts/.

        (Some operators have scripts in the factory install that perform
        various tasks, including preserving compatibility with scene
        files from old versions of Houdini, while other operators do not
        have any scripts.)

        This is very useful for customizing the behavior of built-in
        operators, or enhancing custom operators (digital assets) you
        create.

        You can create a new script with the proper directory structure
        and name in the script path (for example,
        $HOME/houdniversion/scripts/sop/box.cmd for the Box SOP) to have
        Houdini run the script when you create a node with the operator.

        To get the internal name of an operator, choose Tools > Operator
        Type Manager and look under Internally defined operators.

    Delete a node
        To set a script to run when a certain node is deleted, click the
        Gear menu in the node's parameter editor and choose Edit
        deletion script.

        This is useful when you create a custom operator that has
        associated nodes you want to delete if the main node is deleted.
        For example, the built-in bone objects have deletion scripts
        that delete supporting nodes such as the kinematic solver CHOPs
        if the bones are deleted. You can set the deletion script for
        node in HScript with the opdelscript command. Digital asset
        events See scripting digital assets.

    Select scripts
        Houdini lets you run a custom script when the user selects a
        particular object in the viewer. Set the object's Select script
        parameter (on the Misc tab). The value of the parameter is
        interpreted as HScript, however you can also choose to call an
        external script file. Houdini runs this script when you select
        the object in the viewer with the Select or Pose tools. It does
        not run when you select the node in the network editor, or
        select the object as part of using another tool.

        Possible uses for this feature include creating user interfaces
        (such as "switch" or "button" objects that change things in the
        scene when you click them) and debugging (using message to pop
        up information about an object when you select it).

        Houdini runs the script in the context of the object that was
        selected. Use opcf .. to go up to the network level in which the
        selected object lives. One very useful trick is to use the opset
        command to set the properties (such as the display flag) of
        other objects when you click an object. For example, you can
        create a simple interface where clicking an "on" Null turns
        makes a group of objects visible, and clicking an "off" Null
        turns the objects invisible.

        Houdini makes these variables available to the select script.
        You can use them to modify the behavior of the script. To see
        the the value of these variables for a given object, you can use
        the message command in a selection script. For example, if you
        put the following script in the Select script parameter of an
        object:

      > message $SELECT_NAME

        ...when you select the object, Houdini will pop up a window
        showing the object's name.


        SELECT_NAME
            The name of the selected object. SELECT_PATH The path to the
            selected object.

        SELECT_SHIFT, SELECT_ALT, SELECT_CTRL
            When these variables are set to 1 it means the corresponding
            modifier key was held down when the user selected the
            object.

        SELECT_MOVE
            Normally, a select script on an object prevents you from
            dragging the object directly (you must select the object,
            which triggers the script, then drag a handle). Unset this
            variable to allow the user to drag the object directly while
            still executing the selection script.

        SELECT_PICK
            Unset this variable to make this node become not selected.

        To unset a variable, use set -u <varname>.

EXAMPLE SCRIPT

    You can also take a look at the scripts included with Houdini for
    examples of real-world HScript.

  > # Script for a guessing game (guess.cmd)
  > 
  > # First, get a random seed
  > 
  > set foo = `system(date)`
  > set seed = `substr($foo, 14, 2)``substr($foo, 17, 2)`
  > 
  > # Then, pick a random number
  > 
  > set num = `int(rand($seed)*100)+1`
  > 
  > set guess = -1
  > echo Guess a random number between 1 and 100.
  > 
  > while ( "$guess" != "$num" )
  >     echo -n Enter guess (q to quit): "
  >     read guess
  > 
  >     if ( "$guess" == q || "$guess" == "") then
  >         break;
  >     endif
  > 
  >     # Convert to a number
  >     set iguess = `atof($guess)`
  > 
  >     if ( $iguess &lt; $num ) then
  >         echo Too low
  >     else if ( $iguess > $num ) then
  >         echo Too high
  >     else
  >         echo Spot on!
  >     endif
  > end
  > 
  > echo The number was $num

USEFUL SCRIPTS INCLUDED WITH HOUDINI


    123.cmd
        Run when Houdini FX starts up. houdinicore.cmd (formerly
        hescape.cmd) serves a similar purpose for Houdini Core. See
        event scripts.

    defaultscene.cmd


    fixnodename.cmd
        Performs prefix and suffix substitution on node names.

        Type fixnodename in the textport with no arguments to see its
        usage.

    pickandcenter.cmd
        Takes an object name as an argument and centers that object in
        the viewer. This is intended to be run whenever you select a
        particular object. Use pickandcenter $OS as the selection script
        to call this script on the object you selected.

    traverse.cmd
        Takes the name of a command as an argument, and recursively
        calls that command on every node and sub-node.

    uniquename.cmd
        Takes a base object name and a variable name as arguments, and
        sets the named variable to a name (constructed from the base
        object name plus a number) which is guaranteed to be unique at
        the time the command is called. You can also use the -v flag of
        the opadd command to get the name of a node after you create it.

CALL HOST SYSTEM COMMANDS

    Use the ucd and unix commands to start the language's runtime as an
    external process.

    Houdini passes any global HScript variables to the external process
    as environment variables, and sets the status variable to the exit
    code of the command.

    Houdini includes dedicated HScript commands to call typical host
    system commands, such as uls to list the contents of a directory,
    urm to remove a file, and upwd to print the current directory. To
    make your code portable to non-UNIX systems such as Windows, use
    these HScript commands instead of explicitly calling the equivalent
    UNIX utility (ls, rm, pwd, etc.).

    Change the current directory
    ucd
    Print the current directory
    upwd
    List the contents of a directory
    uls
    Create a new directory
    umkdir
    Remove a file
    urm
    Start a host system command
    unix

HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

    Viewers have names with the form "desk.pane.type", where:

  * desk = The name of the desk containing the viewer pane.

  * pane = The name of the viewer pane.

  * type = "world", "particle", or "texture", depending on the contents
    of the pane.

    To see a list of all viewers, use "viewls -n". For most viewer-
    related commands, you can specify more than one viewer at a time,
    and/or use wildcards in viewer names.

    A viewer can be subdivided into up to four viewports (such as top,
    left, front, and perspective). Viewports have names with the form
    "desk.pane.type.viewport", where:

  * desk = The name of the desk containing the viewer pane.

  * pane = The name of the viewer pane.

  * type = "world", "particle", or "texture", depending on the contents
    of the pane.

  * viewport = The name of the viewport within the viewer pane. You can
    change the name of a viewport in the viewport's display options
    editor. To list all viewports, use "viewls -n -v" (to show what
    viewer each viewport is in, just use "viewls -v").

    For most viewport-related commands, you can specify more than one
    viewer at a time, and/or use wildcards in viewer names. You can also
    use the name of a viewer to refer to all viewports in the viewer.
    For example instead of "viewcamera -c cam1
    Build.panetab1.world.persp1 Build.panetab1.world.top1 ...", you
    could do "viewcamera -c cam1 Build.panetab1.world.*" or just
    "viewcamera -c cam1 Build.panetab1.world".

    Most viewport-related commands work on view-memories as well as
    viewports. View-memories have the format "desk.pane.type:memory",
    where memory is a number from 1-9 or a name. The first three
    components (desk name, pane name, type) can have wildcards. To list
    all view-memories, use viewls -n -l.

    The viewlayout command controls the number and layout of viewports
    in a viewer pane.

HSCRIPT TIPS AND TRICKS

  * Use commandecho on to make Houdini print the HScript commands it
    executes internally in the textport.

  * Maximum line length for a Houdini command is 8 KB after all
    expansions.

  * Maximum number of arguments on a command line is 1024.

  * Maximum number of number of nested if statements in a single source
    file is 128.

  * Maximum number of source files is limited by the system limit on
    open files.

  * No limit for nested loops.

alias

    Creates an alias for a command or sequence of commands.

    USAGES
      alias <alias> <command>
      alias -u <alias>
      alias -s

    OPTIONS


        -s
            Prints current aliases in a form useful for sourcing into
            script files.

        -u <alias>
            Unsets the given alias.

    EXAMPLES

      > alias ls opls
      > alias -u ls
      > alias -s

appendseq

    Appends a series of files to the current sequence in mplay.

    USAGE
      appendseq [-u] [-f <start> <end>] <filepattern>

    The sequence length is extended by the number of images loaded.


    NOTE
        This command is only available in MPlay.

    OPTIONS


        -u
            Load the sequence unbuffered. Images will not be cached.

        -f <start> <end>
            Load the sequence using the given start and end frames.

    EXAMPLES

      > appendseq ~/shot1/frame\$F.pic
      > appendseq -u ~/shot1/frame*.pic

    RELATED

      * loadseq

      * prependseq

atjob

    Execute commands at a future time.

    USAGES
      atjob [-p] <seconds> <command>
      atjob -l
      atjob -r <id> [<id2> ...]
      atjob -r all

    atjob schedules a command to be run <n> number of seconds from now,
    or every <n> seconds.


    NOTE
        Jobs only work correctly inside graphical applications.

    NOTE
        The job runs at the application's first opportunity. If the
        application is very busy (for example, rendering), the job is
        not guaranteed to run on time.

    OPTIONS


        -p
            Periodic: run the command repeatedly at the given interval.

        -l
            Print all pending jobs.

        -r <id> [<id2> ...]
            Remove a pending job (prevent it from running). You can
            specify the ID of a pending job.

        -r all
            Remove all pending jobs.

    EXAMPLES

      > atjob 300 mwrite -i
        Run "write -i" in 300 seconds (5 minutes).

      > atjob -p 10 mwrite -i

        Run "mwrite -i" every 10 seconds.

audiopanel

    REPLACED BY
      - hou.audio

    Changes parameters of the audio pane.

    USAGE
      audiopanel [-s | -t | -o] [-m <mode>] [-a <audiofile>] [-f
      <audioframe>] [-O <audiooffset>]


    NOTE
        If you run audiopanel with no arguments, the current settings
        are printed.

    OPTIONS


        -s o <name>
            Sets the CHOP menu.

        -s r on|off
            Sets scrub repeat on or off.

        -s s <value>
            Sets the scrub sustain value.

        -s f <frequency>
            Sets the scrub rate value.

        -t p <reverse|stop|play>
            Sets the test play direction.

        -t l on|off
            Sets test looping on or off.

        -t r on|off
            Sets test rewind on or off.

        -o m on|off
            Sets mono on or off.

        -o t on|off
            Sets volume tied on or off.

        -o u on|off
            Sets meter on or off.

        -o l <value>
            Sets the left volume.

        -o r <value>
            Sets the right volume.

        -o d 0
            Turn off audio.

        -o d 1
            Time line mode.

        -o d 2
            Time slice mode.

        -o d 3
            Test mode.

        -m [0|1]
            Selects the input source: 0 for CHOPs, 1 for Audio files.

        -a <filename>
            Sets the audio file to <filename>

        -f <audio frame>
            Sets the frame to sync the audio to. The audio offset is
            synchronized to this frame.

        -O <audio offset>
            Sets the offset, in seconds, from the the beginning of the
            audio file to the audio frame.

autosave

    Enables/disables auto saving.

    USAGE
      autosave on|off

    Turn auto save on to periodically save a copy of the current file.
    The interval between saves and other options are set in the Save
    Options section of the Houdini Preferences window.

    This command is not available in hscript.

bonealigncapture

    Aligns the capture and animation (deform) regions.

    USAGE
      bonealigncapture [-b | -c] <bone_objects>

    Sets either capture or animation parameters of bones and their
    capture regions.

    The default usage (without -c parameter) will align the animation
    (deform) region with the capture region. It will reset capture
    regions of an animation bone setup to match that of a capture setup.
    It clears any distortions of captured geometry (skin) caused by the
    change of bone position or orientation.

    This command is useful during a rigging process. After the geometry
    has been captured any change in bone position is treated as
    animation. However during the rigging process, joints are often
    shifted and adjusted to improve animation. Changing a joint position
    will cause deformation of the captured geometry, which is not
    desirable. To reset any deformations of the geometry run this
    command on the bones whose position or orientation has been
    modified.

    OPTIONS


        -b
            Matches the bone transforms with the capture pose for
            aligning the animation with the capture pose. When there are
            no options specified, this command does the same alignment
            by modifying the Rig Adjustment parameters on the Capture
            Region nodes inside the bones instead.

        -c
            Sets the capture parameters of bones and their capture
            regions so the capture region is aligned with the current
            non-capture (animation or deform) location of the region. If
            this option is not specified, the command aligns the
            animation pose with capture pose.

    EXAMPLES

      > bonealigncapture /obj/bone1 /obj/bone2
        Resets the distortion of the captured object after bone1 and
        bone2 have been moved.

      > bonealigncapture /obj/bone_chain*

        Resets the capture regions to the capture configuration (for the
        whole bone chain).

      > bonealigncapture -c /obj/chain_bone*

        Sets capture parameters of all bones in a chain to match their
        corresponding animation setup.

      > bonealigncapture -c *bone*

        Sets capture parameters on all bones (for example, to bring
        capture parameters up to date for old hip file in order to use
        new capture system).

boneconvert

    Updates bones from old Houdini 4 hip files.

    USAGE
      boneconvert [-r | -m] [-x] [-t] [-s] [-g]


    NOTE
        To convert bones created in hip files prior to Houdini 4, use
        the kinconvert command first, and then this command.

    The conversions currently performed are:

  * All bones which have lock channels in their translate parameters are
    removed and replaced with a locked parameter with values of 0
    instead. To force this conversion, use the -t option.

  * The Top Cap and Bottom parameters in the cregion SOP of bone objects
    have their multiplication factor removed and multiplied into the
    values of the object-level cregion parameters. This will only be
    performed if the object-level cregion parameters have no channels.
    To deal with special cases, please see the options described below.

  * All bone objects have their xray flag turned on. Use the -x option
    to avoid doing this conversion.

  * Adds the command "bonefixchops $OPSUBNAME" to the delete script.

  * The scale parameters should all be 1 and be locked. To force this
    conversion use -s.

  * The bone geometry is updated to the current system. To force this
    conversion use -g.

  * The Kinematic Solver parameter is filled with the path of the CHOP
    overridding its rotate parameter.

    OPTIONS


        -r
            Forces the conversion of the cregion SOP parameters even if
            the object-level cregion parameters already have channels.
            This option is useful if you have channel references in the
            object-level parameters that mirror other capture regions.
            The cregion SOP parameters are forced to be correct without
            interpretation of the parameter.

        -m
            only forces the conversion of the cregion SOP parameters
            like -r, but it will also attempt to add the multiplication
            factor if the object-level parameters have channels on them.
            This option will not have different behavior if the object-
            level cregion parameters do not have channels. It will also
            fail to add the multiplication factor if the cregion SOP
            parameters do not have an expression of the form
            <number>*<expression>.

bonefixchops

    Cleans up any references to a bone in InverseKin CHOPs before you
    delete the bone.

    USAGE
      bonefixchops [-r] <boneObject>

    If an InverseKin CHOP is using an Inverse Kinematics solver on a
    bone chain from bone1 to bone4, and you execute "bonefixchops
    bone4", this CHOP will be changed to apply its solver to the chain
    from bone1 to bone3. If you have an InverseKin CHOP that is using an
    Inverse Kinematics solver on bone1 only, and you execute
    "bonefixchops bone1", the CHOP will be deleted.

    This command is used in the default delete script of bone objects.

    OPTIONS


        -r
            Recursively deletes all outputs of the found InverseKin
            CHOPs as well.

bonemoveend

    Adjusts the length and angles of the given bone object so that the
    bone would end at the given position in the rest chain.

    USAGE
      bonemoveend [-o] [-f world|parent] [-x <xpos>] [-y <ypos>] [-z
      <zpos>] <boneObject>

    OPTIONS


        -o
            Set only the rest angles.

bookmark

    REPLACED BY
      - hou.PathBasedPaneTab

    Add, list, or remove bookmarks.

    USAGES
      bookmark -a <path>
      bookmark -l
      bookmark -r <path_pattern>

    OPTIONS


        -a <path>
            Add the path to the bookmarks.

        -l
            List current bookmarks.

        -r <path_pattern>
            Remove a path or paths from the bookmarks. Wildcards such as
            *, ?, and [] are valid.

break

    Breaks out of the current loop.

    USAGE
      break [<levels>]


    NOTE
        You can optionally specify the number of parent loops to break
        out of.

bundlelist

    Allows different options of a bundle list pane to be set.

    USAGE
      bundlelist [-G <fraction>] [-g <on_off>] [-p <on_off>] <pane1>
      [<pane2> ...]

    A valid pane name must be specified. If no desk name is given then
    it will assume the current desk.

    OPTIONS


        -d <string>
            Desktops to operate on. If it is blank it will default to
            the current desktop

        -G <float>
            The horizontal fraction of the pane taken by the bundle list

        -g <on_off>
            If on_off is 0, the guessing of the bundle filter based on
            the first operator added is disabled. Otherwise, the bundle
            filter is set automatically to the filter that best matches
            the first set of operators added to the bundle.

        -p <on_off>
            If on_off is 1, then full operator paths are displayed in
            the bundle contents list. Otherwise, only operator names are
            displayed. The default value is 0.

chadd

    REPLACED BY
      - hou.Parm

    Adds channels to the objects specified.

    USAGES
      chadd <object> <name1> [<name2> ...]
      chadd -f <fstart> <fend> <object> <name1> [<name2> ...]
      chadd -t <tstart> <tend> <object> <name1> [<name2> ...]

    Specify the object(s) to add channels to (wildcards such as *, ?,
    and [] are valid) and the names of the channels to add.

    By default, the channels will have a single key at the start of
    animation. By specifying a frame (or time) range, the initial
    segment will use the given range.

    NOTE: A channel with a single key evaluates according to expression,
    everywhere

    NOTE: To add spare channels, use the new opspare command for more
    control over the parameter formatting.

    OPTIONS


        -f <fstart> <fend>
            The initial segment uses the frame range from <fstart> to
            <fend>.

        -t <tstart> <tend>
            The initial segment uses the time range from <tstart> to
            <tend>.

    EXAMPLES

      > chadd geo* tx ty tz spare1
        Add tx, ty, tz, and spare1 channels to all objects matching
        "geo*".

    RELATED

      * opspare

chalias

    REPLACED BY
      - hou.Node.parmAliases()
      - hou.Node.clearParmAliases()
      - hou.Parm

    Create an alias for a channel name.

    USAGES
      chalias <channel> <alias>
      chalias [-r] [<channel_name> | <node_name>]
      chalias -e [<channel_name> | <node_name>]

    Gives a channel another name by which it can be referenced. The
    original name is still valid and can be used in expressions.

    If you specify only a channel name, the command lists any aliases on
    the channel. If you specify only a node name, the command lists any
    aliases on any of the node's channels.

    OPTIONS


        -r
            Recursively list the aliases of channels on <node_name> and
            its children.

        -e [<channel_name> | <node_name>]
            Erase aliases. If a channel name is given, the command
            erases any aliases on the channel. If a node name is given,
            the command erases any aliases on any of the node's
            channels.

    EXAMPLES

      > chalias /obj/model/tx translate_x
        Creates an alias named "translate_x" for /obj/model/tx so that
        it may be referred to as /obj/model/translate_x.

      > chalias /obj/model/tx

        Lists any aliases on /obj/model/tx.

      > chalias -e /obj/model

        Erases the aliases on all the channels of /obj/model.

animeditor

    REPLACED BY
      - hou.ChannelEditorPane
      - hou.ChannelGraph

    Sets various options of the animation editor.

    USAGE
      animeditor [options] [-d <desktop>] <pane1> ...


    NOTE
        You must specify a valid pane name. If you don't specify a desk
        name, the command uses the current desk.

    OPTIONS


        -d <desktop>
            The name of the desk to change. If not specified, uses the
            current desk.

        -m 0|1|2
            Sets editor mode (0 = graph, 1 = spreadsheet, 2 =
            dopesheet).

        -s <pattern>
            Sets scope filter (e.g. *, t?, tx,ty,rx)

        -h <float> <float>
            Sets the horizontal range.

        -i <float> <float>
            Sets the maximum horizontal range.

        -a 0|1
            Value handle on/off

        -c 0|1
            Time mark handle on/off

        -e 0|1
            Time group handle on/off

        -f 0|1
            Slope handle on/off

        -g 0|1
            Segment handle on/off

        -j 0|1
            Scale handle on/off

        -k <string>
            Sets default segment function value.

        -l 0|1|2|3|4
            Sets grid detail level.

        -n 0|1
            Long names on/off

        -o 0|1
            Snap to frame on/off

        -p 0|1
            Enable Channel Snapshots on/off

        -q 0|1
            Persistent Channel Snapshots on/off

        -r 0|1
            Show attached time groups on/off

        -D <float>
            Dopesheet split function

        -F 0|1
            Dopesheet force keys on/off

        -t <pattern>
            Sets template filter (e.g. *, t?, r?s?)

        -u <float>
            Sets handle scale.

        -v 0|1
            Vertical adapt on/off

        -w 0|1
            Minimized scale handle tools on/off

        -x 0|1
            Minimized channel tools on/off

        -y 0|1
            Minimized range gadget on/off

        -z 0|1
            Minimized function gadget on/off

        -G 0|t|x|p
            Sets channel chooser mode (0 = hidden, t = tree view only, x
            = channel groups, p = parameter list).

        -E <float>
            Sets channel list split fraction.

chanlist

    REPLACED BY
      - hou.ChannelEditorPane

    Sets various options of the channel list.

    USAGE
      chanlist [options] <pane1> ...


    NOTE
        You must specify a valid pane name.

    OPTIONS


        -G <float>
            The split fraction for group and tree gadgets.

        -P <float>
            The split fraction for parameter list gadget.

        -x 0|1
            Toggles the display of the channel groups gadget.

        -k 0|1
            Toggles the display of the channel group keys.

        -p 0|1
            Toggles the display of the parameter list gadget.

        -t 0|1
            Toggles the display of the channel tree gadget.

chautoscope

    REPLACED BY
      - hou.Parm
      - hou.ParmTuple.setAutoscope()

    Changes autoscope property of parameters (automatically scope when
    object is selected).

    USAGES
      chautoscope <node_path> [+|-]<parameter> ...
      chautoscope -d [-u] <node_path> [<parameter>] ...

    This command can be used turn autoscoping on or off for parameters.
    Prefix the parameter pattern with a + to turn autoscope on for the
    parameter, or - to turn it off for the parameter.

    OPTIONS


        -d
            Prints the chautoscope command for the given parameters. If
            no parameters are given, prints the chautoscope command for
            the entire node.

        -u
            Normally, the -d option with no parameters given will print
            the parameters with the autoscope flag set. This option
            prints the parameters with the flag unset. It is only valid
            with the -d option and no parameters specified.

        -q
            Quiet mode suppresses error and warning messages.

    EXAMPLES

      > chautoscope /obj/model +t?
        Turn autoscope on for all translate parameters on the /obj/model
        object.

      > chautoscope /obj/model +rx +ry

        Turn autoscope on for the rx and ry parameters on the /obj/model
        object.

      > chautoscope /obj/model -r?

        Turn autoscope off for all the rotate parameters in the
        /obj/model object.

      > chautoscope /obj/model -*

        Turn autoscope off for all parameters in the /obj/model object.

      > chautoscope -d /obj/model

        Prints the chautoscope command for /obj/model.

    RELATED

      * chlock

      * chlock

chautoselect

    Changes autoselect property of parameters (automatically select in
    channel list when object is selected).

    USAGES
      chautoselect <node_path> [+|-]<parameter> ...
      chautoselect -d [-u] <node_path> [<parameter>] ...

    This command can be used turn autoselect on or off for parameters.
    Prefix the parameter pattern with a + to turn autoscope on for the
    parameter, or - to turn it off for the parameter.

    OPTIONS


        -d
            Prints the chautoselect command for the given parameters. If
            no parameters are given, prints the chautoselect command for
            the entire node.

        -u
            Normally, the -d option with no parameters given will print
            the parameters with the autoscope flag set. This option
            prints the parameters with the flag unset. It is only valid
            with the -d option and no parameters specified.

        -q
            Quiet mode suppresses error and warning messages.

    EXAMPLES

      > chautoselect /obj/model +t?
        Turn autoselect on for all translate parameters on the
        /obj/model object.

      > chautoselect /obj/model +rx +ry

        Turn autoselect on for the rx and ry parameters on the
        /obj/model object.

      > chautoselect /obj/model -r?

        Turn autoselect off for all the rotate parameters in the
        /obj/model object.

      > chautoselect /obj/model -*

        Turn autoselect off for all parameters in the /obj/model object.

      > chautoselect -d /obj/model

        Prints the chautoselect command for /obj/model.

    RELATED

      * chlock

      * chlock

chblockbegin

    Signals the start of a block of chadd/chkey commands in a script
    file.

    USAGE
      chblockbegin

    Nesting chadd/chkey commands inside a chblockbegin/chblockend block
    makes the commands much faster by deferring even propagation until
    the end of the block, then sending all events at once.

    This command can only be used when sourcing in a script file. Calls
    can be nested, but each chblockbegin command must have a
    corresponding chblockend command.

    You should only use chadd and chkey commands inside a
    chblockbegin/chblockend block. Otherwise dependencies may not be
    properly maintained.

    RELATED

      * chblockend

      * chadd

      * chkey

      * source

chblockend

    Signals the end of a block of chadd/chkey commands in a script file.

    USAGE
      chblockend

    RELATED

      * chblockbegin

      * chadd

      * chkey

      * source

chcommit

    Commits pending key changes.

    USAGE
      chcommit [-l] [-p] [-s | -g] [<channel_patterns>]

    Executing this command is equivalent to manually clicking the red
    keyframe button.

    The channels considered are those governed by the main animation
    setting. Depending on the setting, either all scoped channels are
    considered, or only those which have pending changes. You can
    explicitly speicfy one or the other with the -s and -g options.

    OPTIONS


        -l
            List affected channels without committing them. This lets
            you preview the effects of the command.

        -p
            Key all parameters of the considered channels.

        -s
            Commit scoped channels.

        -g
            Commit pending channels.

        <channel_patterns>
            Only commit channels which match the pattern.

    RELATED

      * chhold

chcp

    Copies the contents of one channel to another.

    USAGE
      chcp <source_channel> <destination_channel>


    NOTE
        If the destination channel already exists, its contents are
        deleted first.

chgadd

    Creates one or more channel groups.

    USAGE
      chgadd <name1> [<name2> ...]

    RELATED

      * chgls

      * chgrm

      * chgpopulate

chgls

    Lists channel groups.

    USAGE
      chgls [-g] [-l] [pattern...]

    OPTIONS


        -g
            Format output as hscript commands. This can be used to
            create scripts.

        -l
            List the contents of the channel group as well. If you
            specify a pattern, only groups that match the pattern are
            listed.

    RELATED

      * chgadd

      * chgrm

chgop

    Sets the contents of a channel group.

    USAGE
      chgop <group_name> set|add|remove <pattern1> [<pattern2> ...]

    Use this command to set the contents of a group to all channels that
    match a given set of patterns, or add or remove matching channels
    from a group.

    OPTIONS


        set <pattern1> [<pattern2> ...]
            Sets the contents of the group to channels matching the
            given patterns.

        add <pattern1> [<pattern2> ...]
            Adds channels matching the given patterns to the group.

        remove <pattern1> [<pattern2> ...]
            Removes channels matching the given patterns from the group.

    EXAMPLES

      > chgop group1 set /o*/g*/r?
        Set group contents to channels

      > chgop group1 add /o*/g*/t?

        Add channels to group1

      > chgop group1 remove /o*/g*/tx

        Remove tx channels from group1

    RELATED

      * chgpopulate

chgpopulate

    Populates a channel group with a node's channels.

    USAGE
      chgpopulate [-c] [-f] [-g <group_name>] [-l] <node_path>

    Use this command to populate a channel group with a node's channels.
    This command also allows you to create nested channel groups
    corresponding to parameter folders.

    OPTIONS


        -g <group_name>
            An optional group name can be specified. If this option is
            not specified the group name will be derived from the node
            name. If the group already exists, any channels or subgroups
            will be added to it.

        -c
            Add only parameters with live channels.

        -u
            Add only unlocked parameters.

        -f
            Create nested channel groups from parameter folders.

        -l
            Only create channels in groups without child groups. Groups
            with child groups and channels will be modified to include
            an additional child group with the parent's channels.

    EXAMPLES

      > chgpopulate -c /obj/model
        Create a channel group called <model> and add parameters with
        channels to it.

      > chgpopulate -f /obj/model

        Create a channel group called <model>, create subgroups derived
        from the names of <model>'s parameter folders and add the
        channels to their corresponding groups.

    RELATED

      * chgadd

      * chgop

      * chgrm

chgrm

    Removes channel groups

    USAGE
      chgrm <pattern1> [<pattern2> ...]

    RELATED

      * chgadd

      * chgls

chhold

    Puts channels into "hold" or "pending" state.

    USAGES
      chhold [-b | -e] <channel_patterns>
      chhold [-s] [-l]

    You can use this with the chcommit to force the creation of keys.

    OPTIONS


        -b <channel_patterns>
            (Begin) Set the hold status of the given channels so that
            they remain in a "pending" state even if time changes.

        -e [<channel_patterns>]
            (End) Releases held channels. If no pattern is given,
            releases all channels.

        -s
            Prints the current hold status.

        -l
            Lists currently held channels.

    RELATED

      * chcommit

      * tcur

      * fcur

chkey

    REPLACED BY
      - hou.BaseKeyframe
      - hou.Keyframe
      - hou.Parm

    Edits or inserts a key.

    USAGE
      chkey [-f <frame>] [-t <time>] [-v <lvalue>] [-m <lslope>] [-a
      <laccel>] [-V <rvalue>] [-M <rslope>] [-A <raccel>] [-T <tielist>]
      [-F <function>] [-o <autolist>] <channel_patterns>

    If a key exists at the frame/time specified, then the values for
    that key will be modified. Otherwise a key will be set.

    If both the left and right values are specified, the key will be
    untied at the point and the values altered independently. Otherwise,
    the effect depends on the tied state of the key.

    The channel pattern specifies which channels will be affected by the
    command.


    NOTE
        The expression function should usually be protected by '' to
        prevent any expansion of its contents. In the first example, the
        () would be expanded to give a syntax error on the command.

    OPTIONS


        -v <lvalue>
            The value entering the key.

        -m <lslope>
            The slope entering the key.

        -a <laccel>
            The acceleration entering the key.

        -V <lvalue>
            The value leaving the key.

        -M <lslope>
            The slope leaving the key.

        -A <laccel>
            The acceleration leaving the key.

        -T <tielist>
            Ties the options specified in the <tielist>, which is a list
            of characters ("amvAMV") corresponding to the accel, slope,
            and value in and out options. Both the right and left
            settings will be locked together.

        -F <function>
            The expression function for the segment following the key.

        -o <autolist>
            Sets the automatic flag on the options specified in the
            <autolist>, which is a list of characters ("amvAMV")
            corresponding to the accel, slope, and value in and out
            options.

    EXAMPLES

      > chkey -f 1 -v 3 -F 'cubic()' geo*/t?
        Sets the value to 3 and expression function to cubic() for all
        channels matching geo*/t?.

chkeyget

    REPLACED BY
      - hou.Parm

    Samples channels at given times and returns key information.

    USAGE
      chkeyget [-q] [-e] [-t] [-s | -S | [-f] [-v] [-V] [-m] [-M] [-a]
      [-A]] <channel_patterns> <times_or_frames>


    NOTE
        Partial key information options can be used together.

    NOTE
        <times_or_frames> can be a list of times or frames as specified
        by the -t or -f flags. The default is frames.

    OPTIONS


        -q
            Quiet mode. Don't report any errors.

        -e
            Only display the times at either end of the range.

        -t
            Times are specified in seconds, instead of frames (frames
            are the default), and the values returned are in seconds
            instead of frames.

        -s
            Prints out hscript "chkey" commands instead of key times.
            This is the default.

        -S
            Same as -s, except the chkey commands do not omit, which
            might make the output easier to parse.

        -v
            Print partial key information: the value entering the key.

        -V
            Print partial key information: the value leaving the key.

        -m
            Print partial key information: the slope entering the key.

        -M
            Print partial key information: the slope leaving the key.

        -a
            Print partial key information: the acceleration entering the
            key.

        -A
            Print partial key information: the acceleration leaving the
            key.

        -f
            Print partial key information: the frame of each key. Time
            is used if -f is combined with -t.

    RELATED

      * chkey

      * chkeyls

chkeyls

    REPLACED BY
      - hou.BaseKeyframe
      - hou.Keyframe
      - hou.Parm

    List key times for channels.

    USAGES
      chkeyls [-q] [-e] [-t] [-s | -S | [-f] [-v] [-V] [-m] [-M] [-a]
      [-A]] <channel_patterns>
      chkeyls [-q] [-e] [-t] [-s | -S | [-f] [-v] [-V] [-m] [-M] [-a]
      [-A]] <channel_patterns> [<frame>] ...
      chkeyls [-q] [-e] [-t] [-s | -S | [-f] [-v] [-V] [-m] [-M] [-a]
      [-A]] -r <channel_patterns> [<from> <to>] ...

    Lists key times for specific channels that are within ranges or at
    frames. If no ranges or times are given, then the entire channel
    range is taken as the range.


    NOTE
        Partial key information options can be used together.

    OPTIONS


        -q
            Quite mode. Don't report any errors.

        -e
            Only display the times at either end of the range.

        -t
            Times are specified in seconds, instead of frames (frames
            are the default), and the values returned are in seconds
            instead of frames.

        -s
            Prints out hscript "chkey" commands instead of key times.

        -S
            Same as -s, except the chkey commands do not omit, which
            might make the output easier to parse.

        -v
            Print partial key information: the value entering the key.

        -V
            Print partial key information: the value leaving the key.

        -m
            Print partial key information: the slope entering the key.

        -M
            Print partial key information: the slope leaving the key.

        -a
            Print partial key information: the acceleration entering the
            key.

        -A
            Print partial key information: the acceleration leaving the
            key.

        -f
            Print partial key information: the frame of each key. Time
            is used if -f is combined with -t. This is the default.

    RELATED

      * chkey

      * chkeyget

chkeymv

    Moves keys in channels to different frames/times

    USAGES
      chkeymv [-q] [-t] [-s] [-c] <channel_patterns> <from> <to> [<from>
      <to> ...]
      chkeymv -r [-q] [-t] [-s] [-c] <channel_patterns> <from_start>
      <from_end> <to_start> <to_end> [<from_start> <from_end> <to_start>
      <to_end> ...]

    Moves keys in the specified channels to different frames/times. A
    key within a channel is specified by its time or frame. Each key
    specified must have a new target time or frame.

    OPTIONS


        -r <from_start> <from_end> <to_start> <to_end>
            from/to are ranges instead of exact times

        -q
            Quiet mode. Don't report any errors, such as 'no key at
            {time} for channel {chan}.

        -t
            from/to times are specified in seconds, instead of frames
            (frames are the default).

        -s
            snap resulting range to nearest frame.

        -c
            copy instead of moving

    EXAMPLES

      > chkeymv /obj/mode1/t[xyz] 1 10
        Move a key at frame 1 to frame 10 for /obj/mode1 translates.

      > chkeymv /obj/mode1/t[xyz] /obj/mode1/r[xyz] 1 10 4 12 10 20

        Move several keys (1, 4, 10) to (10, 12, 20) for the given
        channels

      > chkeymv -r /obj/mode1/* 1 100 201 300

        Shift over all the keys between frames 1 and 100, 200 frames
        over

      > chkeymv -t -r /obj/mode1/* 0 10 20 0

        Reverse and stretch by a factor of two, ten seconds of
        animation.

chkeyrm

    Removes keys in the specified channels at different frames/times

    USAGES
      chkeyrm [-q] [-t] <channel_patterns> <frame> [<frame>...]
      chkeyrm -r [-q] [-t] <channel_patterns> <range_start> <range_end>
      [<range_start> <range_end> ...]

    OPTIONS


        -r <range_start> <range_end> [<range_start> <range_end> ...]
            use ranges instead of exact times

        -q
            Quiet mode. Don't report any errors, such as 'no key at
            {time} for channel {chan}'.

        -t
            times are specified in seconds, instead of frames (frames
            are the default).

    EXAMPLES

      > chkeyrm /obj/mode1/* 1
        Remove a key at frame 1

      > chkeyrm -r /obj/mode1/* 1 300

        Remove the keys between frames 1 and 300 inclusive

chlock

    REPLACED BY
      - hou.Parm
      - hou.ParmTuple.lock()

    Locks parameters so they can't be modified.

    USAGES
      chlock <node_path> [+|-]<parameter> ...
      chlock -d [-u] [-q] <node_path> [<parameter>] ...

    This command can be used either to lock or unlock parameters. Prefix
    the parameter pattern with a + to lock the parameter, or - to unlock
    the parameter.

    OPTIONS


        -d
            Prints the chlock command for the given parameters. If no
            parameters are given, prints the chlock command for the
            entire node.

        -u
            Normally, the -d option with no parameters given will print
            the locked parameters. This option prints the unlocked
            parameters. It is only valid with the -d option and no
            parameters specified.

        -q
            Quiet mode suppresses error and warning messages.

    EXAMPLES

      > chlock /obj/model +t?
        Locks all the translate parameters on the /obj/model object.

      > chlock /obj/model +rx +ry

        Locks the rx and ry parameters on the /obj/model object.

      > chlock /obj/model -r?

        Unlocks all the rotate parameters in the /obj/model object.

      > chlock /obj/model -*

        Unlocks all parameters in the /obj/model object.

      > chlock -d /obj/model

        Prints the chlock command for /obj/model.

    RELATED

      * chautoscope

      * chautoselect

chls

    REPLACED BY
      - hou.Node.globParms()

    Lists channels.

    USAGE
      chls [-l[v]|[-q]|a] [<pattern>]

    You can specify a node or channel path pattern to list sets of
    channels. If no pattern is given, the command lists the current
    node's channels.

    OPTIONS


        -l
            List keys also.

        -v
            Verbose listing of keys.

        -a
            List all channels (including non-animated channels). If this
            option is not specified, only animated channels are listed.
            You cannot use this option with a path pattern.

        -q
            Suppress extra information when using -a.

    EXAMPLES

      > chls -l geo*/*
      > chls -a geo*

chopexportmap

    Manipulates CHOP export mapping overrides.

    USAGES
      chopexportmap -l [-o] <chop_path> [<track_pattern>]
      chopexportmap -c <chop_path> [<track_pattern>]
      chopexportmap -s <chop_path> <track_name> <overrides...>

    This command manipulates CHOP export mapping overrides. These
    provide a mapping from CHOP tracks and the node parameters that they
    override.


    -l
        This option lists the current mappings. A track pattern can be
        given if only specific tracks are desired. If the -o option is
        also given of this usage, then the opscript friendly version of
        the chop is output instead.

    -c
        This option clears (ie. erases) the mappings for the specified
        track pattern. If no track pattern is given, all mappings are
        cleared.

    -s
        This option sets the mapping for the given chop and track name.
        <overrides...> is a list of operator patterns that the specified
        track is to override.

    EXAMPLES

      > chopexportmap -l /ch/ch1/wave1
        List all export mappings of the chop /ch/ch1/wave1.

      > chopexportmap -c /ch/ch1/wave1

        Clear all export mappings of the chop /ch/ch1/wave1.

      > chopexportmap -c /ch/ch1/wave1 c*

        Clear export mappings of the chop /ch/ch1/wave1 for tracks that
        begin with the letter c.

      > chopexportmap -s /ch/ch1/wave1 chan1 /obj/model/t?

        Make the chan1 track of the chop /ch/ch1/wave1 override all the
        parameters of /obj/model matching the pattern t?.

chopls

    REPLACED BY
      - hou.ChopNode

    Lists the tracks in a chop operator.

    USAGE
      chopls <operator> [<pattern1>] [<pattern2>...]

    A track pattern can be used to list a set of tracks. If no pattern
    is specified all the tracks for that chop will be listed.

    EXAMPLES

      > chopls /ch/ch1/wave1
      > chopls /ch/ch1/object1 t? r*

chopscope

    Assigns CHOP channels to available viewers by pairing CHOP paths
    with CHOP channels.

    USAGE
      chopscope [<viewer_path> <channel_patterns>]

    The viewer path is specified by the full path of the CHOPNet it is
    looking at, plus the node(s) you want to scope. The channels are
    specified exactly or using wildcards. The first three examples scope
    channels into one CHOP viewer. The last example scopes two CHOPNets
    into two viewers; the ch1/wave1 channels into one viewer and the
    ch2/noise1 channels into another viewer, creating a floating window
    if two CHOP viewers are not currently visible.


    NOTE
        You always need to provide a CHOP node / channel list pair.

    EXAMPLES

      > chopscope /ch/ch1/wave1 chan1
      > chopscope /ch/ch1/noise1 t[xyz]
      > chopscope /ch/ch1/wave1 chan1 /ch/ch1/noise1 t[xyz]
      > chopscope /ch/ch1/wave1 t[xyz] /ch/ch2/noise1 t[xyz]

chopview

    Sets various CHOP viewer options.

    USAGE
      chopview [options] [-d <desktop_name>] <pane1> ...

    OPTIONS


        -d <desktop>
            The name of the desk to change. If not specified, uses the
            current desk.

        -a <int>
            Sets the Notes CHOP index.

        -b <int>
            Sets the number of graphs.

        -B 0|1|2|3
            Sets the graph type (0 = all, 1 = per channel, 2 = per CHOP,
            3 = per name).

        -c <string>
            Graph scope exclusions of the form "CHOP channel CHOP
            channel...".

        -e 0|1
            Extended regions on/off

        -f 0|1
            Frame indicator on/off

        -g 0|1
            Graph disable on/off

        -H 0|1
            Horizontal adapt on/off

        -i 0|1
            Dots on/off

        -j 0|1
            Handles on/off

        -k 0|1
            Scope disable on/off

        -l 0|1|2|3|4
            Sets grid detail level.

        -m 0|1
            Edit raw tools on/off.

        -n 0|1
            Labels on/off

        -o 0|1
            Scope controls on/off

        -h <float> <float>
            Sets graph horizontal start/end range.

        -r <float> <float>
            Sets bar height start/end range.

        -R <float> <float>
            Sets graph height start/end range.

        -s 0|1
            Scroll lock on/off

        -S <float>
            Sets scroll lock position

        -U 0|1|2
            Sets unit (0 = frames, 1 = samples, 2 = seconds).

        -v 0|1
            Sets graph type (0 = graph, 1 = bar)

        -V 0|1
            Vertical adapt on/off

        -y <mode>
            Sets vertical adapt behavior to a preset:


            0
                Auto scale

            1
                0 1

            2
                -1 1

            3
                0 10

            4
                -10 10

            5
                0 100

            6
                -100 100

            7
                -180 180

        -Y <min> <max>
            Sets vertical adapt min and max.

chread

    Reads channel data from a file.

    USAGES
      chread [-f <fstart> <fend> | -o <fstart> | -n]
      <parameter_name_patterns> <chan_or_bchan_filename>
      chread [-f <fstart> <fend> | -o <fstart> | -n] [-r <src_pat>
      <dest_pat>] <chn_or_bchn_filename>
      chread -i [-s] <filename>

  * If the filename ends in .chan or .bchan:

        The specified file is assumed to be a raw channel data file and
        column data from the file will be read and matched with the
        parameters listed in the order specified. For non-animated
        parameters, new channels will be created as needed.

        The -f option gives the frame range to load the data into. Raw
        data will be scaled if the frame range is greater than the
        number of available data frames. Otherwise, no scaling will
        occur.

        Unlike the -f option, the -o option simply gives the starting
        frame for loading the data (no scaling will be done).

        If the -f and -o options are omitted, loading will start at the
        global animation start time.

        If the -n option is specified, any previous animation on a
        channel will be deleted before loading.

  * If the filename ends in .chn or .bchn:

        The specified file is assumed to be a keyframe data channel file
        and loaded into the current hip file.

        The -f option gives the frame range to load the data into. Keys
        will be scaled into the frame range if the file's range does not
        match.

        The -o option gives the starting frame to load the data into (no
        scaling will be done).

        If the -f and -o options are omitted, then the file's frame
        range is used.

        If there are existing channels, then any animation outside the
        frame range will be preserved with keys set at the beginning and
        end of the frame range. If the -n option is specified, then any
        previous animation will be deleted first.

        The -r option allows renaming of channel node paths before the
        channels are loaded from file. In the chwrite command, full
        paths of the nodes are saved out. This option allows the mapping
        of animation from one set of nodes into a different set. This
        renaming function will rename nodes from the data file in the
        same manner as how the Rename CHOP functions.

        For any nodes that do not match the src_pat (source pattern),
        then will be loaded into their original path. Note that if the
        destination node is not found, then loading will stop.

  * If you specify the -i option:

        The command takes specified file (.chn, .bchn, .chan, or .bchan
        extension) and gives information regarding the file. This option
        is similar in output to the command line chinfo program. If the
        optional -s flag is given, the command skips the per segment
        information.


    NOTE
        This command is _not_ undoable.

    RELATED

      * chwrite

      * chadd

      * chkey

      * chls

chrefit

    REPLACED BY
      - hou.Parm

    Refits the channels using cubic interpolation.

    USAGE
      chrefit [-v] [-l] [-r|-R <start> <end>] [-t <tolerance>]
      <channel_patterns>

    Refits the channels using cubic interpolation, deletes keys and
    inserts new ones where appropriate.

    This is useful when a channel has too many keys and needs to be
    simplified by approximating it with a cubic interpolation. This
    command obtains the channel values for each frame and fits curve
    segments through them within a given tolerance.

    The key are inserted at the boundaries of the approximating curve
    segments. If option -l is specified, keys are inserted at the local
    maxima and minima.

    If the range is specified with either -r or -R option, the channel
    is refitted only within this interval. These options can be also
    used to extend the channel length, which is useful for channels that
    contain expressions such as 'sin($F)'.

    OPTIONS


        -v
            Print verbose output.

        -l
            Key local maxima and minima.

        -t <tolerance>
            The tolerance for fitting the existing channel data to the
            new curve. If you don't specify a tolerance, the command
            defaults to 0.01.

        -r <start> <end>
            Defines a time interval within which to refit the channel.

        -R <start> <end>
            Defines a frame range within which to refit the channel.

    EXAMPLES

      > chrefit /obj/model/tx
        Refits tx channel for /obj/model/.

      > chrefit -t 1.0 /obj/model/t?

        Refits all translates (and two-letter channels that start with
        t) with the tolerance of 1.0

      > chrefit -v -t 0.0001 /obj/obj1/*

        Refits all channels in /obj/obj1 with the tolerance of 0.0001
        and requesting the verbose report on the operation

      > chrefit -R 10 20 /obj/obj1/rz

        Refits a rotation around z (rz) channel of obj1 object between
        frame 10 and frame 20

chrename

    Renames a channel.

    USAGE
      chrename <channel_name> <new_name>

    References to the channel are _not_ automatically updated. If a
    parameter channel is renamed, the parameter will no longer reference
    the renamed channel (i.e. the parameter will be de-animated). If a
    spare channel is renamed to a parameter channel, the parameter will
    become animated. Only one channel at a time may be re-named.

    EXAMPLES

      > chrename /obj/geo1/spare1 temperature
      > chrename geo1/tx translate_in_x

    RELATED

      * opchange

chreverse

    REPLACED BY
      - hou.Parm

    Reverse the channel data over a given range.

    USAGE
      chreverse [-f <fstart> <fend> | -t <tstart> <tend>]
      <channel_patterns>

    If you don't specify a frame/time range, the command reverses the
    entire length of the channel(s).

    OPTIONS


        -f <fstart> <fend>
            Frame range to reverse.

        -t <tstart> <tend>
            Time range to reverse.

chrm

    REPLACED BY
      - hou.Parm

    Removes a channel

    USAGE
      chrm channel_patterns

chround

    REPLACED BY
      - hou.BaseKeyframe
      - hou.Parm

    Moves or replaces keys so that they lie on integer frame values.

    USAGES
      chround [-v] [-s|-S|-r|-R] -a
      chround [-v] [-s|-S|-r|-R] channel_patterns

    If you specify a channel pattern, only keys on channels matching the
    pattern will be shifted. Otherwise, use the -a option to shift keys
    on all channels.

    This command is useful after changing the frame rate (FPS) of an
    animation which causes keys at the old frame rate to no longer lie
    on integer frame times at the new frame rate.

    OPTIONS


        -s
            Snap non-integer keys to nearest frame without changing
            values.


            NOTE
                This is the default.

            NOTE
                If many keys snap to a single integer frame, the nearest
                one is snapped. The rest will remain on non-integer
                frames.

        -S
            Like -s, except remove non-integer keys that cannot snap.

        -r
            Insert replacement keys beside non-integer keys, then
            removes non-integer keys.

        -R
            Like -r, except insert keys on either side.


            NOTE
                This will perfectly preserve curve shape for cubics and
                beziers

        -a
            Shift keys on all channels.

        -v
            Print verbose output: print all keys modified with old and
            new key positions.

    RELATED

      * chkey

      * chls

chscope

    REPLACED BY
      - hou.Parm

    Sets the channel scope.

    USAGES
      chscope [-w] [-a] [-A | -C] [-k] [-l] [-c | -e] <channel_patterns>
      chscope [-a] [-f]
      chscope [-z]

    The chscope command will set or modify the channel scope according
    to the patterns specified.

    Patterns may be prefixed by a '+' or ',' character to add channels
    to the current scope or by a '-' to remove channels from the scope.
    No prefix or an '=' character will set the scope to the given
    pattern.


    NOTE
        The results will not be visible if the animation editor is not
        currently open. Use the -w option to open a animation editor if
        it is closed.

    NOTE
        Unlike +' and =, the - character is allowed in node names. It is
        only treated as a special scope prefix at the start of a pattern
        or when immediately preceded by whitespace.

    OPTIONS


        -w
            Open a animation editor if needed.

        -c
            (Collapse) Scope all channel group paths into the dopesheet
            as a single row.

        -e
            (Expand) Scope and expand all channel group paths into the
            dopesheet as separate rows.

        -a
            Allow parameters that don't yet have created channels.

        -f
            Show flag states for each parameter.

        -z
            Clear the channel scope.

        -A
            Exclude animated channels.

        -C
            Exclude constant channels.

        -k
            Include only channels with non-integer keyframes.

        -l
            Scope animation layers related to the scoped channels.

        :

    EXAMPLES

      > chscope tx+ry+sz
      > chscope tx,ry,sz
      > chscope tx ry sz
        The above three are all equivalent.

      > chscope geo1/* -geo1/r?
      > chscope +light1/t?
      > chscope -light1/ty

chstretch

    REPLACED BY
      - hou.Parm

    Stretches out animation on channels.

    USAGE
      chstretch [-f <start> <end> | -t <start> <end>] [-v] -F <nframes>
      | -T <nseconds> <channel_patterns>

    Either the -F or -T option must be specified. If the -f and -t
    options are not specified, the whole channel will be stretched.


    NOTE
        chstretch will push/pull segments that occur after the specified
        time range in order to add or subtract the requested time. To
        preserve the length of the channel an opposite stretch must be
        performed on another part of the channel. Alternatively, chkeymv
        can be used to do channel stretching.

    NOTE
        When specifying a frame range which begins and/or ends between
        integer frames, the segment in which the range boundary falls
        will be stretched.

    OPTIONS


        -F <nframes>
            Number of frames to add.

        -T <nseconds>
            Number of seconds to add.

        -f <start> <end>
            Frame range to stretch.

        -t <start> <end>
            Time range to stretch.

        -v
            Verbose output.

    RELATED

      * chkeymv

chwrite

    Writes channel data out to a .chan or .bchan file.

    USAGES
      chwrite [-f <fstart> <fend>] <channel_patterns>
      <chan_or_bchan_filename>
      chwrite <channel_patterns> <chn_or_bchn_filename>

  * If the filename ends in .chan or .bchan

        Writes out the specified channels as columns of raw values with
        one sample per frame across the given frame range.

        If no range is given the current global animation time range
        will be used. Channels will be output in columns in the order
        specified.

        The output will be saved as ascii data unless the file has a
        suffix of ".bchan", in which case binary format will be used.
        The order of channels resulting from a pattern match is not well
        defined.

  * If the filename ends in .chn or .bchn

        Writes out the specified channels along with their full node
        paths into the specified file as keyframe data. The chread
        command can be used to read these files.


    NOTE
        If you want to save the contents of a CHOP as a bclip, use the
        opsave command.

    RELATED

      * chread

      * chadd

      * chkey

      * chls

      * opsave

clear

    Clears the textport.

    USAGE
      clear

closeport

    Closes a communication port created by the openport command.

    USAGE
      closeport [-i] <port_number>

    OPTIONS


        -i
            Close the port immediately, rather than closing it with a
            message on the even queue. This option is used internally by
            Houdini, you should have no need to use it.

    RELATED

      * openport

cmdread

    Runs the commands in a specified file.

    USAGE
      cmdread [-q] [-v] <filename>

    OPTIONS


        -q
            (Quiet) Suppress warning if the files does not exist.

        -v
            (Verbose) Print each command as it is run.

    RELATED

      * source

colladaimport

    Imports a COLLADA (1.4.0) file.

    USAGE
      colladaimport [-n] [<obj_filter> on|off] <filename>

    OPTIONS


        -n
            Starts a new Houdini session before importing the COLLADA
            file.

        <obj_filter> on|off
            "on" turns the object filter on. "off" turns the object
            filter off.

            You can set the following object filters:


            -c
                Imports camera objects. Default is "on".

            -g
                Imports geometry objects. Default is "on".

            -j
                Imports joints and skin objects. Default is "on".

            -k
                Imports keyframe animations. Default is "off".

            -l
                Imports light objects. Default is "on".

    EXAMPLES

      > colladaimport Seymour.dae
        Imports scene from Seymour.dae into the current Houdini session.

      > colladaimport -n Seymour.dae

        Starts a new Houdini session and then imports the scene from
        Seymour.dae.

      > colladaimport -c off -k on Seymour.dae

        Imports the scene and animation from Seymour.dae into the
        current Houdini session. Cameras are not imported.

colorsettings

    Changes the gamma and/or LUT on various UI gadgets.

    USAGE
      colorsettings [-A] [-R] [-g gamma] [-l lut] [-c] [-f] [-i] [-p]
      [-r] [-s] [-v]

    This command changes the LUT and gamma settings on various Houdini
    views and tools. There is one global LUT and gamma setting which the
    tools and views can share.

    To select a viewer or tool to modify, use one or more of the flags:
    -c, -f, -i, -p, -r, -s or -v.

    If no tool or viewer is selected, -g and -l can be used with -D to
    set the global gamma and LUT without changing any of the viewers'
    settings.

    The -A applies the current global LUT and gamma to the selected
    viewers or tools. -R is used to remove the LUT and gamma from the
    selected viewers or tools (reset to 1 and no LUT); it cannot be used
    with -A, -g or -l.

    If no changes are applied, the current LUT and gamma settings for
    the given tool or viewer is displayed.

    OPTIONS


        -A
            Apply the current global LUT and gamma to the listed tools
            and viewers.

        -R
            Remove the current global LUT and gamma from the listed
            tools and viewers.

        -D
            Make the specified gamma the global default (if -g is
            specified) and/or the specified LUT the global default (if
            -l is specified). -D can be used with the selection flags to
            set both the global defaults and the viewers' settings at
            the same time.

        -g <gam>
            Use gamma <gam> for the gamma setting

        -l <lutfile>
            Use the LUT (lookup table) to <lutfile>

        -p
            Selects Color Pickers and Swatches.

        -c
            Selects the Composite and Render views.

        -s
            Selects the COP Save Image... dialog.

        -v
            Selects the 3D Viewport.

        -f
            Selects the 3D Flipbook.

        -r
            Selects the Render Region tool.

        -i
            Selects the IP device. All interactive renders through this
            device have those gamma/LUT settings applied in Mplay. If
            the gamma is set to 0 for ip, then no gamma override will
            occur; whatever gamma MPlay starts with (or is currently
            using) will be used.

commandecho

    Enables or disables the echoing of commands.

    USAGE
      commandecho [on|off]

compfree

    Releases all cached data and images in use by all composite
    networks.

    USAGE
      compfree [-c] [-d] [-q]

    OPTIONS


        -c
            Clear only the cook cache.

        -d
            Clear only the display cache.

        -q
            (Quiet) Don't print out freed memory message.

    RELATED

      * compopts

compopts

    Controls compositing cache usage and threading.

    USAGE
      compopts [-a] [-A] [-c <size>] [-d <size>] [-t <threads>] [-T
      on|off]

    OPTIONS


        -a
            Set the cook cache size to the recommended size (half the
            total memory).

        -A
            Set the display cache size to the recommended size.

        -c <size>
            Set the cook cache size to <size> MB.

        -d <size>
            Set the display cache size to <size> MB.

        -t <threads>
            Sets the number of cook threads. Also turns threading on.

        -T on|off
            Turns threading on or off.

        -q
            (Query) Print the current settings.

    RELATED

      * compfree

      * compproject

compproject

    Controls the current compositing project.

    USAGE
      compproject [-a <pixelAspectRatio>] [-d i8|i16|i32|fp] [-P <zoom>]
      [-p <black> <white>] [-r <xres> <yres>] [-f on|off] [-F on|off]
      [-l on|off] [-m <xres> <yres>

    These settings are saved with the hip file. Changing these settings
    will change any COP nodes that are following these next time they
    are output or viewed.

    OPTIONS


        -a <pixelAspectRatio>
            Sets the pixel aspect ratio. A ratio of 2:1 (X:Y) should be
            passed as 2.

        -d i8|i16|i32|fp
            Sets the project data format: 8, 16, 32 bit integer, or
            floating point.

        -P <zoom>
            Sets the proxy zoom level. Zoom levels are: icon 1/8 1/4 1/3
            1/2 2/3 3/4 full 1.33 1.5 2 4 8

        -p <black> <white>
            Sets the black and white points for integer formats.

        -r <xres> <yres>
            Sets the project resolution.

        -f on|off
            If on, all File COPs' resolutions are overridden by the
            project resolution (as the default setting for all new File
            COPs). If off, the files natural resolution is used.

        -F on|off
            If on, all File COPs' pixel depths are overridden by the
            project pixel depth (as the default setting for all new file
            COPs). If off, the files natural depth is used.

        -l on|off
            Turns Large Canvas support on or off. If on, image data
            outside of (0,0) - (xres, yres) will be retained. If off,
            this data is cropped.

        -m <xres> <yres>

    RELATED

      * compopts

continue

    Skips to the end of a loop iteration.

    USAGE
      continue [<levels>]


    NOTE
        You can optionally specify the number of parent loops to
        continue.

cplane

    REPLACED BY
      - hou.ConstructionPlane
      - hou.GeometryViewportSettings

    Changes construction plane parameters.

    USAGE
      cplane [options] <viewers>

    If you don't specify any options, cplane prints the command(s) to
    regenerate the current construction plane setup.

    OPTIONS


        -W yup|zup
            Used internally to specify the active global orientation
            mode when a hip file is saved. This is only valid inside a
            hip file.

        -o <x> <y> <z>
            Set the origin.

        -n <x> <y> <z>
            Set the plane normal to.

        -x <x> <y> <z>
            Set the horizontal axis.

        -u <x> <y> <z>
            Set the up vector.

        -l n|x|y|z
            Lock the up vector to the normal, or world x, y, or z axes.

        -s <x> <y>
            Set the grid space to <x> units along the X-axis and <y>
            units along the Y-axis.

        -r <x> <y>
            Set the grid ruler to <x> units along the X-axis and <y>
            units along the Y-axis.

        -c <x> <y>
            Set the number of grid cells to <x> units along the X-axis
            and <y> units along the Y-axis.

        -d on|off
            Turns display of the plane on/off.

    EXAMPLES

      > cplane -o 0 0 0 *
      > cplane -o 1 1 1 -n 0 0 1 -r 10 10 Build.panetab1.world

datatree

    Sets the current plugin used by a data tree pane.

    USAGE
      datatree [options] <pane1> ...

    OPTIONS


        -p <name>
            Sets the currently active Data Tree plugin. This is the name
            as shown in the plugin lister in the data tree pane.

    EXAMPLES

      > datatree -p "Object Appearance" pane7

    RELATED

      * pane

      * Data Tree

desk

    REPLACED BY
      - hou.Desktop.name()
      - hou.Desktop.setAsCurrent()
      - hou.ui.curDesktop()
      - hou.ui.desktop()
      - hou.ui.desktops()

    Reconfigures pane layouts.

    USAGE
      desk add|list|set|swap|query [<desk_name> ...]

    OPTIONS


        add <desk_name1> [<desk_name2> ...]
            Add one or more desktops.

        list
            Prints a list of all desktops.

        set <desk_name>
            Set the current desk.

        swap <pane1_name> <pane1_name>
            Swap the contents of <pane1> and <pane2> on the current
            desk.

        swap <pane1_name> <pane1_name> <desk_name>
            Swap the contents of <pane1> and <pane2> on desk
            <desk_name>.

        query
            Prints the name of the current desk.

    EXAMPLES

      > desk set Desk1
        sets the current desk to be Desk1

      > desk add Desk1 Desk2

        adds two desks named Desk1 and Desk2

      > desk list

        list all desktops

      > desk list Desk1

        list all the contents of Desk1

      > desk swap panetab2 panetab3

        swaps panetab2 and panetab3 in current desk

      > desk swap panetab2 panetab3 Desk1

        swaps panetab2 and panetab3 in Desk1

dopdatahint

    Adds hints for DOP networks to validate simulations.

    USAGES
      dopdatahint [-t <child_data_type>|-n <child_data_name>] [-m
      <max_children>] <parent_data_type>
      dopdatahint -d
      dopdatahint

    When you build dynamics (DOP) networks, you can create data
    hierarchies that use data in unexpected ways. This is not bad if
    it's what you intended, but often unusual combinations of data
    indicate a mistake (that is, you attached data in one spot when you
    meant to attach it somewhere else).

    The dopdatahint command lets you build a library of meaningful
    hierarchical connections in simulations ("data hints"). Once Houdini
    has this information, it can decide how many data inputs to display
    and how to label the inputs on DOP node tiles, as well as validate
    the network and flag possible mistakes when the Provide data hints
    option is on.


    NOTE
        When Houdini starts up, it reads the default data hints from
        $HFS/houdini/scripts/dophints.cmd.

    Use the -t or -n options to specify a valid child type/name of a
    parent type. You can also use the -m to specify the maximum number
    of children of the given type/name.


    TIP
        Use dopdatatypes to print the list of valid DOP-related data
        types.

    dopdatahint with no arguments prints the current list of data hints.
    dopdatahint -d deletes all existing data hints.

    OPTIONS


        -t <child_data_type>
            Tell Houdini that <child_data_type> is a valid child type of
            <parent_data_type>.

        -n <child_data_name>
            Tell Houdini that <child_data_name> is a valid child of
            <parent_data_type>.

        -m <max_children>
            Tell Houdini to only allow up to this number of the data
            type given with -t or -n as children of <parent_data_type>.
            If you omit the -m option, Houdini allows any number of the
            given type/name.

dopdatatypealias

    Creates an alias for a DOP data type.

    USAGES
      dopdatatypealias datatype alias
      dopdatatypealias alias
      dopdatatypealias

    For HDK developers, it may be necessary to change the data type name
    of a custom DOP data type. However doing this will invalidate
    existing DOP simulation data files, which rely on the data type
    name. To maintain backward compatibility, you can create a data type
    name alias which will allow the old data type name to create data
    with the new data type name.

    dopdatatypealias with one argument removes the specified alias.
    dopdatatypealias with no arguments outputs a list of all current
    aliases.

    RELATED

      * dopdatatypes

dopdatatypes

    Prints a list of available DOP data types.

    USAGE
      dopdatatypes [-n]

    Prints a list of the low level DOP data types dynamic simulations
    (DOPs) may use. This command is useful for showing the data type
    names you can use with the dopdatahint and dopsolveadddata commands.

    Most DOPs data types have a corresponding dynamics operator (DOP).
    For information about these data types, view the online help for the
    corresponding DOP. Use the -n option to print only data types with
    corresponding DOPs, and the names of the DOPs.

    OPTIONS


        -n
            Print a list of both data type names and the names of the
            corresponding dynamics operator (DOP). Only print data types
            with corresponding DOPs.

    RELATED

      * dopdatahint

      * dopsolveadddata

dopsave

    Saves the entire state of a DOP simulation to a file.

    USAGE
      dopsave <dopnet> <filename>

    Use this command to save the entire current state of a DOP
    simulation to a file. Simulation states can also be saved and loaded
    in a procedural manner using a File DOP. This command allows the
    saving to occur as part of a script without editing the DOP Network.
    The files generated by this command can be loaded with a File DOP.

dopsavedata

    Saves a DOP simulation data item to a file.

    USAGE
      dopsavedata <dopdata> <filename>

    Use this command to save a single piece of DOP simulation data to a
    file. This is most useful for saving data that takes a long time to
    generate, but which is only generated once at the start of a
    simulation, such as the Volume representation of an object for use
    in collision detection.

    The <dopdata> argument should be in the format:
    <dopnetpath:dopobject/dopdata>.

    The File Data DOP can be used to save and load a single piece of
    simulation data in a procedural manner. This command allows the
    process to be made part of an automated script without having to
    edit the DOP Network. The files generated with this command can be
    loaded using a File Data DOP.

dopsolveadddata

    REPLACED BY
      - hou.DopData.createSubData()
      - hou.DopData.copyContentsFrom()

    Adds data to a DOP object when running a Script Solver DOP.

    USAGE
      dopsolveadddata [-a] [-e] [-u] [-v] [-c sourcedataname]
      <object_index> <dataname> <datatype>

    This is one of a set of commands for use by the Script Solver DOP.
    Calling this command will generate an error if a script solver is
    not currently solving for objects.

    Creates new DOP data on the object specified by object_index. Note
    that this object index is not the DOP object identifier, but an
    index into the array of objects being solved by the current script
    solver.

    The dataname can contain slashes to create subdata on existing data.
    The datatype can be any of the available DOP data types returned by
    the dopdatatypes command.

    OPTIONS


        -a
            Attempt to adopt existing data with the same name if it is
            of a different data type than the one being added, or if the
            -e option is not specified.

        -e
            If data with the same name and data type as the requested
            data already exists, leave that data untouched.

        -u
            Uses the specified data name as a base from which to create
            a unique data name that does not conflict with any existing
            data.

        -v
            Output the name of the newly created data. This option is
            most useful in conjunction with the -u option to find out
            the new unique data name, but can be used without it.

        -c sourcedataname
            Once the new data is created, it is set equal to the data
            specified by sourcedataname. The source data does not need
            to be the same data type as the newly created data, however
            it will usually be the same or a similar data type. For
            example, Position data can be meaningfully used as the
            source for RBD State data or vice versa.

    RELATED

      * dopsolvenumobjects

      * dopsolveobject

      * dopsolvedopnet

      * dopsolvetimestep

      * dopsolvecopydata

      * dopsolveremovedata

      * dopsolvesetoption

      * dopdatatypes

      * Script Solver

dopsolvecopydata

    REPLACED BY
      - hou.DopData.attachSubData()

    Copies some DOP data from one location to another when running a
    Script Solver DOP.

    USAGE
      dopsolvecopydata [-i sourceobject] <object_index> <sourcedataname>
      <destdataname>

    This is one of a set of commands for use by the Script Solver DOP.
    Calling this command will generate an error if a script solver is
    not currently solving for objects.

    This command copies DOP data from one location on one object to
    another location on another object. By default the source and
    destination objects are the same. Use the -o option to specify a
    different source object. The object index provided as the
    destination object is not the DOP object identifier, but an index
    into the array of objects being solved by the current script solver.

    Unlike most object specifications in script solver commands, the -o
    option does not take an index into the set of objects being solved.
    Instead, the object id, object name, or group name for the source
    object can be used. This difference is because the source object
    does not have to be one of the objects being solved. It can be any
    object in the simulation.

    The source and destination data names can contain slashes to fetch
    (or create) subdata on other data.

    OPTIONS


        -o sourceobject
            Specifies a source object that may be different from the
            destination object. The source object can be any object in
            the simulation (not just one of the objects being solved by
            the script solver). The object can be specified by name,
            unique object identifier, or group name.

    RELATED

      * dopsolvenumobjects

      * dopsolveobject

      * dopsolvedopnet

      * dopsolvetimestep

      * dopsolveadddata

      * dopsolveremovedata

      * dopsolvesetoption

      * dopdatatypes

      * Script Solver

dopsolveremovedata

    REPLACED BY
      - hou.DopData.removeSubData()

    Removes data from a DOP object when running a Script Solver DOP.

    USAGE
      dopsolveremovedata <object_index> <dataname>

    This is one of a set of commands for use by the Script Solver DOP.
    Calling this command will generate an error if a script solver is
    not currently solving for objects.

    Removes DOP data from the object specified by object_index. Note
    that this object index is not the DOP object identifier, but an
    index into the array of objects being solved by the current script
    solver.

    The dataname can contain slashes to remove subdata attached to other
    data on the object.

    RELATED

      * dopsolvenumobjects

      * dopsolveobject

      * dopsolvedopnet

      * dopsolvetimestep

      * dopsolveadddata

      * dopsolvecopydata

      * dopsolvesetoption

      * Script Solver

dopsolvesetoption

    REPLACED BY
      - hou.DopRecord.setField()
      - hou.DopRecord.setFieldBool()

    Sets a value on a piece of DOP data when running a Script Solver
    DOP.

    USAGE
      dopsolvesetoption [-t optiontype] <object_index> <dataname>
      <optionname> <value>

    This is one of a set of commands for use by the Script Solver DOP.
    Calling this command will generate an error if a script solver is
    not currently solving for objects.

    Sets an option value on DOP data on the object specified by
    object_index. Note that this object index is not the DOP object
    identifier, but an index into the array of objects being solved by
    the current script solver.

    Generally only data with a corresponding DOP node (use the -n option
    of dopdatatypes for a list) will respond to this command. The
    optionname will usually match one of the parameters on the DOP node,
    but can be any string. The most common data types for this command
    will be Empty Data (for holding custom data) and Position, Motion or
    RBD State for controlling the motion of an object. But again, any
    data type and option name can be specified. The results may vary.

    The optiontype can be one of:

    int
    An integer.
    bool
    A boolean (true or false) value.
    float
    A floating point number.
    string
    A string value.
    vector2
    A two component vector.
    vector3
    A three component vector.
    vector4
    A four component vector.
    quaternion
    A quaternion, which has the same form as a four component

    vector but has a different interpretation internally.

    matrix3
    A three by three matrix.
    matrix4
    A four by four matrix.
    uv
    A two component vector representing texture coordinates.
    uvw
    A three component vector representing texture coordinates.

    If no option type is specified, type float is assumed.

    The format of the value depends on the option type. For boolean
    values, true, on, and 1 can all be used to represent true, and
    false, off, and 0 all represent false. For int and float values, a
    simple number is specified. A string can be any sequence of
    characters (enclosed in quotes if the string contains spaces). For
    vector and matrix formats, use the same format as would be used in
    the expression language. Remember to enclose the value in quotes on
    account of the spaces between vector and matrix components.

    RELATED

      * dopsolvenumobjects

      * dopsolveobject

      * dopsolvedopnet

      * dopsolvetimestep

      * dopsolveadddata

      * dopsolvecopydata

      * dopsolveremovedata

      * Script Solver

dsedit

    Built-in alias for otedit.

dsoinfo

    REPLACED BY
      - hou.HDADefinition.libraryFilePath()
      - hou.NodeType.source()
      - hou.NodeType.sourcePath()

    Displays paths of plug-in functions and operator types.

    USAGE
      dsoinfo [options]

    This command will also print out custom script operators such as
    subnets and VEX based operators. It will show the path of the
    dynamic link object or operator type library file the contains the
    operator type. If no options are specified, it prints all custom
    operators.

    OPTIONS


        -a
            Show all plug-in functions

        -q
            Show only plug-ins located in DSO or DLL files

        -Q
            Show only plug-ins not located in DSO or DLL files

        -o
            Show custom OBJs (Objects)

        -s
            Show custom SOPs (Surface Operators)

        -p
            Show custom POPs (Particle Operators)

        -P
            Show custom POP Networks

        -d
            Show custom DOPs (Dynamics Operators)

        -S
            Show custom SHOPs (Shader Operators)

        -c
            Show custom COP2s (Composite Operators)

        -C
            Show custom COP2 Networks

        -g
            Show geometry plug-ins (primitives and translators)

        -h
            Show custom CHOPs (Channel Operators)

        -H
            Show custom CHOP Networks

        -r
            Show custom ROPs (Output Drivers)

        -f
            Show custom VOPs (VEX Builder Operators)

        -F
            Show custom VOP Networks

        -e
            Show expressions and commands

        -i
            Show image format plug-ins

        -v
            Show custom VEX plug-in operators

        -D
            Show custom dynamics data types

        -y
            Show custom File System (FS) Helper classes

dsreload

    Reloads all OPs which are based on scripts.

    USAGE
      dsreload [-v]


    NOTE
        This includes most SHOPs and all VEX Ops.

    NOTE
        Floating dialog scripts are not affected by this command.

    OPTIONS


        -v
            (Verbose) Print results.

echo

    Prints text to the textport.

    USAGE
      echo [-n] text

    OPTIONS


        -n
            Do not print a newline at the end of the text. This lets you
            print multiple echos on the same line.

    RELATED

      * message

else

    Else conditional for an if statement.

    USAGE
      else [ if (<statement>) then ]

end

    Termination of a for or foreach statement.

    USAGE
      end

endif

    Termination of the if statement.

    USAGE
      endif

excat

    Prints expression source code.

    USAGE
      excat [<pattern>]

    OPTIONS


        <pattern>
            Lists expressions matching the pattern.

    RELATED

      * exedit

      * exls

      * exread

      * exrm

exedit

    Opens expressions in an editor.

    USAGE
      exedit [<pattern>]


    NOTE
        If a function is renamed or removed from the edit session, this
        does NOT mean that the old function will be removed from the
        current function list. To remove a function, use exrm.

    OPTIONS


        <pattern>
            Edits expressions matching the pattern.

    RELATED

      * excat

      * exls

      * exread

      * exrm

exhelp

    Shows usage information for an expression.

    USAGE
      exhelp [-k] [<pattern>]

    OPTIONS


        -k
            Search all command help text for the pattern.

        <pattern>
            Prints help for expressions matching the pattern. If the
            pattern matches an expression exactly, only help for that
            expression is printed.

    RELATED

      * help

exit

    Stops execution of the script file. If the optional status code is
    provided, then it sets the variable 'status' to the given integer.

    USAGE
      exit [<status_code>]

    RELATED

      * quit

exls

    Lists the current expression functions

    USAGE
      exls

    RELATED

      * excat

      * exedit

      * exls

      * exrm

exread

    Load custom expression source code from external files.

    USAGE
      exread [-v] <files>

    OPTIONS


        -v
            Print verbose output, indicating which functions were added
            or removed (as a result of a name collision).

        <files>
            File(s) to load

    RELATED

      * exedit

      * exls

      * excat

      * exrm

exrm

    Removes custom expressions.

    USAGE
      exrm [-v] <pattern>

    OPTIONS


        -v
            Print verbose output, indicating which functions were
            removed.

        <pattern>
            Deletes any custom expression functions matching the pattern

    RELATED

      * exedit

      * exls

      * excat

      * exread

fbximport

    REPLACED BY
      - hou.hipFile.importFBX()

    Imports a Filmbox FBX file.

    USAGE
      fbximport [-n] [-f fps] [-p abs|rel] [-t on|off] [-s vex|vop] [-v
      float|double] [-u none|geo|def|all] [<obj_filter> on|off]
      <filename>

    OPTIONS


        -n
            Starts a new Houdini session before importing the FBX file.

        -f fps
            Specifies a frame rate to override FBX file's internal frame
            rate with. If this option is absent, FBX file's internal
            frame rate will be used.

        -o on|off
            If on, the FBX file is imported directly into /obj subnet,
            instead of having a new subnet created for each FBX file.

        -p abs|rel
            Determines whether imported FBX file paths will be kept
            absolute or converted to relative paths. Defaults to
            relative paths.

            The following values are supported:


            abs
                All file paths are stored as absolute paths.

            rel
                All file paths are made relative to the $HIP path.

        -u none|geo|def|all
            Specified which nodes will be left unlocked after import.

            The following values are supported:


            none
                Both geometry (File SOPs) and deformations (File CHOPs)
                will be locked.

            geo
                Geometry (File SOPs) will be unlocked, while
                deformations (File CHOPs) will be locked.

            def
                Deformations (File CHOPs) will be unlocked, while
                geometry (File SOPs) will be locked.

            all
                Both geometry (File SOPs) and deformations (File CHOPs)
                will be unlocked.

        -t on|off
            If set to "on", forces the importer to triangulate NURBS and
            patch surfaces. This is off by default.

        -s vex|vop
            Specifies how materials should be imported. The default is
            as VEX FBX shaders.


            vex
                Materials are imported as special VEX FBX shaders.


                vop
                    Materials are imported as general VOP networks.

            -v float|double
                Specifies how the importer should treat vertex caches.
                The default assumes double-precision vertex caches.


                float
                    All vertex caches are assumed to be stored as single
                    precision (float) types.

                double
                    All vertex caches are assumed to be stored as double
                    precision types.

        <obj_filter> on|off
            "on" turns the object filter on. "off" turns the object
            filter off.

            You can set the following object filters:


            -c
                Imports camera objects. The default is "on".

            -g
                Imports geometry objects. The default is "on".

            -j
                Imports joints and skin objects. The default is "on".

            -k
                Imports keyframe animations. The default is "off".

            -l
                Imports light objects. The default is "on".

            -m
                Imports textures and materials. The default is "on".

        -a maya|off
            If set to "maya", the importer will try to be compatible
            with FBX files from Maya, instead of the FBX standard. This
            is off by default.

        -b on|off
            If set to "on", the importer will import blend deformers as
            Blend SOPs. This is off by default.

        -h on|off
            If set to "on", the importer will hide joints attached to
            skin. This is off by default.

        -i on|off
            If set to "on", the importer will import null nodes as
            subnets. This is on by default.

        -r on|off
            If set to "on", the importer will resample all cubic curves.
            This is off by default. If using this, use -q to set the
            interval between samples, in frames.

        -q <frames_between_samples>
            When resampling curves, this specifies the number of frames
            between each sample. 1.0 by default. Use -r on if all cubic
            curves should be resampled.

    EXAMPLES

      > fbximport Seymour.fbx
        Imports scene from Seymour.fbx into the current Houdini session.

      > fbximport -n -f 24 Seymour.fbx

        Starts a new Houdini session and then imports the scene from
        Seymour.fbx, forcing the file to be imported at 24 fps.

      > fbximport -c off -k on Seymour.fbx

        Imports the scene and animation from Seymour.fbx into the
        current Houdini session. Cameras are not imported.

fbximportanim

    Imports a single Filmbox FBX animation curve.

    PROPERTY NAMES

        The list below contains standard property names as defined by
        the FBX format, with spaces replaced by underscores. Properties
        with multiple channels have the number of channels list in
        brackets.

        General properties

        "Lcl+Translation" (3), "Lcl+Rotation" (3), "Lcl+Scaling" (3),
        "Visibility"

        Optical marker node properties

        "Occlusion"

        Light node properties

        "Cone+angle", "Fog", "Intensity", "Color" (3)

        Camera node properties

        "FieldOfView", "FieldOfViewX", "FieldOfViewY", "FocalLength",
        "OpticalCenterX", "OpticalCenterY", "Roll", "TurnTable",
        "BackgroundColor" (3)

        USAGE
          fbximportanim -n <node_name> -p <parm_name> -i <parm_idx> -k
          <fbx_node_name> -c <property_name> -b <property_idx> [-r
          on|off] [-f <sample_freq>] [-t <fbx_take_name>] <filename>

    OPTIONS


        -n <node_name>
            The name of the Houdini node to whose parameter the imported
            animation curve will be assigned. Can be a path relative to
            /obj, or an absolute path.

        -p <parm_name>
            Specifies the name of a Houdini parameter to which the
            animation curve will be assigned.

        -i <parm_idx>
            The channel index of the parameter above.

        -k <fbx_node_name>
            The name of the FBX node to get the animation curve from.

        -c <property_name>
            The name of the FBX property name to extract the animation
            curve from. Note that while some FBX property names contain
            spaces, they should be replaced with a plus symbol when
            specified here. For example, FBX property "Lcl Scaling"
            becomes "Lcl+Scaling" here.

        -b <property_index>
            The index (channel) of the FBX property above. If the
            property has no sub-indices (for example, camera's focal
            length), this must be set to -1.

        -r on|off
            Specifies whether to force animation curve resampling. If
            on, the curve will be resampled.

        -f <sample_freq>
            Sampling frequency, in frames, for curves that must be
            resampled. Defaults to 1.0.

        -t <fbx_take_name>
            The name of the FBX take to import animation from. If this
            is omitted, the first animation take is used.

    EXAMPLES

      > fbximportanim -n geo1 -p t -i 0 -k camera1 -c Lcl+Translation -b 2 c:/camera_anim.fbx
        Imports the Z component of the local translation of the FBX
        object named camera1 and assigns it to the X translational
        component of the /obj/geo1 Houdini node.

fcur

    REPLACED BY
      - hou.frame()
      - hou.intFrame()

    Gets or sets the current frame number.

    USAGE
      fcur [<frame>]

    If no frame is specified, prints the current frame. Otherwise, sets
    the current frame to the specified frame.

    OPTIONS


        <frame>
            Sets the current frame.

    RELATED

      * fplayback

      * fps

      * frange

      * fset

      * tcur

      * tset

fdependadd

    Adds a file dependency.

    USAGE
      fdependadd <node> <parm> <filepath>

    OPTIONS


        *
            Currently, there are no options for this command.

    EXAMPLES

      > fdependadd /obj/model/geo_file file ./src/body.bgeo
        Add a file dependency, "./src/body.bgeo", to the "file"
        parameter of the /obj/model/geo_file node.

fdependhide

    Hides a file dependency.

    USAGE
      fdependhide <node> <parm>

    OPTIONS


        *
            Currently, there are no options for this command.

    EXAMPLES

      > fdependhide /obj/model/geo_file file
        Hide the file dependency of the "file" parameter of the
        /obj/model/geo_file node.

fdependls

    REPLACED BY
      - hou.fileReferences()

    Lists all file dependencies.

    USAGE
      fdependls [-l] [-h]

    OPTIONS


        -l
            Lists all nodes that contain file dependencies.

        -h
            Include HFS files.

    EXAMPLES

      > fdependls
        List all file dependencies.

      > fdependls -l

        List all nodes that contain file dependencies.

      > fdependls -h

        List all file dependencies including dependencies referring to
        HFS files.

fdependrm

    Removes a file dependency.

    USAGE
      fdependrm <node> <parm>

    OPTIONS


        *
            Currently, there are no options for this command.

    EXAMPLES

      > fdependrm /obj/model/geo_file file
        Remove the file dependency from the "file" parameter of the
        /obj/model/geo_file node.

filechooser

    REPLACED BY
      - hou.ui.selectFile()

    Opens a file chooser and prints the chosen file.

    USAGE
      filechooser [options]

    Asks the user to select a file via the file browser. The result is
    printed to the textport, and can be assigned to a variable.

    OPTIONS


        -d <dir>
            Sets the directory the browser starts in.

        -m
            Allow the user to select multiple files.

        -n <name>
            Sets the name of the browser, visible in the dialog title
            bar.

        -p <file_pattern>
            Sets the initial file pattern, so that only files matching
            that pattern are shown. * and ? wildcards are supported. For
            example, *.hip, shot2_*.

        -s
            Allow file sequences to grouped as sequences and not
            individual files (foo1.pic, foo2.pic, foo3.pic: foo$F.pic).

        -t <filetype>
            Show only files of the given type. <filetype> can be one of:

          * hip -- Houdini HIP files

          * otl -- Digital Asset libraries

          * pic -- Image files

          * geo -- Geometry files

          * lut -- LUT (lookup table) files

          * cmd -- Script files

          * chan -- Channel files

          * clip -- Channel and Audio files

          * sim -- Simulation files

          * simd -- Simulation data files

          * i3d -- 3D Image files

          * midi -- MIDI music files

    EXAMPLES

      > set myfile = `run("filechooser -t pic")`

    RELATED

      * message

for

    Loops through a block of commands according to a counter.

    USAGE
      for <variable> = <start> to <end> [step <inc>] ... end

    Loops over the instructions between the for and end statements,
    incrementing the given variable at the end of each loop.

    EXAMPLES

      > for i = 1 to 3
      >     echo $i
      > end
      > for i = 1 to 100 step 3
      >     echo $i
      > end

    RELATED

      * foreach

      * while

foreach

    Loops through a block of commands for each item in a list.

    USAGE
      foreach <variable> ( <list> ) ... end

    Loops over the contents of the given list, setting the given
    variable to the next item in the list at the end of each loop.

    EXAMPLES

      > foreach i ( a b c )
      >     echo $i
      > end
      > 
      > foreach object ( `execute("opls -d")` )
      >     echo Object $object
      > end

    RELATED

      * for

      * while

fplayback

    REPLACED BY
      - hou.playbar.areKeysShown()
      - hou.playbar.areTicksShown()
      - hou.playbar.frameIncrement()
      - hou.playbar.isAudioShown()
      - hou.playbar.isRangeSliderShown()
      - hou.playbar.isRangeRestricted()
      - hou.playbar.isRealTime()
      - hou.playbar.isRealTimeSkipping()
      - hou.playbar.realTimeFactor()
      - hou.playbar.setFrameIncrement()
      - hou.playbar.setRealTime()
      - hou.playbar.setRealTimeFactor()
      - hou.playbar.setRealTimeSkipping()
      - hou.playbar.setRestrictRange()
      - hou.playbar.setUseIntegerFrames()
      - hou.playbar.showAudio()
      - hou.playbar.showKeys()
      - hou.playbar.showRangeSlider()
      - hou.playbar.showTicks()
      - hou.playbar.usesIntegerFrames()
      - hou.playbar

    Sets various options of the playbar.

    USAGE
      fplayback [-i on|off] [-r on|off] [-e on|off] [-h on|off] [-t
      on|off] [-a on|off] [-k on|off] [-f <factor>] [-s <step_size>]

    If you don't specify any options, the command prints the current
    settings.

    OPTIONS


        -i on|off
            Turns integer frame values on or off.

        -r on|off
            Turns realtime playback on or off.

        -f <factor>
            Sets the realtime playback factor.

        -g on|off
            Turn realtime playback skipping on or off.

        -e on|off
            Turn restriction on playback range on or off.

        -h on|off
            Turn display of range slider on or off.

        -t on|off
            Turn display of ticks on playbar on or off.

        -a on|off
            Turn display of audio on playbar on or off.

        -k on|off
            Turn display of keys on playbar on or off.

        -s <step_size>
            TSets the non-realtime frame increment.

    RELATED

      * fcur

      * fps

      * frange

      * fset

      * ftimecode

      * tcur

      * tset

fps

    REPLACED BY
      - hou.fps()
      - hou.frameToTime()
      - hou.setFps()
      - hou.timeToFrame()

    Gets or sets the current playback speed.

    USAGE
      fps [<frames_per_sec>]

    If no frames_per_second is specified, the current frames per second
    is printed out. Otherwise, the frames per second is set to the
    specified value.

    RELATED

      * fcur

      * fplayback

      * frange

      * fset

      * ftimecode

      * tcur

      * tset

frange

    REPLACED BY
      - hou.playbar.frameRange()
      - hou.playbar.playbackRange()
      - hou.playbar.setPlaybackRange()
      - hou.playbar

    Sets the playback range on the playbar.

    USAGE
      frange [<start> <end>]

    If the start and end are not specified, prints the current frame
    range.

    RELATED

      * fcur

      * fps

      * fset

      * ftimecode

      * tcur

      * tset

fset

    Sets the playback range to a certain length

    USAGE
      fset [<number_of_frames>]

    If no frame count is specified, the current global animation frame
    range is printed out. Otherwise, the frame range is set to the
    number of frames specified.

    For more control over how the global animation range is set, please
    see tset.

    RELATED

      * tset

      * fcur

      * fplayback

      * fps

      * frange

      * fset

      * ftimecode

      * tcur

ftimecode

    Gets or sets the current frame in timecode format.

    USAGE
      ftimecode [<timecode>]

    If no timecode is given, the current frame is printed in timecode
    format. Otherwise, the timecode specified is set.

    RELATED

      * fcur

      * fplayback

      * fps

      * frange

      * fset

      * tcur

      * tset

geocache

    Manipulates the internal geometry cache.

    USAGE
      geocache [-s] [-l] [-c | -n] [-a 0|1] [-m <max>] [ -f 0|1 file] [
      -F 0|1 node ]

    The geometry cache is used by VEX geometry functions.

    OPTIONS


        -s
            See the current settings.

        -l
            List the contents of the cache.

        -c
            Clear the cache.

        -n
            Clear the cache if newer files exist on disk.

        -p
            Clear any packed primitive cached data. This will clear any
            cached data, but may not necessarily cause packed primitives
            in cooked SOPs to be updated.

        -a 0|1
            Turn auto-flushing of geometry files on or off. Leaving the
            geometry in the cache (i.e. no auto-flushing) improves
            performance at the cost of extra memory.

        -m <max>
            Specify the cache size (in KB). This defaults to 8192 (8
            MB).

        -f 0|1 file
            Turn off|on the monitoring of given file(s). If there is any
            change to the file(s) on the disk, the depending geocache(s)
            will be automatically cleared. This option will not be
            saved. Option available only on Linux

        -F 0|1 node
            Turn off|on the monitoring of referenced file(s) from the
            given node(s). If there is any change to the file(s) on the
            disk the according node(s) will be automatically reloaded.
            This option will not be saved. Option available only on
            LINUX

    RELATED

      * texcache

      * objcache

      * sopcache

      * opupdate

glcache

    Manipulates the OpenGL caches.

    USAGE
      glcache [-c] [-C] [-t <texcachesize>] [-v <<bufcachesize>]

    There are two OpenGL caches, one for textures and the other for
    vertex buffers (geometry).

    OPTIONS


        -c
            Clear the texture cache. This will also reload textures
            files that are out of date.

        -C
            Clear the buffer cache of unused buffers, keeping buffers
            which are still actively used by any open viewports.

        -m
            Print the maximum texture and buffer cache sizes, in MB.

        -s
            Print the current texture and buffer cache sizes, in MB.

        -t
            Set the texture cache size to 'texcachesize', in MB.

        -v
            Set the vertex buffer cache size to 'bufcachesize', in MB.

    RELATED

      * geocache

      * objcache

      * opupdate

      * sopcache

      * texcache

help

    Prints usage help for a command.

    USAGE
      help [-k] [<command_pattern>]

    With no arguments, the list of all commands is printed out. If a
    pattern is specified a list of all commands that match that pattern
    is printed. If only one command matches, or the pattern matches the
    command exactly, the detailed help for that command will be printed.

    OPTIONS


        -k
            Searches all command help text for the pattern.

    RELATED

      * exhelp

helpbrowser

    REPLACED BY
      - hou.HelpBrowser

    Performs actions related to the help browser pane.

    USAGE
      helpbrowser [-d <desktop>] [-u <url>] [-h <url>] [-g <url>] [-r
      <data>] [-b <uri>] [-U] [-H] [-G] [-t <Table/Optype>] <pane1> ...


    NOTE
        This command cannot be called from embedded hscript in the
        browser pane.

    OPTIONS


        -d <desktop>
            Desktop to operate on. If not specified, the command will
            operate on the current desktop.

        -u <url>
            Load the specified URL.

        -h <url>
            Set the home page for this pane to the specified URL.

        -g <url>
            Set both the home page for this pane and the home page for
            this pane's desktop to the specified URL. Any new help
            browser panes in this desktop will use the new home page.
            With this option, if this help browser pane is closed and
            another one is opened, the new pane will use the old pane's
            home page.

        -r <data>
            Load the contents of a string directly into the browser. If
            the data begins with <html>, the browser will treat it as
            html; otherwise it will treat it as ascii text. Use -b to
            specify the base URI for relative references in the string.

        -b <uri>
            Specify the base URI to be used when loading data into the
            browser. This option may only be used in conjunction with
            -r. The base URI is used to resolve relative links from html
            data.

        -u
            Return the current URL of this pane.

        -H
            Return the home page URL of this pane.

        -G
            Return the home page URL of this pane's desktop.

        -t <Table/Optype>
            Load the help for the specified operator type. The Table
            value indicates the class of the operator type. A list of
            valid values can be found in the help for the ophelp
            command. The Optype string is the name of the specific
            operator type.

    EXAMPLES

      > set nl=\n
      > helpbrowser -u "http://www.google.com" pane7
      > helpbrowser -r "Raw text${nl}========${nl}<preformatted> text" pane7
      > helpbrowser -r "<html><body><h1>HTML</h1><p>HTML text</html>" pane7 helpbrowser -t Object/geo pane7

    RELATED

      * pane

      * neteditor

      * parmeditor

      * pilist

      * chanlist

      * animeditor

      * takelist

      * chopview

      * ophelp

history

    Prints the command history.

    USAGE
      history [-c]

    this matches the Ctrl-RMB history, but differs from the up/down
    arrow history. The up/down arrow history replaces duplicate
    commands, while this shows the complete history.

    OPTIONS


        -c
            Clears the command history.

if

    Conditionally executes a block of commands if a condition is true.

    USAGE
      if (<condition>) [then] ... [else if | else ] ... endif

    If <condition> is true, the contents of the if are executed.


    NOTE
        Currently, statements inside the if clause must occur on
        separate lines. That is, statements like "if ($F == 1) echo
        Frame One" will not work.

    EXAMPLES

      > if ( $F == 1 ) then
      >     echo Frame One
      > else
      >     echo Not Frame One
      > endif

imgdispopt

    Sets the global image viewer display options.

    USAGE
      imgdispopt [options]

    The image viewer display options for MPlay and COPs are global to
    all viewers. This command allows you to set any or all of these
    options.

    OPTIONS


        -m <mem>
            Sets the memory usage of the viewer to <mem> Mb. Allocating
            more memory will allow more images to be cached, which
            speeds up playback.

        -P on|off
            Pop Window when Rendering. If on, the MPlay window is popped
            on top of other windows when a new image arrives.

        -M on|off
            Mipmap images. If on, images will be mipmapped when zoomed
            out. This decreases the rendering artifacts by blurring the
            image slightly.

        -A on|off
            Fast Aspect Ratio. If on, the image is scaled horizontally
            in hardware by the aspect ratio. However, in cases, this can
            cause noticeable scaling artifacts. If off, the image is
            scaled in software using a better box filter. This reduces
            these artifacts, but is slightly slower. This option is only
            useful if images are displayed with a pixel aspect ratio
            other than 1.

        -g <gamma>
            Sets the default viewport gamma, which the gamma value that
            will be set if the user presses 'reset gamma'.

        -G <gamma_scope>
            Determines which planes the gamma is applied to, normally
            just the color (C) plane.

        -B <bg_gamma>
            Sets the gamma value applied to the background color.

        -v single|split
            Setup the viewport layout in single or split mode. In single
            mode, one viewport is shown regardless of how many sources
            are displayed, and a strip along the bottom of the viewport
            allows for quick toggling between them. In split mode, one
            viewport is used for each source, up to the maximum viewport
            layout (see below).

        -V <cols> <rows>
            Sets the viewport layout for split viewport mode. The
            maximum layout in any direction is 4.

        -d h|v
            Sets the preferred layout direction for split mode. If set
            to 'h' (horizontal), the viewports will start increasing in
            the horizontal direction before adding new rows. If set to
            'v' (vertical), new viewports will be added vertically
            before adding new columns.

        -a on|off
            Normally viewports are only shown if needed. If this option
            is turned on, then the full viewport layout specified by -V
            will always be shown, regardless of whether they are filled
            or not.

        -i <info>
            Sets the viewport label info level. 0 is minimal (name
            only), and 3 is full image details. 1 and 2 give medium
            amounts of image details.

        -b <r> <g> <b>
            Sets the background color of the viewport.

        -o <guide_file>
            Sets the vector guide file to be drawn over top of the
            images.

        -h on|off
            Turns handle alpha blending on or off.

        -H on|off
            Turns handle anti-aliasing on or off.

        -c <r> <g> <b>
            Sets the default handle color.

        -C <r> <g> <b>
            Sets the located (highlighted) handle color.

        -S <r> <g> <b>
            Sets the selected handle color.

        -R <radius>
            Sets the handle pick radius (default 6 pixels)

        -F d|dc|c
            Sets the viewport follow mode to Display Only (d), Display
            Image/Current node state (dc) or Current node only (c).

        -D <lut_file>
            Sets the default display LUT for all viewers.

        -I <lut_file>
            Sets the inspection LUT for all viewers. In the inspect
            window, an entry 'lut' will show the reverse lookup through
            the LUT, which is useful for Cineon images (to see the
            original Cineon numbers). 3D LUTs cannot be used as
            inspection LUTs.

        -f <bg_image>
            Sets the background image (or image sequence).

        -s on|off
            Turns the background image size override on or off. If on,
            the -r flag specifies the size that the background image
            should be displayed at.

        -r <xres> <yres>
            Specifies the size that the background image should be
            scaled to. Only has an effect if '-s on' is also specified.

        -p on|off
            Premultiplied Foreground Image. If on, this indicates that
            the foreground image is already a premultiplied image, and
            no alpha multiplication is required. If off, the image
            blending multiplies the foreground image by its alpha.

    RELATED

      * imgview

      * imgview2d

      * imgviewtime

      * imgviewhist

imgsave

    Writes images from a Composite View or MPlay to disk

    USAGE
      `imgview <output_files>

    This command provides a simple way to write images to disk from a
    Composite View, Render View, or MPlay session. When more that one
    viewport is present in a viewer, the images in the active viewport
    are written. If the <view_name> is omitted, all Composite and Render
    viewers will be written.

    OPTIONS


        -a
            Render all frames of the sequence.

        -f <start> <end>
            Render frames from <start> to <end>, inclusive.

        -i <step>
            Render every <step> frame.

        -g auto|off
            Turn colorspace conversion on (<auto>) or <off>.

        -p <planes>
            The list of planes to write from the images.

        -r <scale_width> <scale_height>
            Scale the image before writing.

        -R <width> <height>
            Resize the image before writing.

    RELATED

      * imgdispopt

imgview

    Changes global options of a COP/Mplay image viewer.

    USAGE
      imgview [options] <view_name>

    The Mplay and COPs image viewer interface can be scripted through
    the use of the commands imgview, imgview2d, imgviewhist and
    imgviewtime. This command affects the interface common to all three
    viewer types. The other commands affect controls specific to the
    viewer types.


    NOTE
        Image viewer names are always of the pattern imgview<N> where
        <N> = 1,2,3... (e.g. imgview1).

    OPTIONS


        -i
            Switch to Image mode.

        -h
            Switch to Histogram mode.

        -t
            Switch to Timeline mode.

        -l on|off
            Links or unlinks the viewports.

        -p <plane_name> <plane_array>
            Sets the displayed plane and array index (normally 0).

        -s on|off
            Links or unlinks viewport scrolling.

        -z <zoom>
            Sets the zoom factor (0.125 to 8, or -1 for icon).

        -c <port>
            Sets the current viewport in multi-viewport mode.

    RELATED

      * imgdispopt

      * imgview2d

      * imgviewtime

      * imgviewhist

      * imgviewtool

imgview2d

    Changes options of a 2D view of a COP image viewer.

    USAGE
      imgview2d [options] <view_name> [<viewport_index>]

    If viewport_index is specified, only that viewport is affected
    (1-16). If it is not specified, or 'all' is specified, all viewports
    are affected.

    The imgview command also affects the more global settings of this
    type of image viewer.


    NOTE
        Image viewer names are always of the pattern imgview<N> where
        <N> = 1,2,3... (e.g. imgview1).

    OPTIONS


        -V on|off
            Enable or disable the view.

        -L on|off
            Turns on/off the labels.

        -G on|off
            Turns on/off the guides.

        -H on|off
            Turns on/off the handles.

        -P on|off
            Turns on/off the previews.

        -t on|off
            Turn on/off transparency.

        -i on|off
            Turn on/off background images.

        -X on|off
            Display the image with the proper aspect ratio if on, or 1:1
            if off.

        -f
            Show the full image, removing any crop region.

        -c <component>
            Display color channel (0 = red, 1 = green, 2 = blue, 3 =
            alpha, -1 = all)

        -m <color_mode>
            Sets the color correction mode. 0 = to brightness controls,
            1 = black/white points.

        -b <bright> <contrast> <shift>
            Sets the brightness, contrast and bright shift for color
            correction.

        -p <black> <white>
            Sets the black and white points for color correction.

        -s <u1> <v1> <u2> <v2>
            Show a portion of the image represent by the rectangle with
            lower left corner (u1,v1) and upper right corner (u2,v2) in
            UV coordinates.

        -g <gamma>
            Sets the gamma of the viewport.

        -d <lutfile>
            Sets display LUT file to use to color correct the images in
            the viewport.

        -l on|off
            Applies the brightness/contrast controls before the
            LUT/gamma if on, otherwise they are applied afterwards.

    RELATED

      * imgview

      * imgviewtime

      * imgviewhist

      * imgdispopt

imgviewhist

    Changes options of a Histogram view of a COP image viewer.

    USAGE
      imgviewhist [options] <view_name> [<viewport_index>]

    If viewport_index is specified, only that viewport is affected
    (1-16). If it is not specified, all viewports are affected.


    NOTE
        Image viewer names are always of the pattern imgview<N> where
        <N> = 1,2,3... (e.g. imgview1).

    OPTIONS


        -V on|off
            Enable or disable the view.

        -L on|off
            Turns on/off the labels.

        -G on|off
            Turns on/off the guides.

        -H on|off
            Turns on/off the handles.

        -P on|off
            Turns on/off the previews.

        -t on|off
            Turn on/off transparency.

        -i on|off
            Turn on/off background images.

        -c <component>
            Display color channel (0 = red, 1 = green, 2 = blue, 3 =
            alpha, -1 = all)

        -h <type>
            Sets the histogram type:

          * 0 = pixel

          * 1 = hue

          * 2 = saturation

          * 3 = value

          * 4 = pixel vs. U

          * 5 = pixel vs. V

          * 6 = hue vs. U

          * 7 = hue vs. V

          * 8 = saturation vs. U

          * 9 = saturation vs. V

          * 10 = value vs. U

          * 11 = value vs. V

          * 12 = hue vs. saturation

          * 13 = hue vs. value

    RELATED

      * imgview

      * imgview2d

      * imgviewtime

imgviewls

    Prints the names of available COP/Mplay image viewers to use with
    imgview.

    USAGE
      imgviewls [options]

    Image viewer names are always of the pattern imgview<N> (for example
    imgview1).

    This command is mainly useful in combination with commands such as
    imgview, which lets you manipulate image viewer settings, and
    imgviewtool.

    If one of -c or -r is given, imgviewls will only list Composite
    Views or Render Views. If none or both are given, all image viewers
    are listed.

    OPTIONS


        -c
            List Composite Views.

        -r
            List Render Views.

    RELATED

      * imgview

imgviewtime

    Changes options of a Timeline view of a COP image viewer.

    USAGE
      imgviewhist [options] <view_name> [<viewport_index>]

    If viewport_index is specified, only that viewport is affected
    (1-16). If it is not specified, all viewports are affected.


    NOTE
        Image viewer names are always of the pattern imgview<N> where
        <N> = 1,2,3... (e.g. imgview1).

    OPTIONS


        -V on|off
            Enable or disable the view.

        -L on|off
            Turns on/off the labels.

        -G on|off
            Turns on/off the guides.

        -H on|off
            Turns on/off the handles.

        -P on|off
            Turns on/off the previews.

        -f on|off
            Turns on/off the frame boxes.

        -e on|off
            Turns on/off the extend regions.

        -b on|off
            Turns on/off the timebar.

        -g <grid_level>
            Sets the grid level (0 = none, 1 = low, 2 = med, 3 = high).

        -u sec|fr
            Sets the units to seconds or frames.

        -r <preview_rate>
            Sets the preview rate (set to 1 to show every frame).

        -a
            Show all COPs in the network.

        -d
            Show all displayed COPs in the network.

        -t
            Show all time-sensitive COPs in the network.

    RELATED

      * imgview

      * imgview2d

      * imgviewhist

imgviewtool

    Invokes a tool in a COP image viewer (or lists available tools).

    USAGE
      imgviewtool [-t <tool_name>] <view_name>

    This command sets the currently active tool in an image viewer (that
    is, the selected tool that shows its options in the operator control
    toolbar and acts on mouse clicks and key presses). This command
    simulates the effect of the user choosing a tool in the viewer, such
    as via the tab menu .If no options are specified, then this command
    lists all the available tools for the given viewer.

    Use the imgviewls command to list the available image viewers.

    OPTIONS


        -t <tool_name>
            Name of the tool to select in the viewer.

            This is the _internal_ name of the tool, not the name that
            usually shows up in the user interface, for example xform
            instead of Transform.

            Use this command without any options to obtain the list of
            available tools.

    EXAMPLES

      > imgviewtool imgview1
        Prints a list of tools available in the scene viewer named
        imgview1.

      > imgviewtool -t file imgview1

        Selects the File COP in the image viewer named imgview1.

    RELATED

      * viewtool

      * imgview

      * imgviewls

HScript commands

HScript is Houdini's legacy scripting language.

HScript is still available in Houdini for compatibility with older files
and scripts. For new scripts, we recommend you use the scripting API
instead.

Expansion of a Houdini command follows the C shell expansion standards
very closely. HScript commands are generally separated by newlines,
however you can put multiple commands on a single line separated by
semicolons. Commands are used to control anything to do with ui or node
states. For example, to control the state of Houdini, change display
flags on nodes, dump nodes as scripts, add/delete/copy/paste operators,
add/modify/remove parameters on nodes, etc.

See the HScript language guide for more information about using HScript.

COMMANDS


iprview

    REPLACED BY
      - hou.IPRViewer.isAutoUpdateOn()
      - hou.IPRViewer.setAutoUpdate()
      - hou.IPRViewer.delay()
      - hou.IPRViewer.setDelay()

    Sets various options of an IPR view pane.

    USAGE
      iprview [-t <timeout>] [-T <prefix>] [-l 0|1] [-d <desktop_name>]
      <pane1> ...

    The interactive render pane quickly and automatically renders the
    scene as you work. This command lets you set various options of an
    existing interactive render pane. Use the pane command to create an
    interactive render pane.

    OPTIONS


        -t <timeout>
            The timeout (in seconds) between changes you make and an
            automatic re-render. Changes made within the timeout are
            "batched" into the next re-render. Default is 0.5.

        -T <prefix>
            Houdini adds a number to the end of this string to create a
            name when you create a new take in the interactive render
            pane. Default is ipr_.

        -l 0|1
            (lock) -l 1 prevents the render from updating automatically.
            -l 0 allows the render to update automatically.

java

    Starts a java virtual machine.

    USAGE
      java [-d] [-c <classpath>] [-d] [-w] [-x] [<class>]

    This command starts up a Java application. It also opens a
    connection (similar to the openport command) that the Java
    application can use to communicate with Houdini. In the file
    $HH/scripts/java/sesi.jar is the definition of a sesi.Houdini class
    with a single static method called hscript. This method takes a
    String as an argument which specifies the Houdini scripting command
    to run. The result of executing the command is returned by this
    function as a String. A second method, hscriptex, is identical to
    the hscript method except it will throw a java.io.IOException if
    there was an error while executing the specified command within
    Houdini. The directory $HH/scripts/java and the file
    $HH/scripts/java/sesi.jar are automatically added to the value of
    the CLASSPATH environment variable.

    The class parameter passed to this command specifies the class where
    Java should begin execution. The specified class must contain a
    static method called main which takes an array of strings as an
    argument, and has a void return type.

    If the -d option is set, then even when you exit Houdini, the Java
    application will not be terminated. If the -c option is specified,
    this command prints out the value of the CLASSPATH variable that is
    sent to the Java application. The -x option stops all currently
    running Java applications that were not started with the -d option.
    If either of the -c or -x options are set, the class parameter
    becomes optional. If the -w option is set, this command does not
    return until the new Java application has terminated. The -s option
    allows the Java application to run only "safe" commands.

    OPTIONS


        -d
            Start in daemon mode (even if you exit Houdini, the java
            application will continue to run).

        -c
            The CLASSPATH.

        -x
            Stop all running Java processes that were not started with
            the -d option.

        -w
            Wait for the Java process to terminate.

        -s
            Run the Java code in a sandbox (only "safe" commands
            allowed, e.g. no access to local disk).

    EXAMPLES

        Java code:

      > import sesi.Houdini;
      > public class test {
      >     public static void main( String args[] ) {
      >         String oplist = "";
      >         try {
      >             oplist = Houdini.hscriptex("opls /");
      >         } catch ( java.io.IOException e ) {
      > 
      >         }
      > 
      >         Houdini.hscript( "message " + oplist );
      >     }
      > }

        HScript command:

      > java -w test

        Output: obj out part ch shop img vex

    RELATED

      * openport

      * unix

job

    Get or set the $JOB variable.

    USAGE
      job [<unix_path>]

    Print the $JOB variable if no path is specified, otherwise, the $JOB
    variable is set to the path specified.

kinconvert

    Updates old hip files to new IK structure.

    USAGE
      kinconvert

    Creates InverseKin Chops for all bone objects that have a solver
    type other than "none". This command easily updates old hip files to
    the new structure for performing IK.

linker

    Sets various options of the light linker.

    USAGE
      linker options [-d <desktop_name>] <pane1> ...

    You must specify a pane name. If you don't specify a desk name the
    command assumes the current desk.

    OPTIONS


        -d <desktop_name>
            Desktop to operate on.

        -m <string>
            Set both the link type and mode.

        -G <float>
            The horizontal split fraction between the source and target
            trees.

        -f <string>
            Set the source tree filter mask.

        -F <string>
            Set the target tree filter mask.

        -s <string>
            Set the source tree selection mask.

        -S <string>
            Set the target tree selection mask.

        -e 0|1
            Expose the source tree selection toolbar.

        -E 0|1
            Expose the target tree selection toolbar.

        -w 0|1
            Display the source tree parameter spreadsheet.

        -W 0|1
            Display the target tree parameter spreadsheet.

        -h <float>
            The horizontal split fraction between the tree and
            spreadsheet in the source tree.

        -H <float>
            The horizontal split fraction between the tree and
            spreadsheet in the target tree.

        -c 0|1
            Export the current node in the source tree as the view
            camera to any linked viewers.

        -R 0|1
            Set the readonly selection flag for the target tree.

listchooser

    REPLACED BY
      - hou.ui.selectFromList()

    Presents a graphical interface to the user to choose from a list of
    options.

    USAGE

         1. listchooser [-r] [-p] [-t <title>] [-h <help>] [-c <header>]
            choice1 choice2 ...

    OPTIONS


        -r
            Radio (only one choice can be selected).

            When this option is not present, the command will return
            multiple choices as a space-separated list.

        -p
            Output the string corresponding to the choice instead of the
            index number.

        -t
            Title for choice window.

        -c
            Column header. You can click on this header to sort the list
            (only in graphical mode).

        -s
            Specify initial selection of items in the chooser. The
            option takes a space separated list of choices.

        -h
            Help string to present to the user (only in non-graphical
            mode).

    EXAMPLES

      > listchooser -p -t "What is your quest?" \
      >     "To seek the holy grail" \
      >     "To count to 3 without skipping 2" \
      >     "To slay a dragon"
        Outputs "To seek the holy grail" if user chooses first option,
        "To count to 3 without skipping 2" if the user chooses the
        second option, etc. If the user chooses multiple options, they
        are returned as a space separated list:

      > "To seek the holy grail" "To slay a dragon"
      > listchooser -r -t "What is your favorite color?" \
      >     Red Blue "No Yellow"

        Outputs 0 if user chooses the first option, 1 if the user
        chooses the second option, etc.

      > listchooser -s "'red green' blue" black blue "red green" red green

        Opens a graphical chooser with two items ("red green" and
        "blue") selected from the 5 items ("black", "blue", "red green",
        "red" and "green").

loadaudio

    Load, unload, and set options for audio.

    USAGES
      loadaudio [-f <frame>] [-t <time>] [-v <volume>] [-s off|on] [-r
      rate]
      loadaudio <audio_file>
      loadaudio -u


    NOTE
        This command is only available in MPlay.

    OPTIONS


        -f <frame>
            The frame to align the audio start time with (default frame
            1).

        -t <time>
            the audio start time to sync with the start frame (default
            0sec).

        -v <volume>
            Audio volume (1=normal, 0=mute).

        -s off|on
            Turns audio sustain on or off (default on).

        -S off|on
            Turns Audio FPS synchronization on or off (default on). When
            on, changing the FPS on the playbar will cause the audio to
            slow down or speed up so that it stays synchronized with the
            images playing back at their natural FPS. When off, audio
            and images may no longer be synchronized if the FPS changes.

        -F <fps>
            The natural frames per second of the audio. This is set to
            the initial FPS mplay upon startup.

        -r rate
            The audio scrub rate to use (default 45).

        -u
            Unload the current audio clip.

    EXAMPLES

      > loadaudio talking.aiff
        set the audio to 'talking.aiff'

      > loadaudio -u

        unload the audio (turn it off)

      > loadaudio -v 0.5

        set the volume to half

      > loadaudio -f 48 -t 2

        sync audio time of 2sec with frame 48

      > loadaudio -s off

        turn sustain off.

    RELATED

      * loadseq

loadseq

    Loads a sequence of files into mplay.

    USAGE
      loadseq [-r] [-u] [-f <start> <end>] <file_pattern>

    <file_pattern> can use either \$F or * to specify the frame number.

    OPTIONS


        -r
            (Replace) Load and discard all currently loaded sequences.

        -u
            (Unbuffered) Load images without caching.

        -f start end
            Load the sequence using the given start and end frames.

    EXAMPLES

      > loadseq ~/shot1/frame\$F.pic
      > loadseq -r ~/shot1/frame*.pic

    RELATED

      * appendseq

      * loadaudio

      * prependseq

matrman

    Generate a RenderMan sl file from a shader.

    USAGE
      matrman <shader_name>

    To save the .sl file to a disk file, redirect the output to the disk
    file you want.

matupdateref

    Updates all the Palette material references.

    USAGE
      matupdateref

    If the palette on disk has changed that the material is referencing,
    then this command will force a reload on the Palette material.

memory

    Prints current memory usage.

    USAGE
      memory [-b]

    OPTIONS


        -b
            Print current memory usage as byte count.

menurefresh

    Reloads the contents of the OPmenu.xml, PARMmenu.xml,
    ParmGearMenu.xml and CHGmenu.xml menu files.

    USAGE
      menurefresh

    The OPmenu.xml file specifies the contents of the node context (RMB)
    menu. The PARMmenu.xml file specifies the contents of the parameter
    context menu. The ParmGearMenu.xml file specifies the contents of
    the gear icon menu in the parameter editor. The CHGmenu.xml file
    specifies the contents of the channel group context menu. Any
    changes you make to these files while Houdini is running will not
    show up in the menus until you runs this command.

message

    REPLACED BY
      - hou.ui.displayMessage()

    Presents text to the user.

    USAGE
      message [-b <button1>,<button2> [-p] [-d <num>] [-h <help>] [-t
      <title>]] text

    In a non- graphical application such as the hscript standalone
    application, this command is similar to the echo command except that
    the text will always be displayed in the console, even if the
    command output is being redirected to a file or elsewhere.

    In a graphical application such as Houdini, this command brings up a
    dialog box with the specified text. All further commands and
    processing are stopped until the user dismisses the dialog.

    OPTIONS


        -h <help>
            Provides supplementary text to print with the message. Use
            single quotes to encapsulate messages containing spaces.

        -t <title>
            Give the dialog box a custom title caption. Use single
            quotes to encapsulate messages containing spaces.

        -b <button1>,<button2> [-p] [-d <num>]
            Adds buttons to the dialog box or prints choices in non-
            graphical applications. The choices are comma separated and
            if they contain spaces, they need to be all encompassed in
            quotes. The command returns the choice that the user
            selected (starting with 0 for the first, 1 for second,
            etc.). If an error occurred, like end of file in non-
            graphical applications, then -1 is returned.

        -d <num>
            Specifies the index to use as a default choice.

        -p
            This option causes this command to print (return) the label
            of the pressed button instead of its index.

    EXAMPLES

      > message Some informative message
      > message -b Yes,No -d 0 Would you like to proceed?
      > message -b "Save and Exit,Discard and Exit,Cancel" -d 0 Your choice?
      > message -b Retry,Cancel -h 'Ensure that the destination path exists and is not write-protected.' -t 'Save Error' Cannot save the file to the specified location.
      > set x = `run("message -b yes,no some message")`

    RELATED

      * echo

      * java

      * openport

mnew

    REPLACED BY
      - hou.hipFile.clear()

    Resets the session.

    USAGE
      mnew

    Current session will be replaced with an empty session. This is
    equivalent to "File -> New" in an interactive session.

    EXAMPLES

      > mnew
        Clear the current session.

    RELATED

      * mwrite

      * opread

      * source

mplayfit

    Fits the mplay window to the image (at 100%).

    USAGE
      mplayfit

    This command is only available in mplay.

mplayhome

    Fits mplay image to the viewport size.

    USAGE
      mplayhome [-e]

    This command is only available in mplay.

    OPTIONS


        -e
            Exact image size - sets the zoom to 100% and center in
            viewport.

mplayprofile

    Sets the current mplay profile.

    USAGE
      mplayprofile
      default|viewer|flipbook|render|tools|monitor|minimal|full

    This will cause the mplay UI to change to the profile configuration.

  * default - used when mplay is run

  * viewer - used when mview is run

  * flipbook - used for COP flipbooks

  * render - used for renders to ip or md

  * tools - used for the COP/Halo viewer.

  * monitor - used for COP/Halo node monitors.

  * minimal - minimal UI layout; viewport only.

  * full - All UI exposed.

    This command is only available in mplay.

mread

    REPLACED BY
      - hou.hipFile.load()
      - hou.hipFile.merge()

    Loads a hip file.

    USAGE
      mread [-m <merge_pattern> | -M] [-c] [-o] [-i] <filename>

    OPTIONS


        -m <merge_pattern>
            Merges the file into the current HIP file. <merge_pattern>
            indicates which sections of the file to merge in.

        -M
            Merge entire file in (Shortcut for -m *).

        -c
            List "collisions" that would occur if a merge was done,
            where an object in the merge file has the same name as an
            existing object.

        -o
            When merging, overwrite nodes with the same name as nodes in
            the merge file.

        -i
            (Interactive) Acts as if the file was loaded via "File ->
            Open...". Prompts you to save the current file before
            loading the new file and it displays any load errors in a
            popup window. Also changes the name of the current file at
            the top of the main window and adds the file name to the
            list of most recently used files.

            This option is not available in hscript.

            You cannot specify other options with this option.

    EXAMPLES

      > mread job3.hip
        Replace current HIP file with job3.

      > mread -m * job3.hip

        Merge in everything from job3.

      > mread -m *geo* job3.hip

        Merge in all ops which match *geo*.

    RELATED

      * mwrite

      * mnew

      * opread

      * source

mwrite

    REPLACED BY
      - hou.hipFile.save()
      - hou.hipFile.saveAndIncrementFileName()
      - hou.hipFile.saveAsBackup()

    Save the current session to a hip file.

    USAGES
      mwrite [-i | -b] [-n] [<filename>]
      mwrite -c <filename>

    OPTIONS


        -i
            Automatically increment filename.

        -b
            Create a numbered backup. If <filename> already exists, then
            it is renamed to a file name containing the next number in
            the sequence before saving. The backup files are saved in
            the directory set in the environment variable
            HOUDINI_BACKUP_DIR. If HOUDINI_BACKUP_DIR is not set, then a
            default relative directory called "backup" is used.

        -n
            Save a copy of the data under a different name.

        -c <filename>
            Save a partial hip file containing only the animation
            channels. You can load the channels from such a file using
            mread -o -M.

    RELATED

      * mread

      * mnew

      * opwrite

      * opscript

nbadd

    REPLACED BY
      - hou.Node.createNetworkBox()

    Create network boxes

    USAGE
      nbadd [-v] <name1> [<name2>...]

    If no arguments are specified, a single network box is created with
    a default name. If a list of names is entered, network boxes will be
    created and given the names specified.


    NOTE
        Network box names are not displayed in the network editor pane.
        Instead, network boxes can be given a "comment" which appears in
        the title bar of the network box (and can be any string, not
        limited to the rules for network box names). To set this comment
        value, the python command

    must be used to run a HOM command as demonstrated in the example
    below.

    OPTIONS


        -v
            Output the actual name of the new network box.

    EXAMPLES

      > cd /obj
      > nbadd leftarm rightarm
      > python -c 'hou.item("/obj/leftarm").setComment("Left arm")'
        Creates two network boxes called leftarm and rightarm. Sets the
        comment on leftarm to Left arm.

    RELATED

      * nbget

      * nbop

      * nbrm

      * nbset

nbcolor

    REPLACED BY
      - hou.NetworkBox

    Color network boxes

    USAGE
      nbcolor [-c <r> <g> <b>] <networkboxes>

    Prints out the color for the the network box(es) specified.

    OPTIONS


        -c
            Sets the specified network box(es) to have the
            colorcorresponding to the space separated "r g b" values
            between 0 and 1

    EXAMPLES

      > nbcolor -c 0.5 0 0.5 netbox1

    RELATED

      * opcolor

nbcp

    REPLACED BY
      - hou.Node.copyNetworkBox()

    Copy network boxes

    USAGE
      nbcp [-c] <networkbox1> [<networkbox2>...] <destination>

    This will copy the network boxes specified, along with their
    contents. If the destination directory is specified then it will be
    copied there. If not, the network box will be copied to a new
    network box with the destination name (a new name will be generated
    if there's already a network box with that name).

    OPTIONS


        -c
            All operators created by the copy will have their animatable
            parameters set to reference the original operators.

    EXAMPLES

      > nbcp -c netbox* .
      > nbcp /obj/geo1/* /obj/geo2
      > nbcp netbox1 arm

    RELATED

      * opcp

      * nbname

      * nbrm

nbget

    REPLACED BY
      - hou.NetworkBox

    Get network box flag information

    USAGE
      nbget [-q] [<flag>] ... [<network boxes>] ...

    The nbget command queries individual network box flags and outputs
    the result as an "nbset" command. If no specific flags are
    specified, the values of all flags are outputted. The -q option will
    cause no messages to be printed on an unknown flag or network box.

    OPTIONS


        -m
            Minimized

        -p
            Picked

    EXAMPLES

      > nbget -m netbox*
      > nbget geo*/*

    RELATED

      * nbadd

      * nbset

nbglob

    REPLACED BY
      - hou.Node.findNetworkBoxes()

    Pattern expansion for network box names

    USAGE
      nbglob [-r | -f] <network_box_pattern>

    Does pattern expansion on the given pattern with respect to network
    box names, then prints out the output of the expansion.

    OPTIONS


        -r
            Output relative paths

        -f
            Output full paths

    EXAMPLES

      > nbglob -f ./subnet1/netbox*

    RELATED

      * opglob

nblocate

    REPLACED BY
      - hou.NetworkBox

    Locate and move network boxes

    USAGE
      nblocate [-d] [-x <xval>] [-y <yval>] <networkbox_pattern>

    Locates the specified network boxes in the network view. These
    coordinates are absolute coordinates on the network, and are
    unchanged by panning or zooming on the network.

    OPTIONS


        -d
            The -x and -y specified are deltas and are added to the
            current location

        -x
            Specifies the X position

        -y
            Specifies the Y position

    RELATED

      * nbsize

nbls

    REPLACED BY
      - hou.NetworkBox
      - hou.Node.networkBoxes()
      - hou.Node.iterNetworkBoxes()
      - hou.Node.findNetworkBox()

    List network boxes

    USAGE
      nbls [-R] [-a] [-l] [-t] [<name_pattern>]

    Lists the network boxes specified (or all the network boxes in the
    current path). 'name_pattern' can be used to specify both network
    boxes to list and networks or subnetworks to traverse within.

    OPTIONS


        -R
            Recurse through all networks and subnetworks

        -a
            Consider all operators for traversal (including hidden ones)

        -l
            Print in long format (show more information).

            The long format lists flags of the network box. A hyphen (-)
            is printed if the flag is not active.


            m
                Minimized

            s
                Selected

            If the network box contains items, the number of items it
            contains will be printed in parentheses.

        -t
            Sort network boxes by their last modified time

    EXAMPLES

      > nbls -lR netbox*

    RELATED

      * opls

nblsop

    REPLACED BY
      - hou.NetworkBox

    Lists operators contained in network boxes

    USAGE
      nblsop [-a] [-f] [-l] [-o] [-q] [-t] <name_pattern>

    Lists all operators contained within the network boxes specified by
    'name_pattern'.

    OPTIONS


        -a
            List all operators in a network box (including hidden ones)

        -f
            Print full paths

        -i
            Also list any subnet indirect inputs found within the
            network boxes. These will always be listed after the
            operators in each network box.

        -l
            Print operator information in long format

            The long format lists many flags for operators. A hyphen (-)
            is printed if the flag is not active.


            d
                Display

            r
                Render

            t
                Template

            l/L
                Locked (soft-locked/hard-locked)

            e/h
                Exposed or hidden

            b
                Bypassed

            c
                Current

            s
                Selected

            If the node contains other operators, the number of
            operators it contains will be printed in parentheses. For
            example, an object containing SOPs or a subnetwork.

        -o
            Omit network box names

        -q
            Prevent error message from being printed

        -v
            Sort operators in each network box by last modified time

    EXAMPLES

      > nblsop -lq netbox*

    RELATED

      * nbls

      * opls

nbname

    REPLACED BY
      - hou.NetworkBox

    Renames a network box

    USAGE
      nbname <old_name> <new_name>

    Renames the specified network box to the new name.

nbop

    REPLACED BY
      - hou.NetworkBox

    Sets the contents of a network box.

    USAGE
      nbop [-i] [-s] <networkbox_name> <set|add|remove>
      <node_name_pattern>

    Use this command to set the contents of a network box, or to add or
    remove items from a network box.

    OPTIONS


        set <node_name_pattern>
            Sets the contents of the network box to be the nodes whose
            names match 'node_name_pattern'.

        add <node_name_pattern>
            Adds nodes matching the given patterns to the network box.

        remove <node_name_pattern>
            Removes nodes matching the given patterns from the network
            box.

        -i
            Specifies that node_name_pattern should be a number. In this
            case the "indirect inputs"s of the given numbers will be
            considered for the requested operation. Use this to get at
            the inputs from within a subnet OP.

        -s
            Snaps the borders of the network box to a snug fit around
            the network box's new contents.

    EXAMPLES

      > nbop netbox1 set light*
        Set the contents of the box to be all nodes beginning with the
        string "light".

      > nbop -i netbox1 add 1 2 3

        Add the first, second, and third "indirect input"s in the subnet
        OP to the box

      > nbop netbox1 remove li* ^light*

        Remove all nodes from box1 that start with the string "li", with
        the exception of any nodes that start with "light"

nbrm

    REPLACED BY
      - hou.NetworkBox

    Deletes network boxes

    USAGE
      nbrm [-f] [-r] <networkbox_pattern>

    The specified network boxes will be deleted. Note that this does not
    delete a network box's contents unless -r is specified.

    OPTIONS


        -f
            Prevent error messages from being printed.

        -r
            Recursively delete the network box's contents as well.

    RELATED

      * nbadd

      * nbop

nbset

    REPLACED BY
      - hou.NetworkBox

    Set network box flags.

    USAGE
      nbset [-q] [<flag> on|off|toggle|#] ... <network_boxes>...

    The nbset command turns various network box flags on or off. A
    numeric value passed will turn a flag on if it is non-zero,
    otherwise it will turn it off. A value of toggle will cause the flag
    to switch to the opposite value.

    OPTIONS


        -m
            Minimized

        -p
            Picked

        -q
            Prevents error messages from being printed on an unknown
            flag or network box.

    EXAMPLES

      > nbset -m on netbox*
        Minimizes all network boxes whose names begin with "netbox"

    RELATED

      * nbadd

      * nbget

nbsize

    REPLACED BY
      - hou.NetworkBox

    Resizes network boxes

    USAGE
      nbsize [-s] [-d] [-x <xval>] [-y <yval>] [-w <wval>] [-h <hval>]
      networkbox_pattern

    Resizes the specified network boxes in the network view. All
    coordinates, width, and height values are in absolute units on the
    network, and are unchanged by panning or zooming on the network. Use
    the -s option to automatically snap to a snug fit around the boxes'
    contents, or use the -x, -y, -w and -h options to manually resize
    the network box to the desired dimensions. If none of -s, -x, -y, -w
    or -h are specified, the current size is printed.

    OPTIONS


        -s
            Snaps the size of the network box to the minimum bounding
            box enclosing its contents. Includes a small border of
            buffer space around its contents.

        -d
            The -x, -y, -w, and -h specified are deltas and are added to
            the current values for the network box.

        -x
            Specifies the X position of the lower left corner of the
            network box. Does not move the entire network box as with
            oplocate.

        -y
            Specifies the Y position of the lower left corner of the
            network box. Does not move the entire network box as with
            oplocate.

        -w
            Specifies the width relative to the X position of the
            network box

        -h
            Specifies the height relative to the Y position of the
            network box

    EXAMPLES

      > nbsize -s netbox1
        Adjusts the size of box1 to match its minimum bounding box.

    RELATED

      * nblocate

netcolumns

    Sets the visible columns in the network editor's list mode.

    USAGE
      netcolumns [-f] [-h] [-c <columns>] <pane1> ...

    You must specify a pane name. If you don't specify a desk name the
    command assumes the current desk. If the columns are not specified,
    then a command is printed displaying the currently visible columns
    for the given pane.

    OPTIONS


        -f
            Collapses the vertical bar of filter buttons on the left
            edge of the network editor in list mode. If not specified,
            the filter button toolbar will be expanded.

        -h
            Hides all columns in the network editor list mode. The set
            of visible columns is remembered, but temporarily ignored.
            If this option is not specified, the columns in the list
            mode will be made visible.

        -c <columns>
            The <columns> variable is a comma-separated (no spaces) list
            of columns given below. Some columns are only available for
            certain network types.

          * expose

          * display

          * render

          * template

          * footprint

          * highlight

          * unload

          * select

          * origin

          * capture

          * bone

          * xray

          * export

          * audio

          * bypass

          * diskcache

          * lock

          * startrender

          * delscript

          * comment

          * input

neteditor

    This command is no longer used.

    This command was used to configure the old network editor pane. See
    networkeditor for information about configuring the new (Houdini
    16.0 and above) network editor pane.

netviewdep

    This command is no longer used.

    This command was used to configure the old network editor pane. See
    networkeditor for information about configuring the new (Houdini
    16.0 and above) network editor pane.

networkeditor

    Sets various options of the network editor.

    USAGE
      networkeditor options [-d <desktop_name>] <pane1> ...

    You must specify a pane name. If you don't specify a desk name the
    command assumes the current desk.

    For additional information see the pane command.

    OPTIONS


        -d <desktop_name>
            Desktops to operate on.

        -p <preference_map_string>
            Specifies a string specifying a JSON formatted dictionary of
            preference names to preference values.

nextkey

    Moves playback to the next or previous key.

    USAGES
      nextkey [-p]
      nextkey [-c <channel_list> | -s | -q]

    With no arguments, moves the playback head to the next key in the
    current channel list (which is initially empty). Use -p to go the
    previous key instead. Use -q to check which is the current channel
    list.

    OPTIONS


        -p
            Go to the previous key.

        -c <channel_list>
            Specify a channel list.

        -s
            Reset to the currently scoped channels.

        -q
            Print the current channel list.

nodegraph

    This command is no longer used.

    This command was used to configure the old network editor pane. See
    networkeditor for information about configuring the new (Houdini
    16.0 and above) network editor pane.

objcache

    Manipulates the internal object transformation cache.

    USAGE
      objcache [-c] [-l] [-L] [-s] [-m <memory>] [-M never|always] [-v]
      [-q]

    The object transformation cache stores the world positions of the
    objects whose "Cache Data" parameter is turned on. This command sets
    options for object transformation cache.

    OPTIONS


        -s
            Print the current settings.

        -l
            Print the cache status. This displays the current estimated
            memory use by object transforms.

        -L
            Prints a list of all OBJs that have a cached transform. The
            full path to each OBJ is printed. If the -v option is
            specified as well, the times and transform types are also
            specified

        -c
            Clear the OBJ cache.

        -m <memory>
            Set the maximum memory limit in kB (used by -M)

        -M never|always
            Specifies the behavior when maximum memory limit is reached.
            (never = the memory limit is ignored and cache may use up
            more memory than specified by -m. always = when the memory
            limit is exceeded, the least recently used transform will be
            replaced by new transforms.

    EXAMPLES

      > objcache -m 1024
        Sets the object cache memory limit to 1MB.

      > objcache -l -L

        Prints the information about the cache usage and lists the
        objects whose transformations have been cached.

    RELATED

      * texcache

      * geocache

      * opunload

objcleantransform

    REPLACED BY
      - hou.ObjNode.moveParmRotateIntoPreTransform()
      - hou.ObjNode.moveParmScaleIntoPreTransform()
      - hou.ObjNode.moveParmTranslateIntoPreTransform()
      - hou.ObjNode.moveParmTransformIntoPreTransform()

    Zeroes transforms on an object.

    USAGE
      objcleantransform <object_name> [-t] [-r] [-s]

    Resets the parameters of the given object so that it maintains its
    world position at the current time, but the transforms have the
    default values.

    Sets...
    To...
    All translates
    0.0
    All rotates
    0.0
    All scale values
    1.0
    Uniform scale
    1.0

    NOTE
        Internally, this command will moves the object's transforms into
        its pre-transform.

    You typically use this command on an object to define its "natural"
    coordinate space prior to animation.

    OPTIONS


        -t
            Zero translation.

        -r
            Zero rotation.

        -s
            Zero scale.

    RELATED

      * objextractpretransform

      * objresetpretransform

      * objpretransform

objextractpretransform

    REPLACED BY
      - hou.ObjNode.movePreTransformIntoParmTransform()

    Transfers an object's pre-transform values to its local transforms.

    USAGE
      objextractpretransform <object_name>

    Transfers the object's pre-transform values to the local transform
    parameters (for the current time). After this command, the pre-
    transform is reset to the identity matrix. Note that this destroys
    any existing channels or expressions in the translate, rotation, and
    scale parameters.

    Typically, this command is only used to help define an object's
    natural coordinate space prior to animation.

    RELATED

      * objcleantransform

      * objpretransform

      * objresetpretransform

objkinoverride

    Sets the kinematic override option.

    USAGE
      objkinoverride [none|rest|capture]

    With no arguments, the command prints the current kinematic override
    setting.

    OPTIONS


        [none|rest|capture]
            Sets the kinematic override option to:


            none
                (Default) No override: bones are affected by
                transformations and/or kinematic chop solvers.

            rest
                Rest position: bones are shown in their rest pose, and
                no kinematic solvers affect their displayed position.

            capture
                Capture pose: bones are shown in their capture position,
                no kinematic solvers or local transformation are in
                effect.

    RELATED

      * objkinoverride

objlightlink

    Manages object light category selection in a light-centric way.

    This command will provide linking information for a single light
    source. The command presents a chooser with all the objects in the
    scene, and shows which objects are lit by the specified light
    source.

    This command uses the Categories parameter on light sources in
    conjunction with the Light Categories parameter on objects. The
    effect of the Light Mask parameter is ignored by this chooser.


    NOTE
        This linking will also detected any Packed Edit SOPs and apply
        linking selection on a per-primitive level.

    USAGES
      objlightlink [-T title] <lightname>
      objlightlink [-T title] -t <tag_name>
      objlightlink -o <objectname> [packed_path]
      objlightlink -e <filename> [-l] [-o] [-s]
      objlightlink -i <filename> [-l] [-o] [-s]

    This command has four usages. The first (and most common) usage
    specifies the path to a light source. With this usage, the "linking"
    tag for the light source will be generated if it doesn't exist. The
    "linking" tag is a category tag which is prefixed with lb:. This tag
    will be used to determine the objects selected (lit) in the chooser.

    The second usage is where the tag is specified specifically using
    the -t option. This can be used if you have manually added tags to
    light sources. Since selection is based on tags, this will apply to
    multiple lights if the tag is shared between light sources.

    The third usage provides an object-centric view of linking
    information. When run in this mode, the list of all lights in the
    scene will be displayed. Changing the light selection will adjust
    the linking information for the given objectname. When the given
    object has packed primitives, you can optionally specify a packed
    primitive path for finer grained control.

    The command can also be used to export and import light linking
    information. The -e option will save the lighting information for
    the scene in the given file. If the filename is stdout, the
    information will be written to stdout. This lighting information can
    be imported into other scenes using the -i option.

    When exporting or importing lighting, the -l, -o, and -s options
    disable processing of specific lighting information.

  * -l: Don't export/import light objects.

  * -o: Don't export/import geometry object properties (materials, light
    linking).

  * -s: Don't export/import Packed Edit SOPs (visibility, materials,
    light linking).

    EXAMPLES

      > 
      > # Perform linking for /obj/pointlight1
      > objlightlink /obj/pointlight1
      > 
      > # Perform linking for all the light sources that have the "fill" tag
      > objlightlink -t fill
      > 
      > # Perform object-centric linking for the geometry object "geo1"
      > objlightlink -o /obj/geo1
      > 
      > # Perform object-centric linking for the packed primitive
      > # "/alembic/char_master/superhero" inside object "geo1"
      > objlightlink -o /obj/geo1 /alembic/char_master/superhero
      > 
      > # Export lighting information for the current scene
      > objlightlink -e $HIP/lighting.json
      > 
      > # Import only the light objects (no materials or light linking)
      > objlightlink -i $HIP/lighting.json -o -s

objmaterial

    REPLACED BY
      - hou.ObjNode.material()

    Manages object-local overrides of material parameters.

    This is basically the scripting equivalent of the Material Override
    menu in the parameter editor for objects. It allows you to create
    parameters on an object that override the equivalent values on the
    object's material.

    USAGE
      objmaterial <object_path> <operation> [<parameters>]

    OPTIONS


        Operations

            override
                Create parameters on the object to override _all_
                material parameters.

            select
                Select and create object parameters to override material
                parameters.

            remove
                Removes _all_ object parameter overrides.

            rmdefault
                Removes any unchanged object parameters (that is, that
                are currently set to their default value).

            sync
                Synchronize the object parameter overrides with the
                parameter definitions on the material.

            revert
                Revert any parameter overrides on the object to their
                values on the material.

            addlist
                (Followed by a space separated list of parameter names.)
                Creates object parameters to override the named
                parameters on the material.

    EXAMPLES

      > 
      > # Add all material overrides
      > objmaterial geo1 override
      > 
      > # Remove all material overrides
      > objmaterial geo1 remove
      > 
      > # Add specific overrides for "baseColor" and "roughness" parameters
      > objmaterial geo1 addlist baseColor roughness

objparent

    Controls the "keep position when parenting" option.

    USAGE
      objparent [on|off|useflag]

    With no arguments, prints the current setting.

    OPTIONS


        on|off|useflag

            on
                Always maintain world space position.

            off
                Never change the object's position.

            useflag
                Positioning depends on the "keeppos" parameter of the
                object.

objpretransform

    REPLACED BY
      - hou.ObjNode.preTransform()
      - hou.ObjNode.setPreTransform()

    Sets or displays an object's pre-transform matrix.

    USAGE
      objpretransform [-a ] <object_name> [<matrix>]

    The <matrix> argument specifies a 4x4 double precision matrix in
    column-major format to set into the object.

    If you don't specify a matrix, the object's current pre-transform is
    printed in column-major double precision format.

    Typically, this command only appears in object scripts created by
    the opscript command.

    OPTIONS


        -a
            Multiply current pretransform with given matrix.

    RELATED

      * objcleantransform

      * objextractpretransform

      * objresetpretransform

      * opscript

objresetpretransform

    REPLACED BY
      - hou.ObjNode.setPreTransform()

    Resets the given object's pre-transform values to the identity
    matrix.

    USAGE
      objresetpretransform <object_name>

    Typically, this command is only used to help define an object's
    natural coordinate space prior to animation.

ombind

    Binds a handle to an operator parameter.

    USAGE
      ombind [-t obj|sop|pop|cop2] [-d <settings>] <instance> <op_parm>
      <handle_parm>

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

        -d <settings>
            The default settings for this handle type when bound to this
            type of operator. The meaning of these settings varies
            between types of handles.

            This option only has meaning when the instance of the handle
            does not yet exist (ie. it only works for the first ombind
            command in the set of commands for one handle).

            To turn the handle off by default, use a default setting of
            "i".

    EXAMPLES

      > ombind -t sop "First U" carve:group uisoparm:input
      > ombind -t sop "First U" carve:domainu1 uisoparm:k
        The first command binds the group parameter of the carve sop, to
        the movement of the input parameter of the uisoparm handle.

        The "First U" instance is created assuming it is not already
        created. The domainu1 binding to the handle parameter k is
        appended to the existing "First U" instance.

    RELATED

      * ombindinfo

      * omls

      * omunbind

      * omwhere

      * omwrite

ombindinfo

    Lists parameters bound to an operator's handle.

    USAGE
      ombindinfo [-t obj|sop|pop|cop2] <operator>

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

    EXAMPLES

      > ombindinfo carve
        Lists the bound parameters of the carve sop operator.

    RELATED

      * ombind

      * omls

      * omunbind

      * omwhere

      * omwrite

omls

    Lists the available handles for an operator type.

    USAGE
      omls [-t obj|sop|pop|cop2] [handle]

    If you don't specify a handle, the command prints the available
    handles. If you specify a handle, the command prints the bindable
    parameters on the handle.

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

    EXAMPLES

      > omls domain
        Lists the bindable parameters of the domain handle.

    RELATED

      * ombind

      * ombindinfo

      * omunbind

      * omwhere

      * omwrite

omparm

    Changes a handle's settings.

    USAGE
      omparm <manip_name> <manip_type> <op_node_name> <settings>

    For the given handle (handle) and operator node, set the handle's
    settings to the specified settings string. These settings will be
    used the next time the user enters the state for this operator node.

    The values for the settings are specific to the type of handle and
    are undocumented. This command is used internally to save handle
    settings to the hip file.

    RELATED

      * ombind

      * ombindinfo

      * omunbind

      * omwhere

      * omwrite

omsbind

    REPLACED BY
      - hou.SopNodeType.addSelector()

    Binds an operator parameter to a selector

    USAGE
      omsbind [-t obj|sop|pop|cop2] <op_parm> <selector>
      <sel_description> <sel_prompt> <op_input_index>
      <op_input_required> <primmask> <allow_drag> <menu_name>
      <ast_sel_all>

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

        <op_parm>
            the operator and the parameter to be bound, delimited by a
            colon. The parameter specification is optional.

        <selector>
            Name of the selector type. A list of selectors can be
            obtained using the omsls command.

        <sel_description>
            Description of the purpose of the selector. Used with
            omsunbind.

        <sel_prompt>
            The string that is displayed in the status area when the
            selector is active.

        <op_input_index>
            Index of operator input where the result of this selection
            should be fed.

        <op_input_required>
            Whether this input is required.

        <primmask>
            A string representing the types of primitives that can be
            picked using this selector.

            This string can have one or more primitive types, or
            primitive types preceded by a "^" to remove that primitive
            type from the selectable primitive types.

            The available primitive types are: all, face, poly,
            nurbcurve, bezcurve, hull, mesh, nurb, bez, quadric, circle,
            sphere, tube, particle, and meta.

        <allow_drag>
            Whether the user is allowed to select and begin manipulation
            with a single mouse click.

        <menu_name>
            Name of the operator's "Group Type" parameter (or "" if
            there is none). This lets the selector set this parameter to
            "Primitive" if the user selected primitives, "Points" if the
            user selected points, etc.

        <ast_sel_all>
            If set to a non-zero value, this indicates that the group
            parameter requires a "*" to select all geometry. A zero
            value indicates that the group parameter should be left
            blank if the whole geometry is selected.

    EXAMPLES

      > omsbind -t obj blend objselect "Second Input" "Select the second blend input" 1 1 all 0 "" 0
        Binds a simple object selector to the second input of the blend
        object.

    RELATED

      * omsbindinfo

      * omsls

      * omsunbind

      * omswhere

      * omwrite

omsbindinfo

    REPLACED BY
      - hou.SopNodeType.selectors()

    Lists the selectors bound to an operator.

    USAGE
      omsbindinfo [-t obj|sop|pop|cop2] <operator>

    Output format:

  * selector

  * "Selector Label"

  * "Selector Prompt"

  * op_parameter

  * op_input_index

  * op_input_required

  * primmask

  * allow_drag

  * menu_name

  * ast_sel_all

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

    EXAMPLES

      > omsbindinfo carve
        Lists the bound selectors of the carve sop operator.

    RELATED

      * omsbind

      * omsls

      * omsunbind

      * omswhere

      * omwrite

omsls

    REPLACED BY
      - hou.SopNodeType.selectors()

    Lists the available selectors for an operator type.

    USAGE
      omsls [-t obj|sop|pop|cop2]

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

    EXAMPLES

      > omsls -t obj
        Lists the selectors that can be bound to object parameters.

    RELATED

      * omsbind

      * omsbindinfo

      * omsunbind

      * omswhere

      * omwrite

omsunbind

    REPLACED BY
      - hou.Selector.destroy()

    Removes bindings between operators and selectors.

    USAGE
      omsunbind [-t obj|sop|pop|cop2] <operator> [<instance>]

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

        <operator>
            Operator from which to remove bindings.

        <instance>
            Label of the selector to disconnect from the operator.

    EXAMPLES

      > omsunbind particle
        Removes all selector bindings for the particle Sop.

      > omsunbind particle "Force Geometry"

        Removes the selector with the label "Force Geometry" from the
        particle Sop.

    RELATED

      * omsbind

      * omsbindinfo

      * omsls

      * omswhere

      * omwrite

omswhere

    REPLACED BY
      - hou.SopNodeType.selectors()

    Lists the operators bound to a selector.

    USAGE
      omswhere [-t obj|sop|pop|cop2] <selector>

    If you don't specify a selector, the command lists all operators
    bound to a selector.

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

        <selector>
            Selector for which to list bindings.

    EXAMPLES

      > omswhere everything
        Lists any operators bound to the "everything" selector.

    RELATED

      * omsbind

      * omsbindinfo

      * omsls

      * omsunbind

omunbind

    Removes bindings between an operator and a handle.

    USAGE
      omunbind [-t obj|sop|pop|cop2] <op_parm> [<instance>]

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

        <op_parm>
            bindings to remove with respect to the bound operator. Use
            the forms:

          * <operator_name>

          * <operator_name>:<parm_name>

            (You must specify the operator name.)

        <instance>
            label of the handle to disconnect from the operator or
            parameter.

    EXAMPLES

      > omunbind xform
        Removes all bindings for the xform sop.

      > omunbind xform:tx

        Removes all bindings to xform's tx parameter.

      > omunbind xform:tx Transformer

        Removes all bindings of xform's tx parameter that are bound to
        the Transformer handle.

    RELATED

      * ombind

      * ombindinfo

      * omls

      * omwhere

      * omwrite

omwhere

    Lists the operators bound to a handle.

    USAGE
      omwhere [-t obj|sop|pop|cop2] [<handle>]

    If you don't specify a handle, the command lists all operators bound
    to any handle.

    OPTIONS


        -t obj|sop|pop|cop2
            Network type. Default is sop.

    RELATED

      * ombind

      * ombindinfo

      * omls

      * omunbind

      * omwrite

omwrite

    Writes out all handle and selector bindings to a file.

    USAGE
      omwrite [<bindings_file>]

    If no file name is specified, defaults to
    $HOME/houdini<version>/OPbindings.

    It is possible to use this file to replace the default bindings file
    $HH/OPbindings.

    RELATED

      * ombind

      * ombindinfo

      * omls

      * omunbind

      * omwhere

      * omsbind

      * omsbindinfo

      * omsls

      * omsunbind

      * omswhere

opadd

    REPLACED BY
      - hou.Node.createNode()
      - hou.NodeTypeCategory.nodeTypes()

    Adds an operator to the network.

    USAGE
      opadd [-e] [-i] [-n] [-u] [-v] <type> [<name>] [<name2> ...]

    With no arguments, the command prints a list of operators.

    If you specify a type, the command adds an operator of that type
    with a generic name.

    If you specify names, the command creates operators with the given
    names.

    OPTIONS


        -e
            Use the operator type name exactly as it is given.
            Otherwise, the type name may be first used to match the
            preferred operator type. For example "hda" may match a
            preferred operator "hda::2.0", which is a newer and
            therefore preferred version of the operator. Similarly, if
            there are two operators available, "namespaceA::hda" and
            "namespaceB::hda", and "namespaceB" has precedence, then the
            created node will be of preferred type "namespaceB::hda".

        -i
            Ignores nodes that already exist.

        -n
            Prevents the initialization script from running.

        -u
            Prevents any subnet contents from being loaded for custom
            subnet operators.

        -v
            Prints the name of the created operator.

    EXAMPLES

      > opadd geo arms legs
        Creates two geo objects called "arms" and "legs"

    RELATED

      * opchangetype

      * opget

      * opparm

      * oprm

      * opset

opalias

    REPLACED BY
      - hou.NodeType.aliases()
      - hou.NodeType.addAlias()
      - hou.NodeType.removeAlias()

    Allows an operator type to be created using an alternate name.

    USAGE
      opalias [<networktype> [<opname> <alias>]]

    When just the networktype option is specified, all current opalias
    commands for that network type are displayed. If no options are
    given, all opalias commands for all network types are displayed.

    EXAMPLES

      > opalias Sop merge mix
        allows a merge SOP to be created with the name mix

opautoplace

    REPLACED BY
      - hou.Node.moveToGoodPosition()

    Autoplaces a node tile within a network.

    USAGE
      opautoplace [-i] <node_name>

    This is useful for a node that was inserted manually into the center
    of a network. Instead of moving all the nodes below it, you can call
    opautoplace on that node to insert it nicely into the network.

    This command maintains the structure of the rest of the network,
    simply making room for the node(s) in the network. This differs from
    oplayout, which replaces the current network layout completely.

    OPTIONS


        -i
            moves the inputs to accommodate the new node, rather than
            the outputs, which is the default behavior.

    RELATED

      * oplayout

opbadd

    REPLACED BY
      - hou.addNodeBundle()

    Creates operator bundles.

    USAGE
      opbadd <bundle_name> [<bundle2_name> ...]

    Use the opbop command to modify the bundle.

    RELATED

      * opbls

      * opbop

      * opbrm

      * opbname

      * opgadd

      * opgop

      * opgrm

opbfilters

    Lists all valid filters for bundles.

    USAGE
      opbfilters

    Prints bundle filters in two columns. The first column specifies the
    bundle name and the second column provides a description of
    operators accepted by the filter.

    OPTIONS

    RELATED

      * opbop

      * opbadd

      * opbrm

      * opbname

opbls

    REPLACED BY
      - hou.NodeBundle.name()
      - hou.NodeBundle.pattern()
      - hou.NodeBundle.filter()
      - hou.NodeBundle.nodes()
      - hou.NodeBundle.isSelected()
      - hou.nodeBundle()
      - hou.nodeBundles()
      - hou.selectedNodeBundles()

    Lists bundles.

    USAGE
      opbls [-g] [-l] [-L] [-c] [-p] [<bundle_pattern>]

    Lists the bundles which match <bundle_pattern>.

    OPTIONS


        -g
            Print the information in the form of hscript commands.

        -l
            Long listing.

        -L
            Print only the contents of the bundle (Do not print bundle
            name, filter, or other information).

        -c
            Print out the bundle name and its operator contents only

        -p
            Print only the selected (picked) bundles

    RELATED

      * opbadd

      * opbrm

      * opbname

      * opgadd

      * opbop

      * opgop

      * opgrm

opbname

    REPLACED BY
      - hou.NodeBundle.setName()

    Renames a bundle.

    USAGE
      opbname <oldname> <newname>

    RELATED

      * opbls

      * opbadd

      * opbrm

      * opgadd

      * opbop

      * opgop

      * opgrm

opbop

    REPLACED BY
      - hou.NodeBundle.setPattern()
      - hou.NodeBundle.addNode()
      - hou.NodeBundle.removeNode()
      - hou.NodeBundle.clear()

    Modifies operator bundles.

    USAGE
      opbop [-v] <bundle_pattern> set|add|remove|filter|lock|unlock
      <nodes>

    OPTIONS


        set|add|remove|filter|lock|unlock

            set <nodes>
                Set the contents of the bundle(s) to be the list of
                nodes.

            add <nodes>
                Add the specified nodes to the contents of the bundle.

            remove <nodes>
                Remove the specified nodes from the bundle.

            filter <filter_value>
                Set the filter of the operator. This makes the bundle
                able to contain only specific types of operators.

                Use opbfilters to get a list of valid filter values.
                Also, if no filter name is provided, the list of
                available filters will be printed.

            lock
                Lock a bundle so Houdini does not automatically
                add/remove nodes. You can still modify the bundle's
                contents manually.

                That is, when a bundle is locked, its contents only
                change when the user explicitly adds or removes nodes
                (via the add/remove option of opbop or through the
                bundle pane interface).

                All bundles are locked when they are created.

            unlock
                Unlock a bundle so Houdini can automatically add/remove
                operators that match the bundle filter.

                That is, when a bundle is unlocked, Houdini will change
                its contents as nodes that match the filter are created
                or deleted. For example, if the user creates a Light
                object, Houdini will automatically add it to any
                unlocked bundles that allow Light objects.

            pattern <pattern_string>
                Sets the pattern for a bundle. This turns the normal
                bundle into a smart bundle (if it was not already). The
                bundle contents will consist of nodes whose names (or
                path) match the pattern. If the string_pattern is not
                specified, the bundle pattern is reset, and the bundle
                is converted into a normal bundle.

        -v
            (Verbose) Print information about set/add/remove operations.

    RELATED

      * opbls

      * opbadd

      * opbrm

      * opbname

      * opbfilters

      * opgadd

      * opgop

      * opgrm

opbrm

    REPLACED BY
      - hou.NodeBundle.destroy()

    Removes operator bundles.

    USAGE
      opbrm <bundle_pattern>

    RELATED

      * opbls

      * opbadd

      * opbop

      * opbname

      * opgadd

      * opgop

      * opgrm

opcf

    REPLACED BY
      - hou.cd()
      - hou.setPwd()

    Changes to a different folder in the operator hierarchy.

    USAGE
      opcf <op_path>

    RELATED

      * ucd

opchange

    Search and replace text in parameter values.

    USAGE
      opchange [-t <type_pattern>] [-T <network_type>] [-n
      <name_pattern>] [-N <fullpath_pattern>] [-p <path>] [-s] [-i]
      <from_string> <to_string>

    Searches all parameters of operators matching the given criteria for
    <from_string>. If found, it is replaced with the <to_string>.

    OPTIONS


        -t <type_pattern>
            Changes operators whose type matches <type_pattern>.

        -T <network>
            Changes operators of <network_type> (see optype for
            information on network types).

        -n <name_pattern>
            Changes operators with names matching <name_pattern>.

        -N <fullpath_pattern>
            Changes operators with full paths matching
            <fullpath_pattern>.

        -p <path>
            Start searching from this path in the operator hierarchy. If
            you don't specify a path, the search begins at the root (/).

        -s
            (Silent) Do not print the list of changes.

        -i
            Normally, <from_string> only matches whole words (for
            example, string "myobj" would not match value "myobj1". You
            can use the -i flag to make the string match word
            substrings.

    EXAMPLES

      > opchange plastic constant
        Would change the word plastic to the word constant wherever it
        is found.

      > opchange -n geo* plastic constant

        Find all operators whose name begins with geo, changing the word
        plastic to the word constant.

      > opchange -t light plastic constant

        Find all operators of type light, changing the word plastic to
        the word constant.

      > opchange -T SHOP plastic constant

        Find all SHOPs, changing the word plastic to the word constant.

      > opchange -p /obj plastic constant

        Find all operators under /obj, changing the word plastic to the
        word constant.

    RELATED

      * opfind

opchangetype

    REPLACED BY
      - hou.Node.changeNodeType()

    Changes an operator to a new type.

    USAGE
      opchangetype [-n] [-p] [-q] [-c] -t <operator_type>
      <operator_pattern>

    OPTIONS


        -n
            Keep name.

        -p
            Keep parameters.

        -c
            Keep network contents.

        -f
            Force change when a node is already of the specified type.

        -q
            Operate quietly. This option suppresses output of warnings
            and errors during the conversion. Only errors that actually
            prevent the operation from working will be output (such as
            specifying an invalid node to convert, or an invalid new
            node type).

    EXAMPLES

      > opchangetype -n -p -t null /obj/logo

    RELATED

      * opadd

      * opget

      * opparm

      * opset

opchmod

    Changes the access permissions of operators.

    USAGE
      opchmod <permissions> <operator_pattern>

    Permissions specify the abilities of a node's user and others to
    read, write, and/or execute an operator. "Write" permission is the
    ability to change parameter values. "Execute" permission is the
    ability to render.

    The "user" is the account that created the operator. This is stored
    on a per-node basis.


    NOTE
        "Group" permissions are not implemented.

    To query permissions, use opstat.

    OPTIONS


        <permissions>
            You can specify permissions in two ways (these correspond to
            the way the UNIX chmod command works).

          * A letter/symbol code where...

          * A three-digit octal number where...

    EXAMPLES

      > opchmod o-rw /obj/geo1
        Removes permission for others to read and/or write from
        /obj/geo1.

      > opchmod 777 /out/vmantra*

        Gives full permissions to everyone for all nodes in /out
        starting with vmantra.

    RELATED

      * opstat

opcollapse

    REPLACED BY
      - hou.Node.collapseIntoSubnet()

    Collapses nodes into a subnetwork.

    USAGES
      opcollapse [-v] [-n <subnetname>] -p <network>
      opcollapse [-v] [-n <subnetname>] <node_list>

    This command collapses a given list of nodes, <node_list> into a
    subnetwork. If the -p option is specified, then the selected nodes
    in <network> are used instead, and <node_list> is ignored.

    OPTIONS


        -v
            Output the name of the newly created subnet.

        -n <subnetname>
            Wherever possible, give the new subnet the name
            <subnetname>.

        -p <network>
            Collapses all the selected nodes in <network>

opcolor

    REPLACED BY
      - hou.NetworkMovableItem.color()
      - hou.NetworkMovableItem.setColor()

    Gets or sets an operator's tile color in the network editor.

    USAGE
      opcolor [-c <r> <g> <b>] <node> [<node2> ...]

    If you don't specify a color with -c, the tile's current color is
    printed.

    OPTIONS


        -c <r> <g> <b>
            Specify a color using red, green, and blue values between 0
            and 1.

opcomment

    REPLACED BY
      - hou.Node.comment()
      - hou.Node.setComment()
      - hou.Node.appendComment()

    Gets or sets a comment string for an operator.

    USAGE
      opcomment [-a] [-c <comment_string>] <node> [<node2> ...]

    If you don't specify a comment string with -c, prints the node's
    current comment.

    You can specify multiple nodes. opcomment will assign/append the
    comment string to all of them.

    OPTIONS


        -a
            Appends to the existing comment instead of replacing it.

        -c <comment_string>
            The string to set the comment to. If you omit this option,
            opcomment prints the node's current comment.

    EXAMPLES

      > opcomment /obj/model1
        Print the comment attached to /obj/model1.

      > opcomment -c "Delete this once the real geometry is done" /obj/model1

        Attach a comment to /obj/model1.

      > opcomment -a -c " (Touched by matt 24-Dec-06)" /obj/model1

        Add text to the existing comment on /obj/model1.

opcook

    REPLACED BY
      - hou.Node.cook()

    Tells (or forces) an object to re-cook.

    USAGE
      opcook [-F] [-f <frame_start> <frame_end>] [-i <frame_inc>] [-v]
      <object>

    OPTIONS


        -F
            Force object to recook.

        -f <frame_start> <frame_end>
            Specify a range of frames at which to cook the object.

        -i <frame_inc>
            Only cook every frame_inc frames.

        -v
            (Verbose) Print information about the evaluations performed.

opcopy

    REPLACED BY
      - hou.copyNodesToClipboard()

    Copies an operator and its dependencies to the clipboard.

    USAGE
      opcopy [-d] [-e] [-i] [-o] <operator>

    This command is similar to the UI operation of copying/paste,
    however it will also copy all operators which the specified operator
    depends on.

    If no options are given, -d and -o (dependencies and outputs) are
    copied.

    You can paste the copies back into the scene with oppaste.

    OPTIONS


        -d
            Copy operators which the operator depends on as well.

        -i
            Copy the input nodes of the operator as well.

        -o
            Copy the output nodes of the operator as well.

        -e
            Copy the "extra" nodes of the operator as well. Extra nodes
            are nodes referenced indirectly (via an expression).

    EXAMPLES

      > opcopy /obj/geo1
      > oppaste /obj

    RELATED

      * opcp

      * opdepend

      * oppaste

opcp

    REPLACED BY
      - hou.copyNodesTo()

    Copies an operator to a new place in the operator hierarchy.

    USAGE
      opcp [-N] [-S] [-c] <operator1> [<operator2> ...] [<destination>]


    NOTE
        If an operator with the same name exists at the destination, the
        copy will be renamed.

    OPTIONS


        -N
            Save any network boxes that match the names provided,
            without automatically saving their contents.

        -S
            Same as -N option, but also saves each specified network
            box's contents. Will avoid duplicate saving of an operator
            if both the operator and its network box are specified by
            the names provided.

        -c
            (Clone) Copies have their animatable parameters set to
            reference the original operator. You can override parameters
            by changing the channels manually after copying.

    EXAMPLES

      > opcp geo* .
      > opcp /obj/geo1/* /obj/geo2
      > opcp geo1 fred

    RELATED

      * opname

      * oprm

      * nbcp

opdefaultcolor

    Changes the initial color of a node when it is put down.

    USAGES
      opdefaultcolor [<networktype> [<opname>] [<defaultcolor>]]
      opdefaultcolor [-c] [<networktype>]
      opdefaultcolor [-a|-r] <nodepath>

    When just the networktype option is specified, all current
    opdefaultcolor commands for that network type are displayed. If no
    options are given, all opdefaultcolor commands for all network types
    are displayed.

    This is usually added to the OPcustomize file. This allows for
    control over the initial color of new nodes. If no opname argument
    is given, the supplied defaultcolor is used for all nodes of the
    specified networktype that do not have an explicit default color
    set. If the defaultcolor provided is an empty string, any current
    default color setting is cleared.

    The second usage clears all default color settings, either for a
    single network type, or for all network types. This is a quick way
    to reset any defaults established in OPcustomize files earlier in
    the search path.

    The third usage applies default colors to existing nodes. Existing
    color assignments are replaced. If the -r option is used, the
    default colors are set on all child nodes as well. The -a option
    only affects the specified node.

    EXAMPLES

      > opdefaultcolor Dop 'RGB 0.9 0.0 0.0'
      > opdefaultcolor Sop merge 'RGB 0.0 0.9 0.0'
      > opdefaultcolor Sop null ''
      > opdefaultcolor -r /
        causes new merge SOPs to be created with a green color, and all
        new DOPs to be created with a red color. This third line removes
        the default color specification for the null SOP. The fourth
        line causes all existing nodes in the current Houdini session to
        be set to their default color.

opdefaultshape

    Changes the initial shape of a node when it is put down.

    USAGES
      opdefaultshape [<networktype> [<opname>] [<defaultshape>]]
      opdefaultshape [-c] [<networktype>]
      opdefaultshape [-a|-r] <nodepath>

    When just the networktype option is specified, all current
    opdefaultshape commands for that network type are displayed. If no
    options are given, all opdefaultshape commands for all network types
    are displayed.

    This is usually added to the OPcustomize file. This allows for
    control over the initial shape of new nodes. If no opname argument
    is given, the supplied defaultshape is used for all nodes of the
    specified networktype that do not have an explicit default shape
    set.

    The second usage clears all default shape settings, either for a
    single network type, or for all network types. This is a quick way
    to reset any defaults established in OPcustomize files earlier in
    the search path.

    The third usage applies default shapes to existing nodes. Existing
    shape assignments are replaced. If the -r option is used, the
    default shapes are set on all child nodes as well. The -a option
    only affects the specified node.

    EXAMPLES

      > opdefaultshape Dop bulge 
      > opdefaultshape Sop merge oval
      > opdefaultshape -r /
        causes new merge SOPs to be created with an oval shape, and all
        new DOPs to be created with the bulge shape. The third line
        causes all existing nodes in the current Houdini session to be
        set to their default shape.

opdelscript

    REPLACED BY
      - hou.Node.deleteScript()

    Gets or sets a script to run when an operator is deleted.

    USAGE
      opdelscript [-c <delete_script>] [-a] <node> [<node2> ...]

    If you don't specify a script with -c, the command prints the
    current delete script for the operator.

    OPTIONS


        -c <delete_script>
            Sets the script to run when the operator is deleted.

        -a
            The script line given with -c is appended to the current
            delete script instead of overwriting it.

    EXAMPLES

      > opdelscript -c 'unix echo Deleting Object' geo*
      > opdelscript -a -c 'unix echo Still Deleting Object' geo*

opdepend

    REPLACED BY
      - hou.Node.outputs()
      - hou.Node.inputConnectors()
      - hou.Node.outputConnectors()
      - hou.Node.indirectInputs()

    Lists all operator dependencies of a node.

    USAGES
      opdepend [-b] [-i] [-I] [-o] [-u <idx>] [-e] [-p] [-s] [-l
      <level>] [-d] [-x] <node> [<node2> ...]
      opdepend {-c | -n | -N [-b] [-x] [-l <level>] <node>}

    This will list all of the operators that are either dependent on
    this node or that this node depends on. If no flags are given, the
    full paths of the inputs, outputs and extra inputs of this node are
    shown (-i -e -o).

    OPTIONS


        -b
            Do not show full paths.

        -i
            List all ops that are inputs to the node

        -I
            List all ops that are indirect inputs to the node.

        -o
            List all ops that are outputs of the node.

        -O
            List all ops that are extra outputs of the node.

        -u <idx>
            With the -o option, specifies the index of the output to
            look at when finding outputs of the node.

        -e
            List all extra (reference) inputs to the node (for example a
            texture top that references a COP network for its source
            image).

        -p
            Select the listed nodes.

        -s
            (Silent) Do not print the results.

        -l <level>
            The maximum depth in the hierarchy to search to.

        -d
            Performs a dependency search among the nodes contained
            within a subnetwork (if the argument is a network of nodes).

        -x
            (eXclude) Do not print nodes given or contained within nodes
            given in the arguments.

        -c
            List all the CHOPs that export to this node, and all nodes
            which this node exports to.

        -n
            List all name references starting from this node.

        -N
            List all name dependents starting from this node.

    EXAMPLES

      > opdepend -i -e /mat/blue_plastic
      > opdepend -i -o -e /obj/geo1
      > opdepend -i -p -s /obj/logo
      > opdepend -n /obj/light1
      > opdepend -N /obj/logo
      > opdepend -i -e -d -x /obj/subnet
        Prints input and extra input nodes referenced by a subnet or its
        contained nodes (descentants), without printing the subnet nodes
        themselves.

      > opdepend -e -d /obj/subnet1 /obj/subnet2

        Prints the channels references of subnet1 and subnet2 and the
        nodes they contain.

      > opdepend -i -x box sphere triangle

        Prints the nodes box, sphere, and triangle are wired to,
        (outside of the set of box, sphere, and triangle nodes
        themselves).

opdeprecate

    Marks node types as deprecated and hides them from the tab menu.

    USAGE
      opdeprecate [[-r <reason>] <version> <networktype> [<nodetype>
      ...]]

    opdeprecate marks a node type as being deprecated. The version
    number should be a valid Houdini version number. The deprecation
    warnings are printed when a scene using a deprecated node type is
    loaded. Marking a node deprecated will also hide it. If this is not
    wanted, call opunhide afterward on the same node type.

    An optional reason can be specified, which will also be displayed.
    This can be used, for example, to indicate which new node type the
    deprecated node type was replaced with, or why it got removed.

    OPTIONS


        -r
            Specify a reason why the node type was removed. If the
            reason is a name of another node type, this new node type
            will be displayed. By default, the node type given will be
            assumed to be of the same network type. If not, the network
            type can be prefixed (e.g. "Sop/grid"). If the reason does
            not resolve into a node type, then the message will be shown
            verbatim.

    EXAMPLES

      > opdeprecate 14.0 Sop box
      > # Message:
      > #   Box SOP (Sop/box) was deprecated in version 14.0.
      > opdeprecate -r "sphere" 14.5 Sop grid
      > # Message:
      > #   Grid SOP (Sop/grid) was deprecated in version 14.5. Use Sphere SOP (Sop/sphere) instead.
      > opdeprecate -r "Addition is no longer allowed" 14.5 Vop add
      > # Message:
      > #   Add VOP (Vop/add) was deprecated in version 14.5. Addition is no longer allowed.

    RELATED

      * ophide

      * opunhide

openport

    Opens a communication port to Houdini.

    USAGES
      openport [-e] [-q] [-s] [-w] [-i ipmask] [-r unix_command]
      <port_number>
      openport [-a] [-e] [-q] [-s] [-w] [-i ipmask] [-r unix_command]
      [-p]
      openport

    This allows the hcommand program to run textport commands from a
    remote process.

    If you don't give a port number or use the -a option, the command
    prints a list of ports that are currently open.

    OPTIONS


        -e
            Commands sent to the port to output errors separately from
            regular output. Regular output will be sent first, followed
            by a line containing "~~~~~", followed by any error
            messages.

        -q
            (Quiet) Do not print an error message if the specified port
            number is already open. If you also specify -a, the command
            will print only the port number.

        -s
            Allow the remote process to run only "safe" commands.

        -w
            (Wait) Do not return until the newly created port is closed.
            It is the responsibility of some external application to
            send a closeport command through the newly opened port to
            close it.

        -a
            Automatically choose a free port to open. Until this port is
            closed, calling openport -a will return the same port
            number.

        -r <unix_command>
            Runs the unix command, waiting for that unix command to
            finish before returning. While the unix command is running,
            Houdini will respond to hscript commands sent to the port.
            When the command is finished, the port will be closed,
            regardless of whether it was opened with -a. If the unix
            command contains spaces, be sure to put it in quotes. If -a
            is used, use the -p option to automatically add the port
            number as the last argument to the unix command.

        -p
            When used with the -a and -r options, this option will
            append the port number to the unix command that was run. For
            example, if the unix command was "python2.4 script.py" and
            15423 is the port number chosen by -a, Houdini will run
            "python2.4 script.py 15423".

        -c
            This is a Windows-only option. When used with the -r option,
            it will pop up a window containing any output from the
            command that's run. If this open is not given, no window
            will pop up.

        -i <ipmask>
            The mask for IP addresses that may connect to this port. The
            mask is a series of one or more IP addresses, separated by
            commas. IP addresses are of the form xxx.xxx.xxx.xxx. Each
            of the four components of an IP address may be a digit, a +
            (plus), or a * (asterisk). If a digit is given, only ip
            addresses with that digit in that component may connect to
            the port. If a plus is given, that component of the IP
            address must match the current machine's component. If an
            asterisk is given, that component of the IP address may be
            anything. The default IP mask is +.+.+.+, meaning that only
            the local machine may connect to the port.

    EXAMPLES

      > openport -a -r "python2.4 script.py" -p
        Chooses a free port and runs "python2.4 script.py <port>", where
        <port> is the port number that was opened. Houdini waits for
        python to finish executing before returning, but it responds to
        commands sent over the port as it waits. When python finishes,
        the port is closed.

    RELATED

      * closeport

opeventscriptcache

    Manipulates the internal event script path cache used to avoid
    excessive searching of the HOUDINI_SCRIPT_PATH.

    USAGES
      opeventscriptcache [-l] [-a] [-c]
      opeventscriptcache [-l] [-a] [-c] [<table>/<operator>]

    The first usage of this command affects all the operator caches as
    well as the global cache, while the second usage affects only the
    operator specified.

    OPTIONS


        -l
            Print the contents of the cache.

        -a
            Used in conjunction with -l to print all the paths in the
            cache, including empty ones.

        -c
            Clear the cache.

    EXAMPLES

      > hscript-> opeventscriptcache -c
        Clear all the cached event script paths.

    RELATED

      * geocache

      * objcache

      * sopcache

opexclude

    Deletes operator types from the current Houdini session.

    USAGE
      opexclude [<networktype> [<nodename> ...]]

    opexclude actually removes the node type so it can't be created in
    any way. Does not work if you have already loaded/created nodes of
    the given type.

    EXAMPLES

      > opexclude Network nodename
        For example, opexclude Sop sphere deletes the definition of the
        Sphere surface node from Houdini.

      > opexclude

        Prints all excluded nodes.

      > opexclude Network

        Prints all excluded nodes of the given network type.

    EXAMPLES

      > opexclude Object geo light
        Deletes the Geometry and Light Object types.

opexprlanguage

    Gets or sets the default expression language for the specified
    nodes.

    USAGE
      opexprlanguage [-s hscript|python] <nodes> ...

    The opexprlanguage command queries each node and prints the result
    as an "opexprlanguage -s" command. If "-s" is specified, then it
    sets the default expression language for each node.

    OPTIONS

        -s hscript|python: Sets the default expression language to
        either hscript or python.

    EXAMPLES

      > opexprlanguage -s python geo*
      > opexprlanguage geo* /obj/cam1

opextern

    Shows all/missing external references in a node.

    USAGE
      opextern [-g] [-l] [-m] [-M] [-n] [-q] [-r] [-R] <node> [<node2>
      ...]

    OPTIONS


        -g
            Group frame ranges together; files like butterfly$F.pic will
            be shown as bufferfly$F.pic [1-7].

        -l
            References that are effectively locked within the network
            are not considered external references. This flag relaxes
            the check for locks within subnets so that subnet branches
            that are not displayed are ignored.

        -m
            Check each file to see if it exists. Missing files are
            printed with '(missing)'.

        -M
            Check each file to see if it exists, and only show the
            missing files.

        -n
            Show only the nodes which have external references (or have
            missing external references, if -M is specified).

        -q
            (Quiet) Do not print messages like 'No external references
            found'. Useful in scripts.

        -r
            Show only the external references themselves (don't print
            the node referencing them). If -M is specified, this will
            show only missing external references.

        -R
            Recurse into networks and subnets.

    EXAMPLES

      > opextern geo1
        show all external refs on geo1 object

      > opextern -R geo1

        show all external refs in geo1

      > opextern -RMr geo1

        show all missing external refs in geo1

      > opextern -gR /

        show all external refs in the current session grouped by frame
        range if animated.

      > opextern -nR /

        show all nodes in the current session with external references.

      > opextern -rR /

        show all external references in the current session.

opextract

    REPLACED BY
      - hou.Node.extractAndDelete()

    Expands a subnetwork

    USAGE
      opextract <subnet> [<subnet> ...]

    EXAMPLES

      > opextract /obj/subnet1

opfind

    REPLACED BY
      - hou.Node.node()
      - hou.Node.children()
      - hou.Node.allSubChildren()
      - hou.Node.glob()
      - hou.Node.recursiveGlob()
      - hou.nodeBySessionId()
      - hou.node()
      - hou.nodes()

    Find operators that match a set of criteria.

    USAGE
      opfind [-t <type_pattern>] [-T <network_type>] [-n <name_pattern>]
      [-N <fullpath_pattern>] [-p <path>] [-s] [-i [-w]] <pattern>

    Prints the full path of all operators that match all given search
    criteria.

    OPTIONS


        -t <type_pattern>
            Find operators whose type matches <type_pattern>.

        -T <network>
            Find operators of <network_type> (see optype for information
            on network types).

        -n <name_pattern>
            Find operators with names matching <name_pattern>.

        -N <fullpath_pattern>
            Find operators with full paths matching <fullpath_pattern>.

        -p <path>
            Start searching from this path in the operator hierarchy. If
            you don't specify a path, the search begins at the root (/).

        <pattern>
            Find operators with parameter values matching <pattern>

        -s
            Causes this command to search only one network, and not
            recurse into child networks. Also, this option changes the
            output of this command to only show the node name rather
            than the full path of the node

        -S
            Causes this command to search only one network, and not
            recurse into child networks. Unlike -s, this option shows
            the full path of the node.

        -i
            Normally, <pattern> only matches whole words (for example,
            pattern "myobj" would not match value "myobj1". You can use
            the -i flag to make the pattern match word substrings.

        -w
            If you specified -i (substring parameter search), you also
            specify -w to allow wildcard matches (? and *) in the
            parameter search.

    EXAMPLES

      > opfind light1
        Find all expression referencing light1

      > opfind -n light

        Find all ops named light

      > opfind -T SHOP

        Find all SHOPs.

      > opfind -t light

        Find all ops of type light

      > opfind -p /obj

        Find all ops under /obj.

      > opfind -s -t light

        Find all the lights in the current net

    RELATED

      * opchange

      * optype

      * opglob

opfirstname

    Changes the initial name of a node when it is put down.

    USAGE
      opfirstname [<networktype> [<opname> <firstname>]]

    When just the networktype option is specified, all current
    opfirstname commands for that network type are displayed. If no
    options are given, all opfirstname commands for all network types
    are displayed.

    This is usually added to the OPcustomize file. This is useful to
    give a more artist-friendly initial name for a node when the
    internal name is obscure.

    EXAMPLES

      > opfirstname Sop merge "combine"
        causes the merge SOP to be created with the name "combine1" when
        put down rather than "merge1"

opgadd

    REPLACED BY
      - hou.Node.addNodeGroup()

    Creates a new operator group.

    USAGE
      opgadd <group_name> [<group2_name> ...]

    Use the opgop command to add and remove operators from each group.

    RELATED

      * opbls

      * opbadd

      * opbadd

      * oprm

      * opgadd

      * opbop

      * opgop

      * opgrm

opget

    REPLACED BY
      - hou.ChopNode
      - hou.CopNode.isDisplayFlagSet()
      - hou.CopNode.isRenderFlagSet()
      - hou.CopNode.isTemplateFlagSet()
      - hou.CopNode.isCompressFlagSet()
      - hou.CopNode.isBypassed()
      - hou.CopNode
      - hou.DopNode.isDisplayFlagSet()
      - hou.DopNode.isTemplateFlagSet()
      - hou.NetworkMovableItem.isSelected()
      - hou.NetworkMovableItem.isPicked()
      - hou.Node.isCurrent()
      - hou.Node.selectedChildren()
      - hou.Node.isDisplayDescriptiveNameFlagSet()
      - hou.Node.isHidden()
      - hou.ObjNode.isDisplayFlagSet()
      - hou.ObjNode.isSelectableInViewport()
      - hou.ObjNode.isShowingOrigin()
      - hou.ObjNode.isUsingXray()
      - hou.PopNode
      - hou.RopNode
      - hou.SopNode.isBypassed()
      - hou.SopNode.isDisplayFlagSet()
      - hou.SopNode.isRenderFlagSet()
      - hou.SopNode.isHighlightFlagSet()
      - hou.SopNode.isTemplateFlagSet()
      - hou.SopNode.isSelectableTemplateFlagSet()
      - hou.SopNode.isHardLocked()
      - hou.SopNode.isSoftLocked()
      - hou.SopNode.isUnloadFlagSet()
      - hou.VopNode.isDebugFlagSet()
      - hou.VopNode.isDetailLowFlagSet()
      - hou.VopNode.isDetailMediumFlagSet()
      - hou.VopNode.isDetailHighFlagSet()
      - hou.VopNode.isBypassed()
      - hou.VopNode.isCompressFlagSet()
      - hou.VopNode.isMaterialFlagSet()

    Gets operator properties.

    USAGE
      opget [-q] [<flag>] <operators> ...

    The opget command queries individual operator flags and prints the
    result as an "opset" command. If no specific flags are specified,
    the values for all flags are outputted.

    OPTIONS


        -d
            Display

        -r
            Render

        -t
            Template

        -b
            Bypass

        -l
            Lock

        -e
            Expose

        -h
            Highlight

        -f
            Footprint

        -s
            Save data in motion file

        -u
            Unload data after cook

        -c
            Display Icon in old compositor.

        -C
            Current

        -p
            Picked flag

        -P
            Display descriptive names in network editor.

        -Y
            Display comments in network editor.

        -S
            Selectable in viewport (objects only)

        -x
            Object pivot axes (objects only)

        -y
            Xray (objects only)

        -a
            Audio (CHOPs only)

        -o
            Export (CHOPs only)

        -q
            (Quiet) Do not print warnings about unknown flags or
            operators.

    EXAMPLES

      > opget -d geo*
      > opget -p -r li ght*
      > opget geo*/*

    RELATED

      * opadd

      * opchangetype

      * opparm

      * opset

opgetinput

    REPLACED BY
      - hou.Node.inputs()
      - hou.Node.inputConnections()
      - hou.Node.inputConnectors()

    Gets the node attached to a certain input of an operator.

    USAGES
      opgetinput -n <number> <input_op>
      opgetinput -o <output_op> [-u <output_index>] <input_op>

    opgetinput lets you inspect the inputs of an operator in two ways:

  * Using the -n option, you can get the name of the node attached to a
    numbered input on the operator.

  * Using the -o option, given two operators, you can get the input
    number on the first operator to which the second operator is
    attached.

    OPTIONS


        -n <number>
            Return the name of the node attached to input <number> of
            operator <input_op>. Returns an empty string if the input is
            not connected to anything.

        -o <output_op>
            Return the number of the input of <input_op> that is
            connected to <output_op>.

            If <output_op> is not connected to <input_op>, the command
            returns -1. If <output_op> is connected to <input_op> more
            than once, the command returns the highest input number
            (unless you use -u).

        -u <output_index>
            If you specify the -o option, you can use -u to test whether
            <input_op> is connected to <output_op> at the specific input
            number <output_index>. You can use -1 as the number to
            nullify this option.

opglob

    REPLACED BY
      - hou.Node.glob()
      - hou.Node.recursiveGlob()
      - hou.nodeBundle()

    Expands a pattern into a list of operator names.

    USAGES
      opglob [-r | -f] [-n relative_to_op] <operator_pattern>
      If the operator_pattern starts with the @ symbol, then it is
      expanded to the given bundle, group, or network box. In the case
      where a bundle, group, and/or network box share the same name, the
      order of precedence is bundles, then groups, and finally network
      boxes.

      opglob [-r | -f] -m <mask_op_path> [-F <filter>] <mask_pattern>
      The -m option specifies that <mask_pattern> is a mask to be
      evaluated relative to the operator given by <mask_op_path>. This
      can be used to obtain the expanded list of operators from any
      "mask" parameters such as the Light Mask parameter on Geometry
      Objects. The optional -F option specifies the operator type
      <filter> according to the following table.

      !!CHOP!!

      Any CHOP

      !!CHOPNET!!

      CHOP Networks

      !!COP!!

      Any COP

      !!COPNET!!

      COP Networks

      !!OBJ!!

      Any Object

      !!OBJ/BONE!!

      Bone Objects

      !!OBJ/CAMERA!!

      Camera Objects

      !!OBJ/FOG!!

      Fog Objects

      !!OBJ/GEOMETRY!!

      Geometry Objects

      !!OBJ/GEOMETRY,OBJ/FOG!!

      Geometry and Fog Objects

      !!OBJ/LIGHT!!

      Light Objects

      !!OBJ/SubnetObjects!!

      Objects contained in the subnetwork

      !!POP!!

      Any POP

      !!POPNET!!

      POP Networks

      !!ROP!!

      Any Output Driver

      !!SHOP!!

      Any SHOP

      !!SOP!!

      Any SOP

      !!VOP!!

      Any VOP

      !!VOPNET!!

      VOP Networks

    OPTIONS


        -r
            Output paths relative to the current working operator.

        -f
            Output full paths.

        -n
            Relative paths in the <operator_pattern> are evaluated
            relative to the <relative_to_op> node. If this option is not
            specified, paths are assumed to be relative to the current
            node.

    EXAMPLES

      > opglob @package
        Expands the bundle named package or the group named package in
        the current working operator.

      > opglob @package ^/obj/light1

        Expands the bundle named package or the group named package in
        the current working operator but excludes the node /obj/light1:

      > opglob -f @package

        Expands the bundle named package or the group named package in
        the current working operator and output full paths.

      > opglob ./@package

        Expands the group named package even if a bundle with the same
        name exists.

      > opglob /obj/subnet1/@package

        Expands the group named package that is within /obj/subnet1.

      > opglob -r /obj/subnet1/@package

        Expands the group named package that is within /obj/subnet1 but
        return relative paths.

      > set mask = `chs("/obj/model/lightmask")` opglob -f -m /obj/model -F `!!OBJ/LIGHT!!` $mask

        Expands to the exact list of lights used by the /obj/model
        Geometry Object in its Light Mask parameter.

    RELATED

      * opfind

opgls

    REPLACED BY
      - hou.Node.nodeGroup()
      - hou.Node.nodeGroups()
      - hou.NodeGroup.nodes()

    Lists operator groups.

    USAGE
      opgls [-g] [-l] [-L] [<pattern> ...]

    If you specify a pattern, the command only lists groups matching the
    pattern. Otherwise it lists all groups.

    OPTIONS


        -l
            List the operator names as well.

        -L
            List the operator names only (do not print group names).

        -g
            Print output in the form of commands that can be sourced to
            recreate the groups. (See the -G option of the opscript
            command.

    RELATED

      * nbglob

      * opscript

      * opgadd

      * opgop

      * opgrm

      * opbadd

      * opbop

      * opbrm

      * opbls

      * opbname

opgop

    REPLACED BY
      - hou.NodeGroup.addNode()
      - hou.NodeGroup.removeNode()
      - hou.NodeGroup.clear()

    Controls membership of operator groups

    USAGE
      opgop <group_name> set|add|remove <name_pattern> [<name_pattern2>
      ...]

    OPTIONS


        set
            Set the contents of <group_name> to operators matching the
            given pattern(s).

        add
            Add operators matching the given pattern(s) to <group_name>.

        remove
            Remove operators matching the given pattern(s) from
            <group_name>.

    EXAMPLES

      > opgop group1 set geo*
      > opgop group1 add light1 light2 light3
      > opgop group1 remove geo4

    RELATED

      * opgadd

      * opgls

      * opgrm

      * opbadd

      * opbop

      * opbrm

      * opbls

      * opbname

opgrm

    REPLACED BY
      - hou.NodeGroup.destroy()

    Removes an operator group from the current network.

    USAGE
      opgrm <group_pattern> [<group_pattern2> ...]

    RELATED

      * opgadd

      * opgls

      * opgop

      * opbadd

      * opbop

      * opbrm

      * opbls

      * opbname

ophelp

    REPLACED BY
      - hou.ui.displayNodeHelp()

    Displays help for an operator or operator type.

    USAGE
      ophelp [<operator>] [<operator_type>]

    OPTIONS


        <operator_type>
            Operator class and type name, of the form class/type (see
            examples).

            Available operator classes are:

          * Object - Object Operators (OBJs)

          * Sop - Geometry Operators (SOPs)

          * Particle- Particle Network Operators

          * Pop - Particle Operators (POPs)

          * ChopNet - Channel Network Operators

          * Chop - Channel Operators (CHOPs)

          * Driver - Output Operators (ROPs)

          * Shop - Shader Operators (SHOPs)

          * Cop2 - Composite Operators (COP2s)

          * CopNet - Composite Network Operators

          * Vop - VEX Operators (VOPs)

          * VopNet - VEX Network Operators

    EXAMPLES

      > ophelp Sop/add
        display the help for the add SOP.

      > ophelp /obj/geo1

        display the help for the geo objects (since /obj/geo1 is a geo
        object).

ophide

    REPLACED BY
      - hou.NodeType.setHidden()

    Hides nodes from the tab menu.

    USAGE
      ophide [<networktype> [<nodename> ...]]
      For example, ophide Sop sphere hides the

    Sphere surface node from the tab menu. Use opunhide to make a hidden
    node visible in the menu again.

  > ophide

    Prints all hidden nodes.

  > ophide Network

    Prints all hidden nodes of the given network type.

    EXAMPLES

      > ophide Object geo
        Hides the Geometry container object from the tab menu.

      > ophide Shop gen_shadow gen_fog

        Hides the generic shadow and fog shaders from the tab menu.

    RELATED

      * opalias

      * opexclude

      * oprename

      * opunhide

opinfo

    REPLACED BY
      - hou.Node.infoTree()

    Displays information about the operator, including the comment.

    USAGE
      opinfo [-n] [-v] <operator> [<operator2> ...]

    OPTIONS


        -v
            Verbose output.

        -n
            Don't force cooking of the operators. Usually opinfo will
            ensure the operators are up to date.

    RELATED

      * opcomment

oplayout

    REPLACED BY
      - hou.Node.layoutChildren()

    Automatically lays out operators in the network editor.

    USAGE
      oplayout [-d <direction>] [-x <sibling_space_factor>] [-y
      <level_space_factor>] [-s] [-t] [-a none|alphabetical|optype]

    OPTIONS


        -s
            Lay out selected operators only.

        -t
            Lay out first selected operator's tree only.

        -d <direction>
            The direction in which to display operator hierarchy (0 =
            top to bottom, 1 = bottom to top, 2 = left to right).

        -x <sibling_space_factor>
            Space between siblings, specified as a fraction of tile
            size.

        -y <level_space_factor>
            Space between levels (parent/child), specified as a fraction
            of tile size.

        -a none|alphabetical|optype
            Arrange tiles in the specified order.

    RELATED

      * opautoplace

oplegacyinputs

    Specifies input names for legacy nodes that were saved only with
    input numbers.

    USAGE
      oplegacyinputs [-q] <networktype> <nodename> [<inputname> ...]

    This defines the input names of an operator as it appeared in
    Houdini 11.1 or earlier. In these Houdini versions, the operators
    used input numbers instead of input names, so it impossible to
    rearrange the inputs without breaking the backwards compatibility
    with old hip files. Newer Houdini versions use input names for
    operators, which allows them to move the inputs around or to insert
    new inputs between the old ones, all without breaking backwards
    compatibility. However, the hip files saved in Houdini 11.1 or
    earlier are still affected by such changes, since they saved only
    indices and not names. The index specifies that a given wire should
    be connected to an input at a given index, but now there may be a
    new input with a new semantics at that index. That's where this
    command comes in handy. It assigns names to the input indices for
    operators available in Houdini 11.1. Then, this input name map is
    used in newer Houdini versions to resolve (remap) the old input
    indices to new input names in a new versions of an operator, thus
    making it possible to load old hip files and connect the old wires
    to correct inputs.

    OPTIONS


        -q
            (Quiet) Don't print any errors about unknown operators, etc.

    EXAMPLES

      > oplegacyinputs Vop align from to
        Specifies that the first input of the Align VOP node is named
        align and the second one is to. This allows loading old hip
        files that make input connections using input numbers to load in
        newer Houdini versions where the Align VOP inputs may have been
        rearranged or new inputs added at the beginning (e.g., at index
        0, thus replacing the semantics of the old input at that index).

oplocate

    REPLACED BY
      - hou.NetworkMovableItem.position()
      - hou.NetworkMovableItem.setPosition()
      - hou.NetworkMovableItem.move()
      - hou.NetworkMovableItem.shiftPosition()

    Gets/sets the X/Y coordinates of operator tiles in the network view.

    USAGE
      oplocate [-d] [-x <xval>] [-y <yval>] <operator_pattern>

    If you don't give -x or -y, the command prints the operator's
    current position.

    The coordinates are absolute coordinates in the network view, they
    are not affected by zooming or panning.

    OPTIONS


        -x
            Sets the X position of the operator(s).

        -y
            Sets the Y position of the operator(s).

        -d
            Makes -x and -y be relative (delta) to the operator's
            current position.

    EXAMPLES

      > oplocate -x 100 -y 200 geo1
        Sets the position of geo1's tile to (100, 200) in the network
        view.

      > oplocate -x 100 geo*

        Position the tiles of all operators matching geo* horizontally
        at x=100.

      > oplocate -d -x 10 -y 20 geo*

        Move the tiles of all operators matching geo* by (+10, +20).

opls

    REPLACED BY
      - hou.Node.children()

    Lists operators in the network hierarchy.

    USAGE
      opls [-a] [-d] [-f] [-l] [-t] [-R] [<operator_pattern>]

    opls works like the ls command in UNIX. If you don't specify an
    <operator_pattern>, it prints the operators in the current network
    path.

    If an operator contains other operators (for example, an object
    containing SOPs or a subnetwork node), the number of operators
    inside is printed in parentheses.

    OPTIONS


        -l
            Print in long format (show more information).

            The long format shows operator flags using the following
            symbols. If the flag is on, the symbol appears, if the flag
            is off a dash (-) appears in the symbol's place.


            d
                Display

            r
                Render

            t
                Template

            l/L
                l = Soft locked, L = Hard locked

            e/h
                e = Exposed, h = Hidden.

            b
                Bypassed

            c
                Current

            s
                Selected

        -a
            Print all operators (includes hidden operators).

        -d
            Do not print the contents of networks.

        -f
            Print full paths.

        -R
            For each network, recursively list its contents as well.

        t
            Sort operators by their last modified time.

    EXAMPLES

      > opls -lR geo*
      > opls /path/to/list/*
      > opls -d /*/*/*

opmenu

    REPLACED BY
      - hou.MenuParmTemplate

    Shows the items of a menu parameter on an operator.

    USAGE
      opmenu [-l] [-a] <op_name> <parm_name>

    OPTIONS


        -l
            Show name and label for each menu item.

        -a
            Show all menu items, including separators.

    RELATED

      * opparm

      * opscript

opmultiparm

    Gets or sets multiparm channel linking information for a node.

    USAGE
      opmultiparm <node> [<multiparm> <refparm>]...

    If you don't specify any pairs of multiparm and referenced parm
    names, prints all existing multiparm links for the node.

    OPTIONS


        <multiparm> <refparm>
            When new instances of the multiparm are created, a channel
            reference to the refparm is automatically created in that
            instance. The multiparm should have at least one '#' symbol
            in it that will be replaced by the index of the new
            multiparm instance. The refparm must have the same number of
            '#' symbols, which will similarly be substituted with the
            multiparm instance indices.

    EXAMPLES

      > opmultiparm /obj/geo1/add1
        Print the multiparm references for /obj/geo1/add1.

      > opmultiparm /obj/geo1/add1 "pt#x" "../add2/pt#x" "pt#y" "../add2/pt#y"

        Creates links between the x and y components of the pt instance
        parameter. So any new instances of this parameter on the add1
        SOP will automatically be set to channel references of the
        corresponding pt instance parameter on the add2 SOP.

opname

    REPLACED BY
      - hou.NetworkMovableItem.name()
      - hou.NetworkMovableItem.setName()

    Renames an operator.

    USAGE
      opname [-u] [-v] <old_name> <new_name>

    OPTIONS


        -u
            If the <new_name> is the name of an existing node, it is
            modified to make it unique. The name is made unique by
            appending or incremeting a numeric suffix on the name.

        `-v-
            If this command succeeds, this option causes it to output
            the new name of the node. This is useful in conjunction with
            the -u option.

oporder

    Changes the user-defined order of operators.

    USAGES
      oporder <operator> [<operator2> ...] <before_op>
      oporder [-b | -e] <operator> [<operator2> ...]

    If you don't use the -e flag, the operators are moved before the
    last operator you specify.

    If you use the -e flag, the operators are moved to the end of the
    order.

    OPTIONS


        -e
            Moves the specified operator(s) to the end of the order. If
            you use this flag, you do not specify a <before_node>.

        -b
            Moves the specified nodes to the start of the list. If you
            use this flag, you do not specify a <before_node>.

    EXAMPLES

      > oporder cam* geo1
        Moves all cameras to before the geo1 object.

      > oporder -e model

        Moves the model object to the end of the list.

oppane

    Show an editor for an operator.

    USAGE
      oppane -t details|parmeditor <operator_pattern>

    OPTIONS


        -t details|parmeditor
            The type of editor to show.


            details
                Show the details view for a node. In SOPs, for example,
                this would be a geometry spreadsheet.

            parmeditor
                Show the operator's parameter editor.

opparm

    REPLACED BY
      - hou.Node.parms()
      - hou.Parm
      - hou.ParmTuple.name()
      - hou.ParmTuple.description()
      - hou.ParmTuple.set()
      - hou.ParmTuple.setPending()

    Gets/sets/manipulates parameters on a node.

    Different usages let you list the parameters on a node, print the
    values of parameters, set parameters, and trigger any callbacks
    associated with parameters.

    USAGES
      opparm [-q] -l <operator_pattern> <wildcard>
      opparm [-q] -L <operator_pattern> <wildcard>
      The -l and -L forms print a list of parameters. You can use wild
      cards in the parameter name.

      -l lists internal (channel) names, -L lists the human-readable
      labels (where present).

      opparm [-q] -d [-x] <operator_pattern> [-v] [<wildcard>]
      The -d form prints the values of parameters. You can use wild
      cards in the parameter name.

      By default, the command prints values of the parameters even if
      channels with different values exist. Use -v to evaluate the
      channels at the current time and then print parameter values.

      opparm [-q] [-r] [-C] [-V <version>] <operator_pattern> [-v [-p |
      -i]] <parameters> <value>
      This form sets parameter values. If you specify a value, opparm
      sets the given parameter to that value.

      You can specify a particular component when setting a parameter.
      You can do this with an index, such as t[0], or with the channel
      name, such as tx.

      opparm [-q] -c <operator_name> <parameter_names>
      The -c form executes any callbacks associated with a parameter. If
      the parameter is a button which executes a callback, use the
      fourth form to invoke the function. Examples of these types of
      buttons are in render output drivers (the render buttons).

      If the parameter is a menu with a callback function (such as
      Initialize in the Creep SOP), and you wish to execute the callback
      as if a specific menu item had been chosen, use the opparm -C
      <operator_pattern> <parameters> <value> form of the command with
      the -C option. Use the opmenu command to determine what are valid
      menu item values.

    OPTIONS


        -l
            (List) prints a list of parameters. The parameter names
            printed with -l can be used in channel references.

        -L
            (List descriptions) prints a list of parameter descriptions,
            as they appear in the interface.

        -q
            (Quiet) do not print warnings or errors.

        -d
            Prints parameter values. You can use wildcards in the
            parameter name.

            When you print parameter values, the command prints the
            animation channels by default. Use -v to print the values at
            the current time instead.

        -x
            Only available when you specify -d. Generates a script which
            can be used to re-create the parameter values (including
            commands for reproducing the channels).

        -v
            Normally animation channels of the parameters are deleted
            when they are changed. Specifying -v when the parameter
            value is a number prevents the channels from being deleted.
            Instead the command will behave as if the values were
            entered into a parameter editor at the current time.

        -V <version>
            Specifies the version of the node for parameters to be
            upgraded from. After parameters are set, Houdini will
            perform an additional step to upgrade all parameters,
            assuming that they were created from the specified version.
            On HDAs, it is passed to the SyncNodeVersion event handler
            script.

        -C
            In addition to setting parameter values, trigger any
            callbacks associated with the parameters.

        -r
            The opparm command will follow simple channel references and
            set the referenced parameter instead of deleting the channel
            reference expression and setting the value in the specified
            parameter. This is useful when writing scripts to modify
            parameters of nodes inside custom subnet operators.

        -p
            If -p is specified with -v, and the value is set at a key,
            the new parameter is forced into a pending state.

        -i
            If -i is specified with -v, and the value is set at a key,
            the new parameter is committed immediately.

        -c
            Execute any callbacks associated with the given
            parameter(s). See also the -C option.

        -b
            Will bypass spare parameters. This is equivalent to deleting
            the spare parameter for rendering purposes. That is, the
            spare parameter will not appear to exist to SOHO. The
            parameter may be re-enabled without loss of channel
            animation data.


            NOTE
                The bypass only works for spare parameters (including
                properties).


            Example
                To disable the shop_geometrypath on the object:

              > opparm -b on obj shop_geometrypath

                To enable the parameter:

              > opparm -b off obj shop_geometrypath

    EXAMPLES

      > opparm -l /obj/geo1 *
      > opparm geo1 t ( 1 2 3 )
      > opparm geo1 t[2] ( 3 )
      > opparm geo1 tz ( 3 )
      > opparm -C /obj/geo1/creep1 Initialize initfill
      > opparm -c /out/mantra1 execute
      > opparm -d geo1 t
      > opparm -l geo1 *
      > opparm model -v -p rz ( 4.5 )
      > opparm model -v -i rz ( 4.5 )

    RELATED

      * opadd

      * opchangetype

      * opget

      * opmenu

      * opscript

      * opset

oppaste

    REPLACED BY
      - hou.pasteNodesFromClipboard()

    Paste data copied with opcopy into a network.

    USAGE
      oppaste <network>

    After you copy data with the opcopy command, you can paste it into a
    given <network> with this command.


    NOTE
        You cannot choose the name of the operator created in the new
        network.

    RELATED

      * opcopy

      * opcp

      * opdepend

oppresetload

    Loads channels and parameter values into an operator from a preset.

    USAGE
      oppresetload <operator_name> <preset_name>

    Once you have a preset saved using oppresetsave, you can use this
    command to apply the preset to an operator of the same type.

    Use the oppresetls command to get a list of all presets available
    for an operator.

    Use the oppresetsave command to create new presets.

    EXAMPLES

      > oppresetload /obj/model/lsystem1 Lightning

    RELATED

      * opparm

      * oppresetls

      * oppresetrm

      * oppresetsave

      * oppresetloadfile

      * oppresetsavefile

oppresetloadfile

    Loads channels and parameter values into an operator from a .preset
    file.

    USAGE
      oppresetloadfile <operator_name> <preset_filename>

    Once you have a .preset file saved using oppresetsavefile, you can
    use this command to apply the preset stored in the file to an
    operator of the same type.

    RELATED

      * opparm

      * oppresetls

      * oppresetrm

      * oppresetsave

      * oppresetsavefile

oppresetls

    REPLACED BY
      - hou.galleries.galleryEntries()

    Lists the presets available for an operator.

    USAGES
      oppresetls [-l] <op_name>
      oppresetls [-l] -t <table/operator>

    This command can be invoked with either a node name or an operator
    table and type name (if the -t option is specified). The table value
    specifies the class of the operator you want to modify. A list of
    valid table names can be found in the help for the otwrite command.
    The operator value is the name of the specific operator type.

    OPTIONS


        -l
            In addition to printing the preset names, prints the
            preset's location on disk.

    RELATED

      * oppresetload

      * oppresetrm

      * oppresetsave

oppresetrm

    Removes a preset.

    USAGES
      oppresetrm <op_name> <preset_name> [<directory>]
      oppresetrm -t <table/operator> <preset_name> [<directory>]

    The first argument is the name of an operator of the type for which
    you want to remove the preset. The second argument is the preset
    label.

    You can specify a disk <directory> from which the preset should be
    deleted. If you do not specify a directory, the command deletes the
    preset from the location where it is currently defined.

    If you do not supply any arguments, the command lists all valid
    directory names.

    This command can be invoked with either a node name or an operator
    table and type name (if the -t option is specified). The table value
    specifies the class of the operator you want to modify. A list of
    valid table names can be found in the help for the otwrite command.
    The operator value is the name of the specific operator type.

    EXAMPLES

      > oppresetrm /obj/model/lsystem1 "My Tree"

oppresetsave

    Saves channels and parameter values from an operator as a preset.

    USAGE
      oppresetsave <op_name> <preset_name> <directory>

    This command creates/overwrites a preset using the channels and
    parameter values of the operator you specify. You can then apply
    that preset to other operators of the same type using the
    oppresetload command.

    The <directory> specifies the directory in which to store the
    preset. Presets are always saved inside a "presets" subdirectory
    inside the directory you specify. You can only use directories in
    the HOUDINI_PATH for which you have write permission.

    If you do not supply any arguments, the command lists all valid
    directory names.

    EXAMPLES

      > oppresetsave /obj/model/lsystem1 "My Tree" $HOME/houdini<<version>>

    RELATED

      * oppresetload

      * oppresetls

      * oppresetrm

      * oppresetloadfile

      * oppresetsavefile

oppresetsavefile

    Saves channels and parameter values from an operator to a .preset
    file.

    USAGE
      oppresetsavefile <op_name> <preset_filename>

    This command creates/overwrites a .preset file using the channels
    and parameter values of the operator you specify. You can then apply
    that preset to other operators of the same type using the
    oppresetloadfile command.

    RELATED

      * opparm

      * oppresetls

      * oppresetrm

      * oppresetload

      * oppresetloadfile

opproperty

    REPLACED BY
      - hou.properties

    Creates spare properties from a set of pre-defined properties

    USAGES
      opproperty -R [-q]
      opproperty -l [<pattern> [<category>]]
      opproperty [-f] [-e] [-C <folder>] [-F <folder>] node pattern
      properties

    OPTIONS


        -R
            Reload all property definitions. The -q option makes this
            operation perform "quietly" (without reporting success)

        -l
            List information about pre-defined properties.

          * With no arguments, the command lists all top level
            categories.

          * When you specify a pattern, the command prints the
            parameters for all matching top level categories.

          * When you specify a category along with a pattern, the
            command prints only parameters for that category.

        -f
            (Force) Bypass the filtering check when adding properties.

            Properties have a filter associated with them. This filter
            indicates to which Houdini node types the properties should
            be added. With the -f option, properties may be added to any
            node.

        -F
            Specify the folder to which the properties should be
            installed. Usually properties will be installed in the top-
            level folders of nodes. This option allows the properties to
            be installed as a sub-folder of an existing folder.

        -C
            Normally spare properties have a category setting which
            specifies the sub-folder where the parameter should be
            installed. The -C option overrides this category setting.

            This name is different than the -F option in that the -F
            option specifies the parent folder which should contain the
            sub-folder, while the -C command specifies the name of the
            sub-folder itself. If the names are the same, the parameter
            will be installed in the parent folder directly.

    EXAMPLES

      > opproperty -l mantra*
        Lists all properties associated with the top level mantra
        categories.

      > opproperty -f -F Render /obj/model mantra* *shading*

        Installs all the parameters defined for mantra that contain
        shading in their name. Since the parameters are intended to be
        added to Property SHOPs, the -f option allows addition to the
        geometry object. The -F option states that the properties should
        be installed in the Render folder of the object's parameters.

      > opproperty -f -C Lighting -F Render /obj/model mantra* *shading*

        Installs all the parameters defined for mantra that contain
        shading in their name. This will install the parameters in the
        "Render" folder in a sub-folder labelled "Lighting".

oppwf

    REPLACED BY
      - hou.pwd()

    Prints the current folder in the network hierarchy.

    USAGE
      oppwf


    NOTE
        The oppwd command also works as an alias for this command.

    RELATED

      * opcf

opramp

    REPLACED BY
      - hou.Parm.evalAsRamp()
      - hou.Parm.evalAsRampAtFrame()
      - hou.Ramp.__init__()

    Sets a key in an operator's ramp.

    USAGES
      opramp <operator_name> <position> <r> <g> <b> <a>
      opramp -r <operator_name> <position>

    This command sets a key for a certain position in an operator's
    ramp, such as the ramp of a two-tone shader. The <position> should
    be between 0 and 1.

    If the <position> is within 0.01 of an existing key, the command
    will set the existing key's color. Otherwise, it will create a new
    key.

    You can also use the -r option to remove keys instead of setting
    them.

    To get a list of keys, use the opscript command on the operator.

    OPTIONS


        -r <operator_name> <position>
            Removes a key from the operator's ramp at the given
            position.

    RELATED

      * opscript

opread

    REPLACED BY
      - hou.Node.loadItemsFromFile()
      - hou.Node.loadChildrenFromFile()

    Loads an operators file created with opwrite.

    USAGE
      opread <filename>

    Recreates the operators stored in the file in the current folder of
    the network hierarchy. To see the current folder, use the oppwd
    command.

    RELATED

      * opwrite

      * opscript

      * cmdread

      * source

oprename

    Changes the name that appears on toolbars to represent an operator
    type.

    USAGE
      oprename [<networktype> [<opname> <newname>]]

    When just the networktype option is specified, all current oprename
    commands for that network type are displayed. If no options are
    given, all oprename commands for all network types are displayed.

    EXAMPLES

      > oprename Sop merge "Combine Inputs"
        causes the merge SOP to appear on toolbars with the name
        "Combine Inputs"

oprm

    REPLACED BY
      - hou.Node.destroy()

    Deletes operators.

    USAGE
      oprm [-f] <operator_pattern>

    OPTIONS


        -f
            Do not print error messages.

    RELATED

      * opadd

      * oprmtype

oprmtype

    REPLACED BY
      - hou.Node.allSubChildren()

    Deletes operators of a specific type.

    USAGE
      oprmtype -t <operator_type> [-r] <operator_pattern>

    Deletes all operators matching <operator_pattern> that are of type
    <operator_type>

    OPTIONS


        -t <operator_type>
            The type of operators to delete.

        -r
            Recursively delete the children of operators matching the
            type/pattern.

    EXAMPLES

      > oprmtype -t visibility -r /obj
        Removes all visibility SOPs from all objects.

    RELATED

      * oprm

opsave

    REPLACED BY
      - hou.ChopNode
      - hou.CopNode.saveImage()
      - hou.CopNode
      - hou.Geometry.saveToFile()

    Saves the output data of an operator to a file.

    USAGE
      opsave [-q] [-v] [-f <start> <end> [-i <inc>]] <operator>
      <filename>>

    opsave currently supports CHOP, COP and SOP data.

    OPTIONS


        -q
            (Quiet) Do not print any messages, including warnings and
            errors.

        -v
            (Verbose) Print more detailed messages.

        -f <start> <end>
            Save output data for a frame range. Use the -i option to
            specify the increment.

            This does the equivalent of the following code:

          > for i = start to end step inc fcur $i opsave operator filename end

            That is, it saves the operator data using the same filename
            for each frame. Unless you have an embedded variable such as
            $F or similar in the filename (using \$F), you probably
            don't want this option. CHOPs, for example, save their
            entire data and usually don't require the -f parameter.

        -i <increment>
            The increment between frames to save. For example, 2 saves
            every other frame, 3 saves every third frame, etc.

    EXAMPLES

      > opsave -f 1 10 -i 2 /obj/geo1/twist1 twist1\$F.obj
      > opsave /ch/ch1/wave1 wave.bclip
      > opsave /ch/audio/filter1 test.aiff

    RELATED

      * opscript

      * opwrite

      * mwrite

opscale

    Obsolete. Use neteditor -v instead.

    USAGE
      opscale [-g] [-s scale_factor] networks

    RELATED

      * neteditor

opscript

    REPLACED BY
      - hou.BaseKeyframe
      - hou.NetworkBox
      - hou.Node.asCode()
      - hou.NodeGroup.asCode()
      - hou.Parm

    Prints the commands necessary to recreate an operator.

    USAGE
      opscript [-r] [-m <in_wire> <out_wire> | -g] [-o] [-n] [-P | -p]
      [-b] [[-v | -w] | [-c | -d]] [-s] [-G] [-C] [-N] [-S] [-f]
      <name_pattern>

    OPTIONS


        -r
            Recursively apply to the entire operator hierarchy. The
            command will not output script for internal node creation in
            a locked asset, only the top level of the asset.

        -m <in_wire> <out_wire>
            Print top-level arguments in macro form. The names will have
            to be specified when the results script is sourced. This
            option creates more general code than -g.

            <in_wire> and <out_wire> specify the input and output wire
            nodes.

        -f
            When generating a script, use full paths (rather than
            relative paths) when descending to the lower level of the
            folder hierarchy, if a directory change is required in such
            a script.

        -g
            Print top-level arguments in general form. The names will
            have to be specified when the results script is sourced.

        -o
            Save outgoing wires as well.

        -P
            Don't save spare parameters or channels. Also applies to
            child nodes.

        -p
            Don't save spare parameters or channels on top level nodes.
            Spare parameters and channels on child nodes will be saved.

        -n
            Do not output chblockbegin/chblockend commands. Normally the
            output encloses all chadd and chkey commands inside
            chblockbegin/chblockend commands for efficiency.

        -b
            (Brief) Do not print values if they are the parameter's
            default.

        -v
            Evaluate channel values, do not print channel information.

        -w
            Same as the -v option, but only applies to the root node
            when recursing with the -r option.

        -c
            Only output channels (overrides -v).

        -d
            Same as the -c option, but only applies to the root node
            when recursing with the -r option.

        -s
            Output channel and key times in samples (frames) instead of
            seconds.

        -G
            Save the groups of each node also. Note that you must be
            working on a manager or subnet node to use this option,
            since only those kinds of nodes can store groups.

        -C
            Generate a creation script for the operator. The script
            generated with this option is suitable as a creation script
            (i.e. the script run every time this type of operator is
            added). This option works in conjunction with the -v, -b, -c
            and -r options.

        -N
            Script any network boxes that match <name_pattern>, without
            automatically scripting their contents.

        -S
            Same as -N option, but also scripts each specified network
            box's contents. Will avoid duplicate scripting of an
            operator if both the operator and its network box are
            specified by <name_pattern>.

        -V
            Omit outputting version information.

    EXAMPLES

      > opscript -r /obj/geo*
      > opscript -G /obj > /tmp/objgroups.cmd
      > opscript -S light* netbox*

    RELATED

      * chblockbegin

      * chblockend

      * opmenu

      * opsave

      * opwrite

opset

    REPLACED BY
      - hou.ChopNode
      - hou.CopNode.setDisplayFlag()
      - hou.CopNode.setRenderFlag()
      - hou.CopNode.setTemplateFlag()
      - hou.CopNode.setCompressFlag()
      - hou.CopNode.bypass()
      - hou.CopNode
      - hou.DopNode.setDisplayFlag()
      - hou.NetworkMovableItem.setSelected()
      - hou.NetworkMovableItem.setPicked()
      - hou.Node.setCurrent()
      - hou.Node.setDisplayDescriptiveNameFlag()
      - hou.Node.hide()
      - hou.ObjNode.setDisplayFlag()
      - hou.ObjNode.setSelectableInViewport()
      - hou.ObjNode.showOrigin()
      - hou.ObjNode.useXray()
      - hou.PopNode
      - hou.RopNode
      - hou.VopNode.setDebugFlag()
      - hou.VopNode.setDetailLowFlag()
      - hou.VopNode.setDetailMediumFlag()
      - hou.VopNode.setDetailHighFlag()
      - hou.VopNode.bypass()
      - hou.VopNode.setCompressFlag()
      - hou.VopNode.setMaterialFlag()

    Turns various operator flags on or off.

    USAGE
      opset [-q] [<flag> on|off|toggle|<number>] ... <operators> ...

    OPTIONS


        -q
            (Quiet) Do not print warnings about unknown flags or
            operators.

        <flag> on|off|toggle|<number>
            "on" turns the flag on, "off" turns the flag off, "toggle"
            flips the flag's state. If you specify a number, 0 turns the
            flag off, any other number turns the flag on. Some flags,
            such as lock, accept additional values, see below.

            You can set the following flags:


            -d
                Display

            -V
                Visible (similar to display, but will also try to set
                the parent's visible children parameters to make an
                operator visible.

            -r
                Render

            -t
                Template

            -b
                Bypass

            -l
                Lock. Specify "off", "soft", or "hard". ("on" is the
                same as hard).

            -e
                Expose

            -h
                Highlight

            -f
                Footprint

            -s
                Save data in a motion file.

            -u
                Unload data after cook (SOPs or CHOPs only).

            -c
                Display Icon in old compositor.

            -C
                Is current

            -p
                Picked

            -P
                Display descriptive names in network editor.

            -Y
                Display comments in network editor.

            The following flags are only available for objects:


            -S
                Selectable in viewport

            -x
                Object pivot axes

            -y
                Xray

            The following flags are only available for CHOPs.


            -a
                Audio

            -o
                Export

    EXAMPLES

      > opset -d on geo*
      > opset -p off light*
      > opset -l hard -s on geo*/*

    RELATED

      * opadd

      * opchangetype

      * opparm

      * opget

opspare

    REPLACED BY
      - hou.Node.spareParms()
      - hou.Node.parmTemplateGroup()
      - hou.Node.setParmTemplateGroup()
      - hou.Node.addSpareParmTuple()

    Add, remove or list spare parameters in an operator.

    USAGES
      opspare -a [-l <label>] [-s <size>] [-r <start> <end>] [-v
      <defaults>] <sparename> <operators> ...
      opspare -d <sparename> <operators> ...
      opspare [-n] <operators> ...

    Spare parameters can be added to an operator for extra control.
    Unlike creating new parameters for Operator Types, creating a spare
    parameter only adds the parameter to the node (or nodes) specified,
    not all nodes of that type.

    Spare parameters can be keyframed, referenced and added to Takes.
    Unless referenced by a node parameter, spare parameters are ignored
    by the node they are attached to.

    There are three different usages of opspare. The first, opspare -a,
    adds a new spare parameter to a node. The second, opspare -d,
    deletes a spare parameters from a node (you cannot delete real
    parameters). The third, opspare without -a or -d, lists all the
    spare parameters in the node.

    OPTIONS


        -a
            Add a new spare parameter.

        -d
            Delete a spare parameter. Cannot be used with other flags.

        -n
            When listing spare parameters, include the node they belong
            to in the list. Cannot be used with -a or -d.

        -l <label>
            Add a more descriptive label to the parameter, which will be
            shown in the parameter dialog. Spaces can be used if the
            label is double quoted (ie "Two Words").

        -r <start> <end>
            Specifies the start and end range for sliders.

        -s <size>
            Specifies the number of fields in the parameter (1-16).

        -t <type>
            Sets the parameter type, which can be one of:

          * *float*

          * *int*

          * *toggle*

          * *string*

          * *color*

          * *angle*

          * *xyz*

          * *uvw*

        -v <defaults>
            Sets the default value(s). For more than one value (if the
            size is greater than 1), leave spaces between the values and
            double quote the list (ie "0.5 1 0.5"). For string defaults
            with spaces, single quote the string (ie "one 'two words'
            three").

    EXAMPLES

      > opspare -a -t xyz -s 3 -l "Center of Mass" -v "0 0 0" compos geo1
      > opspare -a spare /obj/light*
      > opspare -d spare light1
      > opspare /obj/light*

    RELATED

      * chadd

opspareds

    REPLACED BY
      - hou.Node.removeSpareParms()

    Sets the dialog script describing spare parameters on one or more
    nodes.

    USAGE
      opspareds <"parmdesc"> <nodes> ...


    TIP
        This command is generally only used internally by Houdini. For
        basic manipulation of spare parameters, use the spare parameters
        editor or the opspare command.

    opspareds lets you describe spare parameters at a lower level, using
    the _dialog script_ format. While this is generally only used
    internally, it is possible for you to view the dialog script
    generated by Houdini for a spare parameter (using the opscript
    command with the -p option), edit it by hand, and insert the edited
    parameter description into a node or nodes using this command.

    EXAMPLES

      > opspareds 'parm { name spareparm label "Spare Parm 1" type vector }' geo1
        Adds the parameter described by the dialog script (in single
        quotes) to the geo1 node.

    RELATED

      * opspare

      * opscript

opstat

    REPLACED BY
      - hou.Node.creationTime()
      - hou.Node.modificationTime()
      - hou.Node.creator()
      - hou.NodeType.instances()

    Print node creation time, modification time, author, and
    permissions.

    USAGES
      opstat [-q] [-c] [-m] [-u] <operators> ...
      opstat -T [<table_name>]

    Prints...

  * Creation time

  * Last modified time

  * Creator's user name

  * Node permissions. Use opchmod to change permissions.

    The "last modified" time is updated whenever:

  * A child is created/destroyed/exposed/hidden in a network.

  * The operator is renamed.

  * An input to the OP changes.

  * Any flag, parameter or channel changes.

  * Any groups are changed in a network.

    OPTIONS


        -q
            (Quiet) Print the values only.

        -c
            Show the creation time.

        -m
            Show the last modified time.

        -u
            Show the username that created the operator.

        -T [<table_name>]
            Prints statistics for the operator tables. This shows the
            total number of operators available for each type of table
            along with the number of operators in the current file.

    EXAMPLES

        Get the permissions on a node:

      > echo `arg(run("opstat -q /obj/model"),1)`

    RELATED

      * opchmod

      * optype

optype

    REPLACED BY
      - hou.Node.type()
      - hou.NodeType.name()
      - hou.NodeType.description()
      - hou.NodeType.helpUrl()
      - hou.NodeType.defaultHelpUrl()
      - hou.NodeTypeCategory.name()
      - hou.nodeType()

    Prints type-specific information about operators.

    USAGE
      optype [-N] [-t] [-e] [-n] [-s] [-i] [-T] [-o] <op_name>

    If you don't specify any options, the command prints all information
    in a human-readable format. If you specify one or more options, the
    command prints only the values for those options.

    OPTIONS


        -N
            The name of the node, likely same as opname.

        -t
            The operator type of the node. For example, /obj/model will
            usually be type "geo".

        -e
            The label of the type. An op of type "geo" will usually have
            the label "Geometry". Be careful as this label may contain
            spaces.

        -n
            The network type of the node. In the case of /obj/model this
            would be "OBJ". Possible return types are: OBJ, SOP, PART,
            POP, MAT, TOP, CHOPNET, CHOP, ROP, SHOP, COP2, IMG, VOP,
            VOPNET, MGR, and DIR.

        -s
            The script directory of the optype. This is used internally
            to locate some files related to the operator. Possible
            values are: obj, sop, part, pop, mat, top, ch, chop, out,
            shop, img, cop2, vop, vex, mgr, and dir.

        -i
            The index of the network type. This is a number which is
            unique for each of the network types. It can be used to
            index into a table, for example. However, the mapping of
            network types (-n) to indices (-i) is not guaranteed to be
            consistent between Houdini versions.

        -T
            The table name of the network type. This matches the table
            names used by other commands. Possible values are: Object,
            Sop, Particle, Pop, Material, Texture, ChopNet, Chop,
            Driver, Shop, Cop2, CopNet, Vop, VopNet, Manager, and
            Director.

        -o
            The table name and operator name, separated by a "/". This
            is the format required for most operator type commands such
            as otwrite and otdelete.

    RELATED

      * otedit

      * opstat

      * optypeuninstall

optypeinstall

    Built-in alias for optyperead

optyperead

    Loads an .optype archive and installs the contained type into a
    Houdini directory.

    USAGE
      optyperead <src_file>.op_type <install_dir>

    .optype archives describe the user configurable aspects of
    operators. For built in operators, this includes the label, icon,
    default parameters, and help text. For HDK created operators it also
    includes the .so. For Vex and Subnet operators it includes the
    parameters and script which defines their behavior.

    The install directory should be in the HOUDINI_PATH.

    EXAMPLES

      > optyperead myvexop.optype $HOME/houdini<<version>>
      > optyperead mysubnet.optype $HSITE/houdini<<version>>

    RELATED

      * otedit

      * optypeuninstall

optypeuninstall

    REPLACED BY
      - hou.NodeType.uninstallFromPath()

    Removes all references to an operator.

    USAGE
      optypeuninstall <table_name> <op_basename> <uninstall_dir>

    Removes all references to the given operator from the uninstall
    directory and anywhere higher on the HOUDINI_PATH. This is useful to
    clean up operator types that you no longer want.

    <table_name> is the table name of a network. See the help for
    otwrite for a list of valid table names.


    NOTE
        The uninstallation does not take effect until you restart
        Houdini.

    EXAMPLES

      > optypeuninstall Sop clean $HSITE/houdini<<version>>
      > optypeuninstall Pop fireworks $HOME/houdini<<version>>

    RELATED

      * otedit

      * optype

      * optyperead

      * otwrite

opunhide

    Makes operators accessible in the toolbars.

    USAGE
      opunhide [<networktype> [<opname1...>]]

    When just the networktype option is specified, all current ophide
    commands for that network type are displayed. If no options are
    given, all ophide commands for all network types are displayed.

    The network type can be one of:

  * Object - Object Operators (OBJs)

  * Sop - Geometry Operators (SOPs)

  * Particle - Particle Network Operators

  * Pop - Particle Operators (POPs)

  * ChopNet - Channel Network Operators

  * Chop - Channel Operators (CHOPs)

  * Driver - Output Operators (ROPs)

  * Shop - Shader Operators (SHOPs)

  * Cop2 - Composite Operators (COP2s)

  * CopNet - Composite Network Operators

  * Vop - VEX Operators (VOPs)

  * VotNet - VEX Network Operators

    EXAMPLES

      > opunhide Sop sphere
        makes sphere SOP accessible in toolbar

      > opunhide Shop gen_shadow

        makes generic shadow SHOP assessable from toolbar

    RELATED

      * ophide

opunload

    Causes a node to throw away any cached geometry.

    USAGE
      opunload [-f] [-R] <nodes>

    You can specify a node path, a list of node paths, or one or more
    wildcards (for example, /obj/foo* for all nodes at the object level
    starting with foo).

    Currently, unloading only works for surface nodes (SOPs). When you
    unload a surface node, the node frees any cached geometry it has
    (this probably won't decrease the amount of memory Houdini uses, but
    it makes the memory available elsewhere in Houdini).

    This is similar to using the unload flag. When the unload flag is on
    a node will not cache its geometry, which is useful for ancestral
    nodes in the networks of static props and other non-time-dependent
    objects. This command does not set the unload flag, but rather
    simply orders one or more nodes to dump any cached geometry they may
    have.

    OPTIONS


        -f
            Do not unload "flagged" nodes (nodes with the display,
            template, footprint, export, or audio flags). The command
            prints a message when it skips a flagged node.

        -R
            Recursively unload the children of the specified nodes as
            well.

opunwire

    REPLACED BY
      - hou.Node.setInput()

    Disconnects inputs from an operator.

    USAGE
      opunwire <object> <input_number> [<input_number> ...]

    The input_number specifies the number of the input to unwire,
    starting at 0.

    EXAMPLES

      > opunwire box1 0
        Disconnects the input from the box SOP.

      > opunwire merge1 1 3 5

        Disconnects inputs 1, 3, and 5 from the merge SOP.

opupdate

    Re-cooks operators if their referenced files have changed.

    USAGE
      opupdate

    Causes all OPs which reference external disk files to re-cook if the
    disk file referenced has been changed, and reloads any cached
    textures or geometry files that are out of date.

    RELATED

      * texcache

      * objcache

      * geocache

opuserdata

    Provides access to name/value pair data that can be set on a node.

    USAGES
      opuserdata <nodes>
      opuserdata -n <name> <nodes>
      opuserdata -n <name> -v <value> <nodes>
      opuserdata -d <name> <nodes>

    When used with no options, this command outputs the user data for
    the specified nodes. The any number of nodes can be listed, and
    wildcards are supported.

    When used with just the -n option, only the user data matching that
    name will be displayed.

    When used with both a -n and -v option, the provided name/value pair
    will be set on the nodes.

    Finally, the -d option can be used to remove a value from the node's
    user data.

    OPTIONS


        <nodes>
            The nodes whose data is to be fetched or set.

        -n <name>
            The name of the value to fetch or set on the nodes.

        -v <value>
            Value to set on the nodes. Can only be used in conjunction
            with the -n option.

        -d <name>
            Name of value to be removed from the nodes.

opwire

    REPLACED BY
      - hou.Node.setInput()
      - hou.Node.setFirstInput()
      - hou.Node.setNextInput()

    Connects the output of one operator to the input of another.

    USAGE
      opwire [-o <output_index>] [-n] [-i] <operator> -<input_number>
      <wire_node> [-<input_number> <wire_node> ...]

    Connects the output <outputidx> of <operator> to input
    <input_number> of <wire_node>.

    OPTIONS


        -o <output_index>
            The index of the output to connect.

        -n
            Do not maintain world position when connecting objects.

        -i
            The node name should be a number. In this case the "indirect
            input" of the given number will be wired. Use this to get at
            the inputs from within a subnet OP.

    EXAMPLES

      > opwire twist1 -0 box1
        Will connect twist1 to the first input of box1

      > opwire box1 -0 merge1 ; opwire box2 -1 merge1

        Will connect box1 to the first input of merge1, box2 to the
        second input of merge1. It is recommended that for multiple
        input OPs like the merge SOP that the inputs are filled up
        consecutively.

      > opwire -o 4 global1 -3 output1

        Will connect output 4 from global1 into input 3 of output1.

      > opwire -i 0 -0 box1

        Connects the first indirect input to the first input of the box
        SOP.

opwrite

    REPLACED BY
      - hou.Node.saveItemsToFile()
      - hou.Node.saveChildrenToFile()

    Saves operators to a file.

    USAGE
      opwrite [-N] [-S] <name1> [<name2> ...] <filename>

    This is a partial motion file write. The contents are stored in
    .cpio format. The file can be read back into networks of the same
    type using the opread command.

    OPTIONS


        -N
            Save any network boxes that match the names provided,
            without automatically saving their contents.

        -S
            Same as -N option, but also saves each specified network
            box's contents. Will avoid duplicate saving of an operator
            if both the operator and its network box are specified by
            the names provided.

    EXAMPLES

      > opwrite geo* geometry.cpio
      > opwrite dome1 particle1 rainstorm.cpio
      > opwrite -S * everything.cpio

    RELATED

      * opread

      * opsave

      * opscript

      * mwrite

otcollapse

    REPLACED BY
      - hou.hda.collapseFromDirectory()

    Create an operator type library from separate files.

    USAGE
      otcollapse <otl_file> <source_dir>

    This command rebuilds an operator type library file from the
    specified directory. The directory must contain an index file with a
    list of files on disk to include in the operator type library.

    The index file and disk files can be created from an existing
    operator type library using the otexpand command.

    The combination of otexpand and otcollapse lets you extract
    component files from an OTL with otexpand, edit them, then rebuild
    the OTL with otcollapse.

    The command takes two arguments: the <otl_file> to create, and the
    <source_dir> containing the index and component files.

    RELATED

      * otexpand

otcomment

    REPLACED BY
      - hou.HDADefinition.comment()
      - hou.HDADefinition.setComment()

    Gets/sets the comment text associated with an operator type.

    USAGES
      otcomment <table>/<operator>
      otcomment -d <table>/<operator>
      otcomment <table>/<operator> <comment>

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    The first usage of this command queries the comment for the
    specified operator type.

    The second usage clears the operator type comment.

    The third usage sets the operator type comment.


    NOTE
        This command only works if the specified operator type is
        already defined using an operator type library.

    RELATED

      * otversion

      * otwrite

otconfig

    Sets various options of the operator type manager.

    USAGE
      otconfig [-b 0|1] [-d 0|1] [-i 0|1] [-l 0|1] [-o 0|1] [-s 0|1] [-S
      0|1] [-u 0|1] [-w 0|1] [-x 0|1] [-y 0|1]

    The options in this command correspond to the options available in
    the Operator Type Manager dialog, which you can show using the Tools
    menu.

    You can turn each option on or off by specifying 1 or 0. All changes
    take effect immediately and are saved to a configuration file in
    your HOME directory.

    Use the otprefer command to override these global options for a
    specific operator type. This lets you explicitly choose the source
    for a particular operator type definition.

    If you don't specify any options, the command prints the current
    values.

    OPTIONS


        -x 0|1
            Give preference to definitions from index files. Any
            operator definitions listed in index files take precedence
            over definitions for the same operators found in operator
            type libraries. Turn on this option if you have operator
            definitions that need to be shared between this version of
            Houdini and versions 5.5 or earlier.

        -i 0|1
            Give preference to definitions saved in hip file. Hip files
            can optionally embed an operator type library containing
            definitions for all operators used in the hip file. If this
            option is on, these definitions stored in the Hip file are
            given precedence over definitions for the same operators
            stored in other operator type libraries. Turn on this option
            if you don't want future changes to operator definitions to
            affect the functioning of your hip files. The "-x" option
            takes precedence over this option.

        -l 0|1
            Give precedence to definitions with latest date. If this
            option is on and there are several definitions available for
            a single operator, Houdini will use the one which was
            modified most recently. If this option is off, Houdini uses
            the order in which the operator type libraries are loaded to
            determine which definition to use. The "-x" and "-i" options
            take precedence over this option.

        -s 0|1
            Save operator definitions to hip file. If this option is on,
            whenever you save your Hip file, Houdini will embed an
            operator type library into the file. This library contains
            the operator definitions for all operators used in the Hip
            file. Turning this option off will reduce the disk space
            used by your Hip files, but if you delete one of the
            operator definitions used by the Hip file, the Hip file will
            not be able to create the deleted operator(s).

        -S 0|1
            Save definitions of unlocked assets to hip file. If this
            option is on, whenever you save your Hip file, Houdini will
            embed an operator type library into the file. This library
            contains the operator definitions for all operator types in
            the Hip file that have at least one instance which is set to
            allow editing of its contents. If the save operator
            definitions to hip file option is turned on, this option
            doesn't matter because all operator type definitions will be
            saved in the hip file whether or not there are any unlocked
            instances. This option is for hip files which have required
            modifications to an asset instance. In that case, changes to
            the external asset definition may invalidate the changes to
            the asset made within the hip file. By saving the
            definitions of these unlocked assets to the hip file these
            conflicts can be avoided. When this option is on, it is a
            good idea to also turn on the option to give preference to
            definitions saved in hip file. This will ensure that any
            changes to the external asset definition are ignored by this
            hip file.

        -u 0|1
            Leave Values When Defaults Change. If this option is turned
            on, parameters at their default values are not changed when
            a new definition for the operator type is loaded with a new
            set of default values. If this option is turned off, then
            parameters at their old default values are changed to match
            the new default values.

        -w 0|1
            Display warning for out of date operators. If this option
            and -i are on, Houdini checks the modification times of all
            operator definitions embedded in the hip file. If it finds
            that the embedded definition is not as recent as another
            definition available on disk, it opens a warning dialog to
            notify you that the Hip file contains operator definitions
            that are out of date.

        -y 0|1
            Display warning during load when nodes use an incomplete
            asset definition because a complete definition is not
            available.

        -b 0|1
            Create backup files when saving libraries. If this option is
            on, any time an operator type library file is saved a backup
            copy of the file will be created. This feature ensures that
            any changes you make to an operator definition can be
            undone. By default the backups are made in a "backup"
            subdirectory of the operator type library's path. You can
            override this location by setting the HOUDINI_BACKUP_DIR
            environment variable.

        -d 0|1
            Safeguard operator definitions. Removes "Allow Editing of
            Contents"/"Match Current Definition" from the context menu.
            Hiding this option affords a level of security preventing
            the user from modifying operator definitions.

        -o 0|1
            Use OPlibraries files to find HDAs. This option controls how
            Houdini finds HDA files to load when starting up. With this
            option on, Houdini searches the HOUDINI_PATH for files named
            OPlibraries which contain lists of HDA file names to load.
            With this option off, Houdini scans for *.hda in all
            directories specified by the HOUDINI_OTLSCAN_PATH
            environment variable. This path defaults to the hda
            subdirectory of every directory in the HOUDINI_PATH.


    NOTE
        If only HOUDINI_PATH is defined, then Houdini always uses the
        most recent .hda in the path.

    RELATED

      * otedit

      * otprefer

otcontentadd

    REPLACED BY
      - hou.HDADefinition.addSection()

    Adds a file to an existing operator type definition.

    USAGE
      otcontentadd [-l <source_otl>] <table>/<operator> <section> <file>

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    The <section> name is the name to use for the file inside the type
    definition. The <file> is the name of the file on disk to copy into
    the operator definition.

    To access the data stored inside an operator definition, use a
    string like "opdef:/<table>/<operator>?<section>". You can use this
    type of string anywhere Houdini accepts a file name.

    To get a list of all data sections that exist in an operator
    definition, use the otcontentls command. Use otcontentdelete to
    remove a data section from an operator definition.

    OPTIONS


        -l <source_otl>
            The library in which to modify the operator type. If you
            don't specify a <source_otl>, the command uses the current
            definition for the operator.

    RELATED

      * otcontentdelete

      * otcontentls

      * otcontentsave

      * otwrite

otcontentdelete

    REPLACED BY
      - hou.HDASection.destroy()

    Removes data from an operator type definiton.

    USAGE
      otcontentdelete [-l <source_otl>] <table>/<operator> <section>

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    The <section> name is the name of the data to delete. To get a list
    of all data sections that exist in an operator definition, use the
    otcontentls command.

    To get a list of all data sections that exist in an operator
    definition, use the otcontentls command..

    OPTIONS


        -l <source_otl>
            The library in which to modify the operator type. If you
            don't specify a <source_otl>, the command uses the current
            definition for the operator.

    RELATED

      * otcontentadd

      * otcontentls

      * otcontentsave

      * otwrite

otcontentls

    REPLACED BY
      - hou.HDADefinition.sections()
      - hou.HDADefinition.hasSection()
      - hou.HDASection.size()
      - hou.HDASection.modificationTime()

    Lists all sections in an operator type definition.

    USAGE
      otcontentls [-v] [-l <source_otl>] <table>/<operator>

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    OPTIONS


        -v
            (Verbose) Show the size and modification time for each
            section.

        -l <source_otl>
            The library in which to find the operator type. If you don't
            specify a <source_otl>, the command uses the current
            definition for the operator.

    RELATED

      * otcontentadd

      * otcontentdelete

      * otcontentsave

      * otwrite

otcontentsave

    REPLACED BY
      - hou.HDASection.contents()

    Extracts a file from inside an operator type definition.

    USAGE
      otcontentsave [-l <source_otl>] [-o <file_name>]
      <table>/<operator> <section>

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    The <section> name is the name of the data to save. Use the -o
    option to specify the name of the file to save the data to.

    To get a list of all data sections that exist in an operator
    definition, use the otcontentls command..

    OPTIONS


        -l <source_otl>
            The library in which to find the operator type. If you don't
            specify a <source_otl>, the command uses the current
            definition for the operator.

        -o <file_name>
            The name of the file to save the data to.

    RELATED

      * otcontentadd

      * otcontentdelete

      * otcontentls

      * otwrite

otcopy

    REPLACED BY
      - hou.HDADefinition.copyToHDAFile()

    Copies data from inside one HDA file to another.

    USAGE
      otcopy [-v] [-l <source_hda>] [-n <new_name>] [-e <new_label>]
      <table>/<operator> [<table>/<operator> ...] <to_hda_file>

    You can use this function for archiving operator types, or updating
    an operator definition in one library from a definition in another
    library.

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type. Either or both or the <table> and <operator> values
    can contain wild card characters. Any number of <table>/<operator>
    pairs can be specified.

    The <to_hda_file> value specifies the name of the operator type
    library file to which the data should be copied. If a definition for
    the specified operator already exists in the destination file, it is
    overwritten.


    NOTE
        You can use the otmerge command to copy all the operator types
        from one library into another with a single command.

    OPTIONS


        -v
            Outputs the name of each operator type that is copied to the
            new file.

        -l <source_hda>
            The library in which to find the operator type. If you don't
            specify a <source_hda>, the command uses the current
            definition for the operator.

        -n <new_name>
            Specify a new name for the copied operator type. This lets
            you create a new operator type using an existing type as a
            starting point.

        -e <new_label>
            Specify a new description for the operator type. If you use
            the -e option without the -n option, the new operator type
            definition will still conflict with the existing definition.

    EXAMPLES

      > otcopy -l $HH/hda/OPlibShop.hda Shop/v_clay $HOME/OPcustom.hda
        Copies the Shop/v_clay definition from $HH/hda/OPlibShop.hda
        into $HOME/OPcustom.hda.

      > otcopy -n v_newclay -e "My Clay" Shop/v_clay $HOME/OPcustom.hda

        Copies the current Shop/v_clay definition to $HOME/OPcustom.hda,
        but renames it to Shop/v_newclay, with the label "New Clay".

    RELATED

      * otdelete

      * otedit

      * otmerge

      * otwrite

otcreatecompiledtypefrom

    REPLACED BY
      - hou.Node.createCompiledDigitalAsset()

    Creates a new operator type definition from a subnet.

    USAGE
      otcreatecompiledtypefrom [-n <op_name>] [-N <op_label>] [-l
      <hda_file>] <vop network>

    This command serves the same purpose as the dialog that appears when
    you choose the Compile VEX to SHOP Type item from the RMB menu of a
    VOP network node tile, such as Material Shader Builder SHOP or VEX
    Surface SHOP Type VOPNET. The various options correspond to the
    controls in the mentioned dialog.

    This command only works if the node specified by the <vop network>
    argument is in fact a node that can generate code.

    This function uses the VOP network to generate VFL code and to
    compile it to VEX, which is then stored in the digital asset section
    or sections. The digital asset does not have contents section, which
    means it does not have VOP network inside, but instead relies on the
    saved VEX sections to provide the shader code.

    OPTIONS


        -n <op_name>
            Internal name for the new operator type. The default value
            is the name of the subnet node, preceded by the current user
            name to help ensure the name is unique.

        -N <op_label>
            Descriptive name for the new operator type. The default
            value is derived from the name of the subnet.

        -l <hda_file>
            Name of the operator type library file where the new
            operator type should be saved. The default value is
            $HOME/houdini<version>/hda/OPcustom.hda.

    EXAMPLES

      > otcreatecompiledtypefrom -n mymaterial -N "My Material" -l $HOME/mylib.hda  /shop/vopmaterial1
        Creates a new operator type called mymaterial in $HOME/mylib. It
        will be a scripted operator with code saved in the asset
        sections.

      > otcreatecompiledtypefrom -n myshader -N "My Shader" -l $HOME/mylib.hda  /vex/vopnet_surface1

        Creates a new operator type called myshader in $HOME/mylib.hda.
        It is a surface shader operator with vex code already compiled
        and saved within the digital asset definition.

    RELATED

      * otcreatetypefrom

      * otwrite

otcreatetypefrom

    Creates a new operator type definition from a subnet.

    USAGE
      otcreatetypefrom [-s] [-f] [-n <op_name>] [-N <op_label>] [-m
      <min_inputs>] [-M <max_inputs>] [-z] [-c <comment>] [-v <version>]
      [-l <otl_file>] [-i <source>] [-r <rename_to>] <subnet>

    This command serves the same purpose as the dialog that appears when
    you choose the "Create Digital Asset" item from the RMB menu of a
    subnet node tile. The various options correspond to the controls in
    the "Create Digital Asset" dialog.

    This command only works if the node specified by the <subnet>
    argument is in fact a subnet node. You cannot use this command on
    custom subnet operator types.

    This command attempts to convert absolute paths to relative paths
    within the subnet before creating the new type. If there are
    external references the command signals an error and does not save.
    To override this behavior, use -f to force a save. Note that
    references may have been successfully modified even if an error
    occurs.

    OPTIONS


        -s
            Don't try to detect or fix external references.

        -f
            Forces the save despite external references.

        -n <op_name>
            Internal name for the new operator type. The default value
            is the name of the subnet node, preceded by the current user
            name to help ensure the name is unique.

        -N <op_label>
            Descriptive name for the new operator type. The default
            value is derived from the name of the subnet.

        -m <min_inputs>
            Minimum number of inputs. By default this is the number of
            inputs connected to the subnet node.

        -M <max_inputs>
            Maximum number of inputs. By default this is the number of
            inputs connected to the subnet node.

        -Z
            Specifies that the subnet contents should be stored in a
            compressed format to reduce disk space requirements.

        -c <comment>
            Text comment for the operator type.

        -v <version>
            Operator type version.

        -l <otl_file>
            Name of the operator type library file where the new
            operator type should be saved. The default value is
            $HOME/houdini<version>/otls/OPcustom.otl.

        -i <source>
            Location where the operator type library file should be
            installed. The default installs the library to the current
            hip file only. Valid values here are any entry in the
            HOUDINI_PATH.

        -r <rename_to>
            Renames the subnet after creating the new operator type. The
            default is to not rename the subnet.

    EXAMPLES

      > otcreatetypefrom -n mysubnet -N "My Subnet" -m 0 -M 1 -l $HOME/mylib.otl -i $HOME/houdini<<version>> -r mysubnet1 /obj/subnet1
        Creates a new operator type called mysubnet in $HOME/mylib.otl
        and installs it to $HOME/houdini<version>. The new operator type
        will take from 0-1 inputs. The node will be renamed to
        mysubnet1.

    RELATED

      * otcomment

      * otversion

      * otwrite

otdelete

    REPLACED BY
      - hou.HDADefinition.destroy()

    Deletes operator definitions from an operator type library.

    USAGE
      otdelete [-v] <table>/<operator> [<table>/<operator> ...]
      <hda_file>

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type. Either or both or the <table> and <operator> values
    can contain wild card characters. Any number of <table>/<operator>
    pairs can be specified.

    The <hda_file> is the name of the operator type library file from
    which the definitions are to be deleted.

    If you delete an operator in use by Houdini, and there are no other
    definitions for this operator available in other operator type
    libraries, an empty replacement operator definition is added to the
    embedded operator type library in the .hip file. This embedded
    definition will not be saved to disk until you save the Hip file,
    and then only if the option to save operator definitions to the Hip
    file is on.

    OPTIONS


        -v
            Outputs the name of each operator type that is deleted.

    EXAMPLES

      > otdelete Shop/v_clay $HOME/OPcustom.hda

    RELATED

      * otconfig

      * otcopy

      * otedit

      * otwrite

otedit

    REPLACED BY
      - hou.ui.openTypePropertiesDialog()

    Opens a property editor for an operator type.

    USAGE
      otedit [-p [-x]] [-i] <table> <operator> <>

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type. A node path can also be specified in the <node>
    value. This node must be of the operator type being edited.

    OPTIONS


        -p
            Automatically promote any spare parameters on the <node>
            specified into parameters on the operator type.

        -x
            When promoting spare parameters of the <node>, exclude any
            shader parameters promoted by other mechanisms. This usually
            applies only to VOP nodes, where shading parameters are
            generated by Parameter VOPs. Promoting such parameters with
            this command would conflict with the automatic promotion
            from VOP networks.

        -i
            Immediately save the current state of the operator type, as
            if you clicked Apply in the type properties editor.

    RELATED

      * optype

      * optyperead

      * otwrite

      * optypeuninstall

otexpand

    REPLACED BY
      - hou.hda.expandToDirectory()

    Splits an operator type library into component files.

    USAGE
      otexpand <otl_file> <to_dir>

    This command writes out the contents of <otl_file> as individual
    files and an index file in <to_dir>. If <to_dir> does not exist, the
    command will create it.

    The combination of otexpand and otcollapse lets you extract
    component files from an OTL with otexpand, edit them, then rebuild
    the OTL with otcollapse.

    RELATED

      * otcollapse

otgetotl

    REPLACED BY
      - hou.HDADefinition.libraryFilePath()
      - hou.NodeType.definition()

    Determines whether/where an operator type is defined.

    USAGE
      otgetotl [-b] <table>/<operator>

    This command lets you determine if a given operator type is defined
    in an operator type library, and if so, which library is currently
    being used to provide the operator type. The output of this command
    is the full path of the operator type library file that defines the
    operator.

    OPTIONS


        -b
            Print 1 if the type is defined by an operator type library,
            otherwise print 0.

otglob

    REPLACED BY
      - hou.NodeTypeCategory.nodeTypes()
      - hou.hda.definitionsInFile()

    Lists operator types matching a pattern.

    USAGE
      otglob [-o] [-l <hda_file>] <table>/<operator> [<table>/<operator>
      ...]

    Lists all operator types that match the specified table and operator
    name patterns. Any number of table/operator patterns can be listed,
    and each one can contain the standard set of wild card characters
    (*, ?, [xyz]) in either the table or operator portion. However there
    must always be a slash to separate the table and operator parts.

    OPTIONS


        -o
            List only operator types that are defined as digital assets
            inside an operator type library. Without this option, built-
            in operator types such as the Point SOP of Source POP will
            also be listed.

        -l <hda_file>
            List only operator types that are found in the specified
            operator type library file.

    EXAMPLES

      > otglob -l $HH/hda/OPlibShopVMantra.hda Shop/v_*
        Will output a list of all SHOPs with names that start with v_ in
        the OTL file $HH/hda/OPlibShopVMantra.hda.

    RELATED

      * otls

      * otgetotl

otinuse

    REPLACED BY
      - hou.HDADefinition.nodeType()
      - hou.HDADefinition.nodeTypeName()
      - hou.HDADefinition.isInstalled()
      - hou.NodeType.instances()

    Helps determine what Operator Type Libraries are in a given Hip
    file.

    USAGE
      otinuse [-n] [-t] [-l] [-f <otlfile>] [<rootnode>]

    Also helps determine which operator types are within OTLs. At least
    one of -n, -t, and -l must be specified. If more than one is set,
    the data is output with the node name first, then the operator type,
    then the OTL file name.

    The <rootnode> parameter indicates where Houdini should start
    searching for eligible nodes. The search is performed recursively.
    If a <rootnode> is not set, the entire Hip file is searched.

    OPTIONS


        -n
            Specifies that the names of any nodes matching the search
            should be output.

        -t
            Indicates the operator type should be output.

        -l
            Indicates that the OTL file name should be output for all
            matching nodes.

        -f <otlfile>
            If -f is specified, only nodes defined by operator types in
            that OTL file will be output. If -f is not given, any
            operator defined by any OTL will be listed.

otload

    REPLACED BY
      - hou.hda.installFile()

    Loads an operator type library into the current session.

    USAGE
      otload [-n] [-f] <hda_file> [<install_source>]

    Performs the same function as the Install Digital Asset Library item
    in the Houdini File menu.

    The <hda_file> value is the name of the operator type library file
    to load.

    If you don't specify a <install_source>, the library is loaded only
    into the current Houdini session. The library file name will also be
    saved in the Hip file so when you edit the same Hip file in the
    future, the library will be loaded automatically. This is equivalent
    to using "Current HIP file" as the <install_source>.

    If you specify an "OPlibraries" file with the <install_source>
    argument, Houdini will add the name of the library to the file.
    "OPlibraries" files are text files containing lists of library files
    for Houdini to load on startup. When Houdini starts up, it searches
    your HOUDINI_PATH environment variable for files with the name
    "OPlibraries" and loads the listed libraries.

    By creating OPlibraries files in appropriate locations in your
    HOUDINI_PATH ($HOME, $JOB, $HFS) you can set up some libraries that
    are to be loaded into all Houdini sessions, some specific to a
    particular job, some specific to a particular user, and so on.

    If <install_source> is "Scanned OTL Directories", then is equivalent
    to the installation menu entry in the Install Digital Asset Library
    dialog.

    OPTIONS


        -n
            Do not try to modify the OPlibraries file. This argument is
            useful when the OPlibraries file contains wild cards that
            would cause the new library to be loaded if Houdini were
            restarted. This way a new OTL file can be loaded into
            Houdini without disturbing the OPlibraries contents.

        -f
            Ensure that the asset definitions contained in this OTL are
            used as the current asset definitions. This sets an explicit
            preference for these definitions if required.

    EXAMPLES

      > otload OPcustom.hda $HOME/houdini<<version>>

    RELATED

      * otrefresh

      * otunload

otls

    REPLACED BY
      - hou.HDADefinition.nodeTypeCategory()
      - hou.HDADefinition.nodeTypeName()
      - hou.HDADefinition.libraryFilePath()
      - hou.HDADefinition.icon()
      - hou.HDADefinition.modificationTime()
      - hou.HDADefinition.userInfo()
      - hou.HDADefinition.extraInfo()
      - hou.HDADefinition.minNumInputs()
      - hou.HDADefinition.maxNumInputs()
      - hou.NodeType.allInstalledDefinitions()
      - hou.hda.definitionsInFile()
      - hou.hda.loadedFiles()

    Lists operator types defined in a library file.

    USAGES
      otls [-f <format>] [<hda_file> [<table>/<operator>]]
      otls -a <table>/<operator>

    Without any arguments, the command prints a list of currently
    installed operator type libraries.

    If you give a <hda_file>, the command lists the operator types
    defined in the library file.

    If you give an <hda_file> and a <table>/<operator> pair, the command
    prints information about the given operator type in the library
    file. The <table> value specifies the class of the operator you want
    to modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    If both an OTL file name and a <table>/<operator> are specified,
    this command also accepts the -f option.

    OPTIONS


        -f <format>
            Allows the command output to be customized. The <format>
            argument is a string where each letter represents a
            particular piece of information. The accepted letters are:

          * n - Operator type name.

          * l - Descriptive label.

          * p - Path to the type definition.

          * c - Icon for the operator type.

          * t - Operator class (such as Object, Sop, etc.).

          * x - Extra info which depends on the operator type.

          * i - Minimum number of allowed inputs.

          * I - Maximum number of allowed inputs.

          * s - Specified if the operator type is a subnet.

          * d - Specified if the operator type is a dummy definition.

          * m - Modification time for the type definition.

          * u - User specified arbitrary info.

        -a
            Outputs a list of all OTL files currently installed which
            contain a definition for the specified operator type. Use
            otgetotl to find out which definition is currently in use.

    EXAMPLES

      > otls -f "lm" $HH/hda/OPlibShopVMantra.hda Shop/v_decal
        Will output:

      > VEX Decal Sat Mar 06 19:09:10 2004

    RELATED

      * otload

      * otunload

otmerge

    REPLACED BY
      - hou.HDADefinition.copyToHDAFile()

    Copies all operator type definitions from one library file to
    another.

    USAGE
      otmerge <source_otl_file> <dest_otl_file>


    NOTE
        If <source_otl_file> and <dest_otl_file> have the same operator
        type defined, the command will _not_ overwrite the definition in
        <dest_otl_file>.

    RELATED

      * otcopy

otprefer

    REPLACED BY
      - hou.HDADefinition.isPreferred()
      - hou.HDADefinition.setIsPreferred()

    Get/set which type definition to use when multiple implementations
    are available.

    USAGES
      otprefer
      otprefer -c
      otprefer <table>/<operator>
      otprefer <table>/<operator> <otl_file>

    It is possible for the same operator definition to be available from
    several different OTL files in the same Houdini session. This
    command lets you choose a particular OTL file to use as the source
    for an operator definition. This overrides the global options set
    with the otconfig command.

    Without any arguments, the command prints the current overrides.

    If you give a <table>/<operator> pair without an <otl_file>, the
    command prints the current override, if any, for that operator type.

    If you give a <table>/<operator> pair and an <otl_file>, the command
    sets the given library as the source for the operator type.

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    OPTIONS


        -c
            Clear all overrides.

    RELATED

      * otconfig

      * otwrite

otrefresh

    REPLACED BY
      - hou.hda.reloadFile()
      - hou.hda.reloadAllFiles()
      - hou.hda.loadedFiles()

    Reloads an operator type library from disk.

    USAGE
      otrefresh [-r] [<otl_file>]

    If you specify an <otl_file>, that library is reloaded, otherwise
    all libraries are reloaded.

    This command will rarely be necessary for most users. Any changes
    made to operator definitions or operator type libraries
    automatically cause refreshes in the current Houdini session. You
    only need to run this command if an operator type library is
    modified outside the current Houdini session (by another user, from
    a shell, or from another Houdini session).

    OPTIONS


        -r
            the contents of the OPlibraries files are also reloaded.
            This takes more time, but allows these files to be changed
            by external applications and have a running Houdini reflect
            these changes. Libraries not found in the OPlibraries files
            are not automatically uninstalled.

    RELATED

      * otload

      * otunload

otrenamesource

    REPLACED BY
      - hou.hda.renameSource()

    Gives a descriptive name to a library source.

    USAGE
      otrenamesource <source> <new_name>

    The descriptive name can be used with any commands that accept a
    source argument.

    For example, you might want to name the source in your HOME
    directory as "My Libraries". The source in $HFS/houdini is "Standard
    Libraries".

    This name is stored in the OPlibraries file at the specified
    location.

    EXAMPLES

      > otrenamesource $HOME/houdini<<version>> "My Libraries"

    RELATED

      * otls

otsync

    REPLACED BY
      - hou.Node.allowEditingOfContents()
      - hou.Node.matchCurrentDefinition()
      - hou.Node.matchesCurrentDefinition()

    Syncs the contents of nodes with the contents of their type
    definitions.

    USAGE
      otsync [-d | -u] <pattern>

    For subnet types that were saved with their contents locked (see
    otedit and otwrite), you can use this command to replace the
    contents of operators matching <pattern> with the contents of the
    operator type. The parameters of the node are not modified, only the
    contents.

    See editing digital assets for more information.

    OPTIONS


        -d
            Prints the current synchronization status of the given
            operators.

        -u
            (Unsync) If the nodes specified by the pattern match the
            locked contents of their operator type definitions, unlock
            the nodes so you can edit their contents. This does not
            modify the contained nodes.

    RELATED

      * otedit

      * otunsync

      * otwrite

ottouch

    REPLACED BY
      - hou.HDADefinition.setModificationTime()

    Sets the last modified time for an operator type definition.

    USAGE
      ottouch <table>/<operator> <hda_file> [<timestamp>]

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    The <hda_file> argument specifies the operator type library to
    modify.

    If you do not give a <timestamp> value, the type is stamped with the
    current time.

    The time stamp must be in the format: "day mmm dd hh:mm:ss yyyy".

    EXAMPLES

      > ottouch Shop/v_clay OPcustom.hda "Fri Feb 07 14:55:26 2003"

    RELATED

      * otedit

otunload

    REPLACED BY
      - hou.hda.uninstallFile()

    Unloads an operator type library.

    USAGE
      otunload [-n] <otl_file> [<source>]

    The <otl_file> argument specifies the type library to unload.

    The same library may be listed in multiple "OPlibraries" files, in
    which case you can specify the <source> from which to remove the
    library.

    If you do not give a <source>, the command finds the source that was
    used to load the library, and removes the library name from that
    location.

    OPTIONS


        -n
            Do not try to modify the OPlibraries file. This argument is
            useful when the OPlibraries file contains wild cards, and
            you are about to delete the OTL file that is being unloaded.
            The contents of the OPlibraries file are not disturbed, but
            it becomes safe to delete the OTL file because Houdini will
            no longer be using it.

    RELATED

      * otload

      * otrefresh

otunsync

    Built in alias for otsync -u.

    USAGE
      otunsync <pattern>

    See editing digital assets for more information.

    RELATED

      * otedit

      * otsync

otversion

    REPLACED BY
      - hou.HDADefinition.version()
      - hou.HDADefinition.setVersion()

    Gets/sets the version of an operator type definition.

    USAGES
      otversion <table>/<operator>
      otversion -d <table>/<operator>
      otversion <table>/<operator> <version>

    If you give a <table>/<operator> pair, the command prints the
    operator type definition version.

    If you give a <table>/<operator> pair and a version, the command
    sets the operator type definition version.

    The <table> value specifies the class of the operator you want to
    modify. A list of valid table names is found in the help for the
    otwrite command. The <operator> value is the name of the specific
    operator type.

    It is up to you how you use this version information; it is passed
    to the SyncNodeVersion event handler script for performing parameter
    upgrades.

    OPTIONS


        -d
            Clear the operator type version.

    RELATED

      * otcomment

      * otwrite

otwrite

    REPLACED BY
      - hou.HDADefinition.save()

    Saves an operator type into an operator type library file.

    USAGES
      otwrite <table>/<operator> <hda_file>
      otwrite [-d] [-i] [-l] [-s] [-z] [-c <comment>] [-v <version>] [-t
      <type>] -o <path_to_examplar> <hda_file>

    All the data needed to define the operator type is included in the
    library. Any number of operator types can be included in a single
    library.

    You can specify the operator type in two ways:

  * Give the operator table name and operator type name separated by a
    slash.

        The <table> value specifies the class of the operator you want
        to modify. A list of valid table names is found below. The
        <operator> value is the name of the specific operator type.

  * Use the -o option to specify a path to a node (an examplar) of the
    type you want to save. If you use this method, the contents of the
    given node are made part of the operator type definition. See also
    the -d and -l options.

    The <table> name can be:

    Object

    Object Operators (OBJs)

    Sop

    Geometry Operators (SOPs)

    Particle

    Particle Network Operators

    Pop

    Particle Operators (POPs)

    ChopNet

    Channel Network Operators

    Chop

    Channel Operators (CHOPs)

    Driver

    Output Operators (ROPs)

    Shop

    Shader Operators (SHOPs)

    Cop2

    Composite Operators (COP2s)

    CopNet

    Composite Network Operators

    Vop

    VEX Operators (VOPs)

    VopNet

    VEX Network Operators

    OPTIONS


        -d
            Normally, the current values of the exemplar node are used
            as the initial values for the operator type definition. This
            option makes the initial values be the parameters' defaults.

        -i
            If the -i option is set with the -o option, the current
            values of the node are used as the default parameter values.
            This is equivalent to clicking the Copy Defaults From Node
            button in the Type Properties dialog.

        -l
            New nodes of this type will be created with their contents
            locked, and will reference the contents defined in the
            operator definition. This option is equivalent to turning on
            the Save Contents as Locked setting in the Type Properties
            editor.

        -o
            specify a path to a node (an examplar) of the type you want
            to save. If you use this method, the contents of the given
            node are made part of the operator type definition. See also
            the -d and -l options.

        -s
            If the -s option is set with the -o option, the spare
            parameters of the node are saved to the creation script of
            the asset so that new instances of this asset will have the
            same spare parameters.

        -z
            For subnet operator types with locked contents, compress the
            contents to reduce size on disk.

        -m
            Compile the resultant asset. Note that after this operation,
            all access to contents will be lost, essentially granting it
            execute-only permissions.

        -n
            Skip the creation of backup files when modifying existing
            operator type library files.

        -c <comment>
            Sets the text comment associated with the operator type
            definition.

        -v <version>
            Sets the version for the operator type definition.

        -t <type>
            Write the contents of the given node but using the operator
            type specified. This is an advanced option and should not
            typically be used.

    EXAMPLES

      > otwrite Sop/xform OPcustom.hda
      > otwrite -l -o /obj/geo1/xform1 OPcustom.hda

    RELATED

      * optype

      * otcomment

      * otedit

      * otload

      * otversion

pane

    REPLACED BY
      - hou.Desktop.panes()
      - hou.Desktop.paneTabs()
      - hou.Desktop.currentPaneTabs()
      - hou.Desktop.createFloatingPaneTab()
      - hou.Pane.splitHorizontally()
      - hou.Pane.splitVertically()
      - hou.PaneTab.name()
      - hou.PaneTab.setName()
      - hou.PaneTab.setType()
      - hou.PaneTab.close()
      - hou.PaneTab.isFloating()
      - hou.PathBasedPaneTab
      - hou.playbar.moveToBottom()
      - hou.playbar.moveToPane()
      - hou.playbar

    Creates, closes, or sets options on a pane.

    USAGES
      pane -S | -F <<@options [-d <desk_name>]
      pane <<@options [-d <desk_name>] <pane_name>
      pane -z [-d <desk_name>] <pane_name>
      pane -d <desk_name>

    OPTIONS


        -d <desk_name>
            The desk on which to modify the pane. If no desk name is
            given the command will assume the current desk. If you don't
            specify any options, the command prints the list of panes in
            this desk.

        -S
            Create a new pane to the right of all existing panes. If you
            do not give a -m option, the new pane will be a network
            editor. Returns the name of the new pane.

        -F
            Create a new floating window. If you do not give a -m
            option, the new pane will be a network editor. Returns the
            name of the new pane.

        -P <x> <y>
            Only available with the -F option. Sets the X and Y position
            of the new floating window. The window will open near this
            position, not exactly at this position.

        -w <width> <height>
            Only available with the -F option. Sets the width and height
            position of the new floating window

        -a 0|1
            Hide network controls on/off

        -A 0|1
            Pane bar visible on/off

        -f 0|1
            Fullscreen mode on/off

        -l <pane_group_number>
            Link to pane group (0-5).

        -L 0|1
            Set to 1 to make this pane a parent pane (track the parent
            directory of a path).

        -m <type>
            Sets the type of pane:

          * bundlelist

          * animeditor (Animation Editor)

          * details (Spreadsheet)

          * helpbrowser

          * iprviewer

          * linker

          * listchans (Channel List)

          * maniplist (Handle List)

          * neteditor

          * parmeditor (Parameter Dialog)

          * parmsheet (Parameter Spreadsheet)

          * perfmon (Performance Monitor)

          * takelist

          * textport

          * treecontrol

          * uicustom (Custom Panel)

          * viewer

        -n <name>
            Sets the pane name

        -h <path>
            Sets the operator network path. See also the -T option.

        -H <nodepath>
            Sets the operator node path

        -T <type>
            Sets the operator type. This determines what type of network
            appears if the path given with the -h option does not exist.

        -o
            Open a new copy of the pane.

        -p
            Move the playbar to this pane.

        -s 0|1
            Split the pane (0 = top/bottom, 1 = left/right).

        -t 0|1
            Use 1 to tear off the window, 0 to put back a tear-off
            window.

        -z
            Close the pane.

    EXAMPLES

      > pane -f 1 panetab2
        turn fullscreen mode on for panetab2

      > pane -h /obj panetab2

        set the network path to objects for panetab2

      > pane -H /obj/model panetab2

        set the node path of the panetab2 to have the network /obj and
        the specific node model.

      > pane -H /obj/model/ panetab2

        set the pane to point to the network /obj/model with no current
        node.

      > pane -l 0 -p panetab2

        turns linking off and moves the playbar to panetab2

panepath

    Sets the current node of all panes in a desk.

    USAGE
      panepath [-d <desk_name>] [-f] [-p <pane_name>] <new_path>

    This command only affects panes that match the given <new_path> up
    to the last folder. For example, if you have a pane viewing
    /obj/model/box1, and call panepath /obj/model/sphere1, the pane will
    change to point to the sphere. If you call /obj/cam1, the pane will
    not change. If the -f option is not specified, this change only
    occurs if the pane currently matches the path up to the last
    directory.

    OPTIONS


        -d <desk_name>
            The desk on which to modify the panes. If no desk name is
            given the command will assume the current desk.

        -f
            Allows the full path to be set.

        -p <pane_name>
            The pane name for which to set the new path. If this option
            is not present, the path is set for all the panes.

parmeditor

    Sets various options of a parameter editor.

    USAGE
      parmeditor <<@options [-d <desk_name>] <pane1> ...

    OPTIONS


        -d <desk_name>
            The desk on which to modify the pane. If no desk name is
            given the command will assume the current desk.

        -w 0|1
            Show world tree on/off

        -T <float>
            Split fraction between edit area and tree.

parmlist

    Sets various options of the parameter list within a channel list
    gadget.

    USAGE
      parmlist [options] <pane1> ...


    NOTE
        This command can be executed on a chanlist or animeditor pane.

    OPTIONS


        -M select|display
            Set the mode to either Selection or Display.

        -D 0|1
            Toggles the display of the display flag column.

        -V 0|1
            Toggles the display of the parameter value column.

        -f 0|1
            Toggles the usage of fullpath names in the name column.

        -h 0|1
            Toggles the usage of node header rows.

        -l 0|1
            Toggles the usage of parameter labels in the name column.

parmsheet

    Sets various options of the parameter spreadsheet.

    USAGE
      parmsheet options [-d <desktop_name>] <pane1> ...

    You must specify a pane name. If you don't specify a desk name the
    command assumes the current desk.

    OPTIONS


        -d <desktop_name>
            Desktop to operate on.

        -o <string>
            Set the operator mask.

        -f <string>
            Set the filter. You can type opbfilters to see the available
            ones.

        -p <string>
            Set the parameter mask.

        -w 0|1
            Display the tree view.

        -T <float>
            Split fraction for tree.

        -P 0|1
            Display parameters in the tree.

        -F 0|1
            Display flags in the tree.

        -C 0|1
            Cull tree using filter.

        -n 0|1
            Display full paths in the node column.

        -e 0|1
            Display empty rows.

pathmap

    Interface to modify or test the HOUDINI_PATHMAP variable.

    USAGES
      pathmap -a <source_dir> <dest_dir>
      pathmap -r <source_dir>
      pathmap [-c] -t <path>
      pathmap [-c]

    This command allows you to inspect or modify the HOUDINI_PATHMAP
    variable. This variable is used to map one directory to another.

    OPTIONS

        The -a option adds a new mapping to the HOUDINI_PATHMAP
        variable. The -r option removes a mapping from the
        HOUDINI_PATHMAP variable.

        The -t option allows you to test the mapping of a path. With the
        -c option, only the resulting mapping will be printed.

        With no options, the existing HOUDINI_PATHMAP is printed out.
        With the -c option, the map will be printed compactly (on a
        single line).

    EXAMPLES

      > pathmap -a "C:/temp" "/tmp"
      > pathmap -a "/tmp" "C:/temp"
        Add a mapping from the C:/temp directory to the /tmp, but also
        add a mapping from /tmp to C:/temp. On a Windows system, users
        could enter /tmp/Mandril.pic and have it map automatically to
        C:/temp/Mandril.pic directory. This example could be used to map
        directories on a Windows file system to provide access on a
        Linux system.

perfmon

    Enable output from the performance monitor.

    For more complete control of the interactive performance monitor
    output, look at the performance command.

    USAGE
      perfmon [-s] [-o stdout|stderr|off] [-t all|ms|sec] [-e
      <event_name>] [-m <event_name>] [-f <event_id>]

    OPTIONS


        -e
            Start a new event with the given event name. The performance
            monitor will time the event. Return the event's id or -1 if
            the event could not be started (this can happen if the
            performance monitor is currently not in record mode).

        -f
            Stop timing an event. The event is specified by its id which
            is returned when running the perfmon command with the -e
            option.

        -m
            Start a new event with the given event name. The performance
            monitor will record the increase in memory usage from when
            the event was started and when it was stopped. Return the
            event's id or -1 if the event could not be started (this can
            happen if the performance monitor is currently not in record
            mode).


            NOTE
                If the -e and -m options are both specified, then the -e
                option takes precedence and the -m option is ignored.

        -s
            Display the current perfmon settings.

        -o stdout|stderr|off
            Set the performance monitor output type.

        -t all|ms|sec
            Set the timing output format.

    EXAMPLES

        Enable logging to stdout and display times in milliseconds.

      > perfmon -o stdout -t ms

        Time an hscript event.

      > 
      > # Start a new timed event.
      > set event_id=`run("perfmon -e 'My Hscript Code'")`
      > 
      > # PLACE HSCRIPT COMMANDS HERE.
      > # This is the block of code that you wish to time.
      > 
      > # Stop timing the event.
      > perfmon -f $event_id

performance

    REPLACED BY
      - hou.PerformanceMonitor.enableLiveUpdates()
      - hou.PerformanceMonitor.isLiveUpdatesEnabled()
      - hou.PerformanceMonitor.isRecording()
      - hou.PerformanceMonitor.isSamplingCookStats()
      - hou.PerformanceMonitor.isSamplingErrors()
      - hou.PerformanceMonitor.isSamplingFrameStats()
      - hou.PerformanceMonitor.isSamplingObjectDrawStats()
      - hou.PerformanceMonitor.isSamplingObjectGPUDrawStats()
      - hou.PerformanceMonitor.isSamplingRenderStats()
      - hou.PerformanceMonitor.isSamplingScriptStats()
      - hou.PerformanceMonitor.isSamplingSolveStats()
      - hou.PerformanceMonitor.isSamplingThreadStats()
      - hou.PerformanceMonitor.isSamplingViewportStats()
      - hou.PerformanceMonitor.objectView()
      - hou.PerformanceMonitor.sampleCookStats()
      - hou.PerformanceMonitor.sampleErrors()
      - hou.PerformanceMonitor.sampleFrameStats()
      - hou.PerformanceMonitor.sampleObjectDrawStats()
      - hou.PerformanceMonitor.sampleObjectGPUDrawStats()
      - hou.PerformanceMonitor.sampleRenderStats()
      - hou.PerformanceMonitor.sampleScriptStats()
      - hou.PerformanceMonitor.sampleSolveStats()
      - hou.PerformanceMonitor.sampleThreadStats()
      - hou.PerformanceMonitor.sampleViewportStats()
      - hou.PerformanceMonitor.setObjectView()
      - hou.PerformanceMonitor.setTimeFormat()
      - hou.PerformanceMonitor.startRecording()
      - hou.PerformanceMonitor.stopRecording()
      - hou.PerformanceMonitor.timeFormat()
      - hou.PerformanceMonitor

    Set various options of the performance monitor.

    Note: This only affects the performance monitor panetab in the
    Houdini UI. It does not work in hscript or hython. Use the perfmon
    command in those cases.

    USAGE
      performance [<options>] panetabname1 [panetabname2 ...]

    Without any options, the command prints the current settings for the
    specified pane tabs.

    OPTIONS


        -c on|off
            Turn on/off sampling of cook stats when recording.

        -e on|off
            Turn on/off recording.

        -f on|off
            Turn on/off the recording of frame events in the Event Log
            View.

        -g on|off
            Turn on/off sampling of object GPU draw stats when
            recording.

        -k on|off
            Turn on/off sampling of warnings and errors.

        -n on|off
            Turn on/off sampling of script stats when recording.

        -o on|off
            Turn on/off sampling of object draw stats when recording.

        -r absolute|percent
            Set the format of the stats so that times are displayed
            either in (absolute) seconds or as percentages of the Total
            Statistics time.

        -t on|off
            Turn on/off sampling of thread stats when recording.

        -u on|off
            Turn on/off Live Updates when recording.

        -v on|off
            Turn on/off sampling of viewport stats when recording.

        -w tree|list|eventlog
            Set the performance monitor to show sampled objects either
            with a tree view, or a list view, or to show the event log.

        -y on|off
            Turn on/off sampling of DOP solve stats when recording.

pilist

    Sets various options of a handle list.

    USAGE
      pilist <<@options [-d <desk_name>] <pane1> ...

    OPTIONS


        -d <desk_name>
            The desk on which to modify the pane. If no desk name is
            given the command will assume the current desk.

        -x 0|1
            handle group area on/off

        -m 0|1
            handle area on/off

        -G <float>
            Split fraction between areas.

play

    REPLACED BY
      - hou.playbar.play()
      - hou.playbar.playMode()
      - hou.playbar.reverse()
      - hou.playbar.setPlayMode()
      - hou.playbar.stop()
      - hou.playbar

    Controls playback.

    USAGE
      play [<<@options]

    This command will start playing forward unless you use the -r or -s
    options.

    OPTIONS


        -r
            Play in reverse.

        -s
            Stop playing.

        -l
            Turn looping on.

        -z
            (Zigzag) Play forward until reaching the end, then play
            backwards (ping pong).

        -1
            Play once.

        -b
            Allow Looping when playing or steping backwards.

    RELATED

      * fcur

      * fplayback

      * fps

      * frange

      * fset

      * ftimecode

      * tcur

      * tset

pomadd

    Creates a new persistent handle or group.

    USAGES
      pomadd -g [-v] <manip_group_name>
      pomadd [-e on|off] [-p on|off] [-c on|off] [-s on|off] [-m <mask>]
      [-r <r> <g> <b>] <manip_name> <type>

    If you are creating a group with the -g option, you can only specify
    the group name. If you are creating a handle, you can also specify
    the display flags (as with the pomset command).

    The <type> can be any of the values returned by the omls command.

    OPTIONS


        -g
            Create a group.



        -e on|off
            Display handle on/off

        -p on|off
            Display handle when viewing parent ops on/off

        -c on|off
            Display handle when viewing child ops on/off

        -s on|off
            Display handle when viewing sibling ops on/off



        -r <r> <g> <b>
            Sets the handle color. Each component should be a fraction
            between 0 and 1.

    EXAMPLES

      > pomadd "New Xform" xform
        Creates a handle of type xform with the name "New Xform".

      > pomadd -g "New Group"

        Creates a new handle group named "New Group".

      > set group_name = `execute("pomadd -g -v NewGroup")`

        Creates a new handle group named NewGroup and sets the variable
        group_name to the actual created name which may differ if a
        group by the same name already existed.

    RELATED

      * pomattach

      * pomclear

      * pomdetach

      * pomls

      * pomremove

      * pomscript

      * pomset

pomattach

    Attaches an operator to a handle, or a handle to a group.

    USAGES
      pomattach <manip_name> <op_name> [<op_parm>:<manip_parm>]
      pomattach -g <manip_group_name> <manip_name>

    When attaching an operator to a handle, you can also specify a list
    of operator parameters to link to the handle parameters, using the
    form <op_parm>:<manip_parm>. Use the omls command to determine what
    parameters are available for a given handle type.

    OPTIONS


        -g
            Attach a handle to a group.

    EXAMPLES

      > pomattach "New Xform" /obj/geo1 tx:tx ty:ty tz:sz
        Links operator /obj/geo1 to the "New Xform" handle, and binds
        the operator tx, ty, tz parameters to the tx, ty, sz parameters
        of the handle.

      > pomattach -g "New Group" "New Xform"

        Adds the handle "New Xform" to the "New Group" group.

    RELATED

      * pomadd

      * pomclear

      * pomdetach

      * pomls

pomclear

    Detaches all operators from a persistent handle, or clears a group.

    USAGES
      pomclear <manip_name>
      pomclear -g <manip_group_name>

    This command is equivalent to calling pomdetach on each operator or
    handle.

    OPTIONS


        -g
            Clear all handles in a group.

    RELATED

      * pomadd

      * pomattach

      * pomdetach

      * pomls

pomdetach

    Detaches an operator from a persistent handle, or a handle from a
    group.

    USAGES
      pomdetach <manip_name> <op_name>
      pomdetach -g <manip_group_name> <manip_name>

    OPTIONS


        -g
            Detach a handle from a group.

    RELATED

      * pomadd

      * pomattach

      * pomclear

      * pomls

pomls

    Lists persistent handles or handle groups.

    USAGES
      pomls [<handle_name>]
      pomls -g <manip_group_name>

    If you specify a <handle_name>, the command lists the operators
    attached to the handle.

    OPTIONS


        -g
            List the handles in a group.

    RELATED

      * pomadd

      * pomattach

      * pomclear

      * pomdetach

      * pomremove

      * pomscript

      * pomset

pomparm

    Changes settings of a handle.

    USAGE
      pomparm <manip_name> <settings>

    This command is used internally to save handle settings to the hip
    file. The values for the settings are specific to the type of handle
    and are undocumented.

    RELATED

      * pomset

pomremove

    Delete a persistent handle or handle group.

    USAGES
      pomremove <manip_name>
      pomremove -g <manip_group_name>

    OPTIONS


        -g
            Remove a handle group.

    RELATED

      * pomadd

      * pomls

pomrename

    Renames a persistent handle or handle group.

    USAGES
      pomrename <manip_name> <new_manip_name>
      pomrename -g <manip_group_name> <new_manip_group_name>

    OPTIONS


        -g
            Rename a handle group.

    RELATED

      * pomls

pomscript

    Prints the commands to create a persistent handle or group.

    USAGES
      pomscript [manip_name]
      pomscript -g [manip_group_name]

    If you don't give a handle/group name, the command will print the
    commands for every handle/group.

    OPTIONS


        -g
            Specify a handle group.

    RELATED

      * pomadd

      * pomls

pomset

    Sets the display flags of a persistent handle or group.

    USAGES
      pomset [-e on|off] [-p on|off] [-c on|off] [-s on|off] [-m <mask>]
      [-r <r> <g> <b>] manip_name
      pomset [-e on|off] -g <manip_group_name>

    OPTIONS


        -g
            Change the flags for all handles in a group.

        -e on|off
            Display handle on/off. If you are manipulating a group with
            -g, this sets the display flag for every handle in the
            group.

        -p on|off
            Display handle when viewing parent ops on/off

        -c on|off
            Display handle when viewing child ops on/off

        -s on|off
            Display handle when viewing sibling ops on/off



        -r <r> <g> <b>
            Sets the handle color. Each component should be a fraction
            between 0 and 1.

    EXAMPLES

      > pomset -e on -r 0 1 0 "New Xform"
        Turns on handle "New Xform", and sets its color to green.

      > pomset -e off -g "New Group"

        Turns off all handles in the group named "New Group".

    RELATED

      * pomadd

      * pomls

      * pomparm

preference

    Gets/sets the general preference option values.

    USAGE
      preference <preference_name> [<preference_value>]

    When called with just the preference name, the command prints the
    current value of the preference. If the preference value is also
    given, the command sets the preference to the new value.

    The list of available preference names and their acceptable values.


    tabopnamespacefilter
        Controls which namespaced and versioned operators show up in the
        TAB menu.


        all
            TAB menu shows all available versions of the operator.

        preferred_version
            TAB menu shows only the preferred (highest) operator
            version.

        preferred_op
            TAB menu shows only a single (most preferred) operator.

    EXAMPLES

      > preference tabopnamespacefilter
        Print the current value of the tabopnamespacefilter preference.

      > preference tabopnamespacefilter all

        Set the tabopnamespacefilter preference to display all available
        operator versions in the TAB menu.

prependseq

    Inserts files before the current sequence.

    USAGE
      prependseq [-u] [-f <start> <end>] <file_pattern>

    The sequence length will be extended by the number of images loaded,
    and the start time adjusted backwards by the number of frames in the
    loaded sequence (so the original sequence occupies the same frame
    range).

    <file_pattern> can use \$F or * to specify the frame number.


    NOTE
        This command is only available in MPlay.

    OPTIONS


        -u
            Load the sequence unbuffered; images will not be cached.

        -f start end
            Load the sequence using the given start and end frames.

    EXAMPLES

      > prependseq ~/shot1/frame\$F.pic
      > prependseq -u ~/shot1/frame*.pic

    RELATED

      * appendseq

      * loadseq

prompt

    Change the textport prompt string.

    USAGE
      prompt <new_prompt>

    The prompt string is expanded each time it is printed, so you can
    include variables such as the frame number, and backtick commands.

    EXAMPLES

      > prompt '$F `execute(oppwd)`:'
        Sets the prompt to the current frame number, followed by the
        current OP working directory.

propertyedit

    REPLACED BY
      - hou.ui.openTypePropertiesDialog()

    Built-in alias for otedit

    RELATED

      * otedit

python

    Execute Python statements.

    USAGES
      python <filename> [arguments]
      python -c '<statements>'
      python

    If you pass in filename and do not use the -c option, this command
    runs the Python code in the file. Any other arguments passed to this
    function will be available as arguments in the Python file,
    accessible via sys.argv.

    If the -c option is given, this command runs the Python statements
    specified in the argument. Note that the statements must be in a
    single argument, so you need to put quotes around them.

    If no arguments or options are given and this command is run from
    hscript, it will start an interactive Python shell. When you exit
    from this Python shell, it will return you to the hscript prompt.

    RELATED

      * pythonexprs

pythonpanel

    Performs actions related to the Python panel pane.

    USAGE
      pythonpanel [-n <name>] [-s on|off] [-t on|off] <pane1> ...

    OPTIONS


        -n <name>
            The name of the Python interface to load into the Python
            panel.

        -s on|off
            A boolean flag that controls whether the toolbar is expanded
            (on) or collapsed (off).

        -t on|off
            A boolean flag that controls whether the toolbar is shown
            (on) or not (off).

    EXAMPLES

      > pythonpanel -n "getting-started" -s off pane7

    RELATED

      * pane

      * neteditor

      * parmeditor

      * pilist

      * chanlist

      * takelist

      * chopview

      * helpbrowser

quit

    REPLACED BY
      - hou.exit()

    Exits Houdini.

    USAGE
      quit [-f] [<exit_status>]

    You can set an exit status code that may be useful to the process
    that started Houdini. For example, you may start Houdini from a
    shell script and branch execution after Houdini quits based on its
    exit status. By convention, a non-zero exit status often signals an
    error. The default exit status is 0.

    OPTIONS


        -f
            (Force) Exit immediately without prompting to save.

radial

    Controls radial settings.

    This command is used internally by Houdini to save the options set
    on the scene.

read

    Reads a line on user input into one or more variables.

    USAGE
      read [-g] <variable_name> [<variablename2> ..]

    If you specify more than one variable, each argument in the line is
    assigned to each variable. The last variable gets any remainder.

    OPTIONS


        -g
            Make the variables global (see the setenv command).

render

    REPLACED BY
      - hou.RopNode

    Cause an output driver (ROP node) to render.

    USAGE
      render [-V] [-f <start> <end>] [-i <inc>] [-o <filename>] [-d
      <format>] [-R <Xres> <Yres>] [-r <Xscale> <Yscale>] [-q <quality>]
      [-s] [-I] [-b] [-l] [-k] [-p [-c] [-F]] <output_name>
      [<output_name...>]

    This command renders an output driver and optionally any of its
    inputs. Inputs are recursively processed, unless -s is specified, so
    that all descendants are rendered in the proper order before the
    output node is rendered.

    The render command can be used with the -p option to show which
    frames would be rendered instead of rendering. An ordered list is
    printed out, showing the first frame(s) that would be rendered to
    the last, along with the ROPs rendering them. The output format is:

  > order ROPname frame [frames...]

    The 'order' is a number which can be used to sequence the renders
    properly. Entries with the same order can be rendered at the same
    time (in parallel).

    The ROPname is the name of the ROP to be rendered. If -F is
    specified, the full path to the ROP will be printed.

    The 'frame' entry can be printed multiple times, each representing a
    frame. If -c is specified, and more than one frame is rendered, the
    frame list will be condensed to a sequence representation, if
    possible (in the form "( start end step )").

    Upon success, this command will set the 'status' variable to 0.
    Otherwise, 'status' is set to a non-zero value.

    OPTIONS


        -V
            (Verbose) Print a message when each frame starts rendering.

        -f
            Override the frame range to render. This range will be
            trimmed to the ROP's frame range (if set). If 'Use Frame
            Range' is off, this range will be used.

        -i
            Override the frame increment to render. The ROP's frame
            increment is ignored.

        -o
            Override the file(s) or device to render to. The ROP's
            output field is ignored.

        -d
            Override the device name or image format to render to for
            ROPs that support this feature. If rendering to a flipbook,
            see the -k option.

        -k
            Render to a flipbook for ROPs that support this feature.
            This flag can be used instead of explicitly specifying the
            device to use with the -d option.

        -R
            Specifiy an exact resolution in X and Y. This will override
            the -r option.

        -r
            Scale the output resolution in X and Y. Good for producing
            faster renders or proxy images.

        -q
            Sets the image quality for renderers. Values between 0 (low
            quality) and 2 (normal quality) are used. This can be used
            to speed up rendering.

        -s
            Only render this ROP; do not render input ROPs. This option
            is only valid when rendering ROPs in a dependency network.

        -I
            Render ROPs frame by frame instead of ROP by ROP. If a
            sequence is rendered, all ROPs will render the first frame,
            then the second, etc. If -I is not specified, each ROP will
            render its entire sequence before proceeding to the next
            ROP. This option is only valid when rendering ROPs in a
            dependency network.

        -b
            Ignore bypass flags; Render any bypassed ROPs.

        -l
            Ignore lock flags; Render any locked ROPs and their
            children.

        -p
            Print out what frames would be rendered. Does not render
            anything. The output has the following format:

          > <<id>> [ <<dependencies>> ] <<node>> <<frames>>.

            Where...

          * <id> is a unique id for the line.

          * <dependencies> is a list of lines (identified by their id)
            that must be rendered before this line.

          * <node> is the name of the node to be rendered. Can be the
            full path to the node with the -F flag.

          * <frames> is the list of frames to be rendered. This list can
            depend on the -c and -I flags.

        -c
            Condense frame lists into a sequence description ("( start
            end step )") if possible. Only valid with the -p flag.

        -C
            Consolidate frame lists from work items that are the same
            ROP and have the same dependencies into one work item, where
            possible. This is an optimization step for workstation
            renders. Farm renders should not use this, as they need the
            extra parallism gained from separate work items. Only valid
            with the -p flag; actual renders are always consolidated.

        -F
            Print the full path to the ROP when printing a render list.
            Only valid with the -p flag.

        -a
            Outputs Alfred style progress when used in conjunction with
            the -V option. For example:

          > render -Va mantra1
          > render -V -a dop1

rexport

    Edits exprot variables for a network render.

    USAGES
      rexport [-h <hostname>] <driver_pattern> [<name> = <value>]
      rexport -u [-h <hostname>] <driver_pattern> <name>
      rexport -c <driver_pattern>
      rexport -g <driver_pattern>

    This command is allows you to edit the export variables for a
    network render output driver. These variables are exported to the
    remote machine before the remote command begins.

    The standard usage sets <name> to <value> for drivers matching
    <driver_pattern>.

    OPTIONS


        -h
            Define/undefine the variable only for a specific host.

        -u
            Undefine a variable.

        -c
            Clear all variables.

        -g
            Generate a command script containing all the variables
            information. This is useful for generating a configuration
            file for loading into other drivers.

    EXAMPLES

      > rexport net HFS /hfs
        Sets the HFS default export value

      > rexport -h gonzo net HFS /nfs/host/hfs

        Overrides the variable definition for the remote host named
        gonzo

      > rexport -g network1 > % $HOME/houdini<<version>>/netconfig.setup

rkill

    Stop or pause/unpause a render.

    USAGE
      rkill [-s | -r] <process_pattern>

    The command terminates the process unless you use the -s or -r
    options.

    The command affects any background render matching the pattern.

    OPTIONS


        -s
            Suspend

        -r
            Resume

    EXAMPLES

      > rkill 8329
        Kills process 8329

      > rkill *

        Kills all render processes

      > rkill -s *

        Suspends all render processes

      > rkill -r *

        Restarts all render processes

    RELATED

      * rps

ropview

    Sets various options of an Outputs viewer pane.

    USAGE
      ropview [-c 0|1] [-d <desktop_name>] <pane_name>

    OPTIONS


        -c 0|1
            Toggles the 'Clear Completed Jobs' option.

rps

    Lists background render processes.

    USAGE
      rps

    The command lists the PID of the process, the host which the command
    is running on, the command being run, and the frame being rendered.
    Suspended processes are marked.

    RELATED

      * rkill

seqls

    Lists the sequences currently loaded in Mplay.

    USAGE
      seqls [-f]

    OPTIONS

        -f:

    Lists the file pattern of each image sequence loaded into MPlay. If
    -f is used, the full path and file pattern is printed instead.

    The file patterns are printed to the textport, one per line.


    NOTE
        This command is only available in MPlay.

set

    Sets a local variable.

    USAGES
      set [-g] <name> = <value>
      set -u <name>
      set -p <name> = <value>
      set [-s]

    Without any arguments, the command prints a list of current local
    variables (see the -s option).

    OPTIONS


        -g
            Make the variable global.

        -u
            Unset the variable.

        -p
            Set the variable in the calling (parent) script. This option
            lets you return values from within sourced scripts, by
            directly setting a variable in the caller.

        -s
            Without any other arguments, prints the current variables in
            the form of commands.

    EXAMPLES

      > set num = 1234
      > echo $num
        Prints 1234.

      > set nodes = `run("ls")`

        Sets $nodes to the result of the ls command.

    RELATED

      * setenv

setcomp

    Set the color components to display.

    USAGE
      setcomp [-r] [-g] [-b] [-a]


    NOTE
        This command is only available in MPlay.

    OPTIONS


        -r
            Red

        -r
            Green

        -r
            Blue

        -r
            Alpha

    RELATED

      * setplane

setenv

    Sets a global variable.

    USAGES
      setenv [-l] <name> = <value>
      setenv -u <name>
      setenv [-s]

    Without any arguments, the command prints a list of current global
    variables (see the -s option).

    OPTIONS


        -l
            Make the variable local.

        -u
            Unset the variable.

        -s
            Without any other arguments, prints the current variables in
            the form of commands.

    RELATED

      * set

setplane

    Sets the current plane.

    USAGE
      setplane [-i <array_index>] <plane_name>


    NOTE
        This command is only available in MPlay.

    OPTIONS


        -i <array_index>
            The index of the plane, for plane arrays (not normally
            used).

    RELATED

      * setcomp

shelfdock

    REPLACED BY
      - hou.ShelfDock.show()

    Adds shelves to and removes shelves from the shelf area (dock).

    USAGE
      shelfdock [-d <desktop_name>] [-o <on_off>] [-l
      icon|text|icon_and_text] [-G split] add|remove [<shelf_name> ...]

    This command is intended for scripted customization of the dock
    contents.

    OPTIONS


        -d <string>
            Desktop whose shelf dock to customize. If it is blank it
            will default to the current desktop.

        -o <on_off>
            If <on_off> is 1, the operation dock is open. Otherwise the
            shelf dock is collapsed.

        -l icon|text|icon_and_text
            Sets the look of the dock. It determines whether the tools
            appear as icons, text labels, or both.

        -G <float>
            The horizontal split fraction of the shelf sets in the dock.
            If there are more than two shelf sets, the fraction list may
            be given in double quotes, each fraction denoting the
            proportion of the remaining space.

    EXAMPLES

      > shelfdock -d Build add shelf_1 shelf_2
        Adds shelf_1 and shelf_2 to the contents of a shelf dock that
        belongs to the Build desktop.

      > shelfdock remove shelf_2

        Removes a shelf named shelf_2 from the dock in the current desk.

      > shelfdock -l icon

        Customizes the dock to display its tools as icons.

shift

    Shifts the contents of the command line argument variables.

    USAGE
      shift

    This command shifts the contents of the special variables containing
    the script arguments "to the left", so the value of $arg0 is thrown
    away, $arg1 becomes $arg0, $arg2 becomes $arg1, and so on.

    This lets you process arguments in a loop, by examining $arg0, then
    using shift.

    EXAMPLES

      > while ($arg0 != "") echo Next argument is $arg0 shift end
      > When executing a script file (script.cmd), with the command line "script.cmd a b c d", we have $argc = 5, $arg0 = script.cmd, $arg1 = a, $arg2 = b, $arg3 = c, $arg4 = d. After the shift command, $argc = 4, $arg0 = a, $arg1 = b, $arg2 = c, $arg3 = d.

shopconvert

    Converts RenderMan shaders to native.

    USAGE
      shopconvert

    The object's SHOP fields will be filled out to point to the correct
    SHOP and the existing RenderMan parameters will be cleared out.
    Generic Surface, Displacement, Light and Fog shaders will be used.

shoppromote

    Automatically promotes all parameters from a material's contained
    shaders onto the material.

    USAGE
      shoppromote [-c [-f]] <material_path>

    Without options, this command takes all the parameters from the
    shaders contained in a material and copies them onto the material
    itself. You can then prune and organize the parameters as desired.
    This is usually faster than promoting parameters from the shaders
    one-by-one.

    This is the same as right-clicking a Material node and choosing
    Promote Material Parameters.

    OPTIONS


        -c
            Clear automatically promoted parameters.

        -f
            Force clearing of all user-added parameters on the material.
            (used with -c).

            When you use shoppromote or the Promote Material Parameters
            menu item, Houdini marks the parameters and you can easily
            remove them with -c. If you've manually promoted parameters,
            they won't have the special mark and you'll need to use -f
            to clear them.


            WARNING
                This will remove _all_ user-added parameters, whether
                they were promoted from shaders or not.

shopthumb

    Generates a thumbnail image (shader ball) for a material.

    USAGE
      shopthumb [-s <size>] [-b] <path_to_material> <output_image>

    You must specify both the path to the material node and the output
    filename. Houdini will guess the output image format from the
    filename extension.

    OPTIONS


        -s
            Size (width and height) of the image to generate.

        -b
            Render the thumbnail in the background. Command returns
            immediately.

    EXAMPLES

      > shopthumb -s 256 /shop/vopmaterial1 $HOME/material1.png
        Renders a 256 by 256 pixel thumbnail of /shop/vopmaterial1 to
        the file $HOME/material1.png.

      > shopthumb material1 ip

        Renders a default sized thumbnail of /shop/vopmaterial1 to
        MPlay.

shopvisible

    Show or hide shaders based on the renderer.

    USAGES
      shopvisible
      shopvisible [+|-]<client>

    With no arguments, the command displays the list of available
    clients.

    When you specify a client, you can prefix the name with a + to turn
    it on, or a - to turn it off. If you don't specify a + or -, the
    current state of the client is toggled.

    Turning clients off hides the operators in the toolbars, simplifying
    the interface. This command does _not_ remove the operators. So any
    existing operators will remain, opadd will still add operators, etc.


    NOTE
        For graphical applications, this command will cause all dialog
        scripts for all SHOPs to load and may cause a significant
        performance hit if many SHOPs are loaded over a busy network.

    EXAMPLES

      > shopvisible -RIB +VMantra
        Disable the RenderMan renderer button in the toolbars, and
        enable VMantra buttons.

sopcache

    Manipulates the internal surface node cache.

    USAGE
      sopcache [-q|-v] [-c] [-l] [-L] [-s] [-m <memory>] [-M
      never|always] [-U never|flag|always] [-W <name> never|always
      <depth>] [-w <name>]

    OPTIONS


        -q
            Quiet mode. The command will be performed with no output.

        -v
            Verbose mode. Extra information will be output.

        -c
            Clear the SOP cache. Every loaded SOP will attempt to unload
            itself. They may not unload if the SOP is currently in use
            (e.g. displayed).

        -l
            Print the cache status. This displays the current estimated
            memory use by SOPs and the number of SOPs that have active
            data.

        -L
            Print the full path of all active SOPs. If verbose mode is
            also set with -v, the memory size of each SOP will also be
            output. The SOPs will then be sorted by memory usage.

        -s
            Print the current settings.

        -m <memory>
            Set the maximum memory limit (used by -M)

        -M never|always
            Unload cache on reaching the memory limit (-m) (never =
            ignore memory limit, always = unload when limit reached).

        -U never|flag|always
            Unload surface operators (never = do not unload surface
            operators, flag = unload if operator's unload flag is set,
            always = unload all operators regardless of unload flag).

        -W <name> never|always <depth>
            Sets the cache behavior for nodes after <depth> number of
            <name> checkpoints in the cache list.

            When SOPs are accessed their timestamp is updated and they
            are moved to the front of the cache list.

            You can insert "checkpoint" markers into the cache list to
            mark recurring events using the -w option (for example, you
            could insert a newframe checkpoint at each new frame using
            sopcache -w newframe).

            Before inserting checkpoints, you would run, for example,
            sopcache -W newframe always 4 to specify the behavior of
            newframe checkpoints. In this case, Houdini would unload any
            nodes following the fourth newframe checkpoint in the cache
            list. In other words, any nodes that haven't been accessed
            in the last four frames.

        -w <name>
            Inserts a "checkpoint" of the given name in the cache list.
            See the -W option above for

    RELATED

      * texcache

      * geocache

      * objcache

      * opunload

sopcreateedit

    Create an Edit SOP from the differences between two SOPs.

    USAGE
      sopcreateedit [ -d ] [ -o ] <name> <sop1> <sop2>

    This command will create a Edit SOP describing an edit which will
    transform the geometry of <sop1> to that of <sop2>.


    NOTE
        The number of points in <sop1> and <sop2> must be equal.

    OPTIONS


        -d
            If set, sop1 must be a Deform SOP. A new Edit SOP will be
            created that can replace sop2 if inserted before the Deform
            SOP.

          > before: sop1 -> deform -> sop2
          > after:  sop1 -> new edit -> deform

        -o
            If set, the new Edit SOP will apply deltas relative to local
            coordinate frames specified by the "orient" attribute.

source

    Executes the script commands in a file.

    USAGE
      source [-q] [-v] <filename>

    OPTIONS


        -q
            (Quiet) Do not print warnings about missing files.

        -v
            (Verbose) Print each command as it is executed.

    RELATED

      * cmdread

stampdirty

    Dirty nodes dependent on a stamping variable..

    USAGE
      stampdirty [-R] [-v] <operator_pattern> <token1> [<token2> ...]
      #

    This command dirties any nodes dependent on the specified stamping
    variables from the specified scope so that they will recook the next
    time their cooked data is requested.

    OPTIONS


        -R
            Recurse up the scope hierarchy.

        -v
            (Verbose) Print a list of the nodes dirtied.

system

    Starts a host system command.

    USAGE
      system [-s shell] [-q] <command>

    Houdini runs the commands using the value of the $SHELL variable,
    using the command $SHELL -c <command>. If the $SHELL variable is
    either csh or zsh, Houdini will also use the -f option (preventing
    sourcing of the .cshrc/.zshrc files).

    Houdini passes any global HScript variables to the external process
    as environment variables, and sets the status variable to the exit
    code of the command.

    If the HOUDINI11_COMPATIBILITY environment variable is set, the
    $SHELL variable is ignored and the shell defaults to csh. The -s
    option can be used to override the shell even when
    HOUDINI11_COMPATIBILITY is set.

    TIPS

      * Houdini includes dedicated HScript commands to call typical host
        system commands, such as uls to list the contents of a
        directory, urm to remove a file, and upwd to print the current
        directory.

            To make your code portable to non-UNIX systems such as
            Windows, use these HScript commands instead of explicitly
            calling the equivalent UNIX utilities (ls, rm, pwd, etc.).

      * To redirect in the external shell (such as >&), enclose the
        argument in single quotes to prevent the Houdini command
        interpreter from acting on the redirection before the external
        shell can see it.

          > system myscript.pl '>output.txt'
      * In most cases, the -q option should be used to preserve quoted
        arguments. However, for backward compatibility with existing
        scripts, the option is disabled by default. The -q option
        simplifies quoting issues.

          > # This command will fail since hscript strips the quotation marks from the
          > # argument "Hello world"
          > system hwatermark -x 10 10 -m "Hello world" foo.pic foo.pic font.ttf 12
          > # Adding the -q option preserves quotes and passes "Hello world" as a
          > # single argument to hwatermark.
          > system -q hwatermark -x 10 10 -m "Hello world" foo.pic foo.pic font.ttf 12

    OPTIONS


        -q
            Preserve quotation marks when passing arguments to the
            shell.

        -s <string>
            Override the value of the $SHELL variable.

    RELATED

      * java

      * ucd

      * upwd

      * uls

      * umkdir

      * urm

takeadd

    REPLACED BY
      - hou.Take.addChildTake()
      - hou.Take.insertTakeAbove()

    Creates a new take.

    USAGE
      takeadd [-i] [-v] [-c] [-p <parent_take>] [<name>]

    OPTIONS


        -i
            Insert the take between the parent and its child takes
            (becomes the new parent of the child takes).

        -v
            Verbose: print the name of the take created.

        -c
            Change to the new take after it is created.

        -p <parent_take>
            The parent of the new take. If you do not specify a parent,
            the new take becomes a child of the current take.

        <name>
            Short name for the take. This name cannot contain spaces. If
            you do not specify a name, Houdini will create a generic
            name from the default basename and a number (for example,
            "take5"). You can rename a take, or set the default
            basename, with the takename command.

    EXAMPLES

      > takeadd -c -i -p hip
        Inserts a take between the hip take and all its children, and
        automatically switch to that take.

    RELATED

      * takename

      * takerm

takeautomode

    Sets the take auto-include mode.

    USAGE
      takeautomode on|off

    The auto-include mode allows the setting of parameters and flags
    without having to first manually include them into the active take.
    If no options are given the current state is returned.

    RELATED

      * takeinclude

takeinclude

    REPLACED BY
      - hou.Take.addNodeDisplayFlag()
      - hou.Take.removeNodeDisplayFlag()
      - hou.Take.addNodeBypassFlag()
      - hou.Take.removeNodeBypassFlag()
      - hou.Take.addNodeRenderFlag()
      - hou.Take.removeNodeRenderFlag()
      - hou.Take.addParmTuple()
      - hou.Take.removeParmTuple()
      - hou.Take.addParmTuplesFromTake()
      - hou.Take.addParmTuplesFromNode()
      - hou.Take.removeParmTuplesFromNode()

    Includes parameters in or removes parameters from the current take.

    USAGE
      takeinclude [-u] [-d] [-r] [-b] [-q] <node> [<parm1> ...]

    This command has similar usage to the opparm command. You can use
    wildcards in the parameter list.


    TIP
        You can specify the current take with the takeset command.

    OPTIONS


        -u
            (Undefine) removes the listed parameters from the take
            rather than including them.

        -d
            Include/exclude the display flag in the take.

        -r
            Include/exclude the render flag in the take.

        -b
            Include/exclude the bypass flag in the take.

        -q
            (Quiet) do not print information.

    EXAMPLES

      > takeinclude /obj/geo1 t r s
        Include the t, r and s parameters for geo1 in the current take.

      > takeinclude /obj/geo1 *

        Include all parameters from geo1 in the current take.

      > takeinclude -r /obj/geo1

        Include the render flag of geo1 in the current take.

      > takeinclude -u -d /obj/geo1

        Remove the display flag for geo1 from the current take.

    RELATED

      * opparm

      * takeset

takelist

    Sets various options of the take list pane.

    USAGE
      takelist [-w 0|1] [-G <float>] [-d <desktop_name>] <pane1>
      [<pane2> ...]

    OPTIONS


        -w 0|1
            If 1, displays the take contents in a sub-pane.

        -G <float>
            A fraction between 0 and 1, controls the size of the take
            list when it is split with the take contents sub-pane.
            Values closer to 1 make the take list bigger and the
            contents tree smaller.

    EXAMPLES

      > takelist -w 1 -G .4 panetab1
        Shows the take contents tree sub-pane in panetab1, and sets the
        size of the take list to 40% of the pane.

takeload

    REPLACED BY
      - hou.Take.loadChildTakeFromFile()

    Loads take information from a file saved with the takesave command.

    USAGE
      takeload [-p <parent>] <filename>


    NOTE
        Houdini may rename the takes if they conflict with existing
        siblings.

    OPTIONS


        -p <parent_take>
            The parent for loaded takes. If you do not specify a parent,
            the loaded takes become children of the current take.

        <filename>
            The file to load takes from.

    RELATED

      * takesave

takels

    REPLACED BY
      - hou.Take.parmTuples()
      - hou.Take.hasParmTuple()
      - hou.Take.children()
      - hou.takes.takes()

    Prints the names of existing takes.

    USAGE
      takels [-l] [-m] [-i] [-p parent] [-q] [<take_pattern>]

    By default, the command prints the names of all takes. If you
    specify a <take_pattern>, the command lists the takes whose names
    match the pattern.

    OPTIONS


        -l
            List the contents of the given take(s).

        -m
            List the memory usage of the given take(s).

        -i
            Do not indent the listing.

        -p
            Only list takes which have the given parent.

        -q
            If no takes match the pattern do not print anything rather
            than printing a warning message.

takemerge

    REPLACED BY
      - hou.Take.addParmTuplesFromTake()

    Merges included parameters from one or more source takes into a
    destination take.

    USAGE
      takemerge [-f] <destination_take> <source_take1> [<source_take2>
      ...]


    NOTE
        If you specify multiple sources, they are merged in the order
        they occur on the command line.

    OPTIONS


        -f
            Force: if a source take has the same included parameter as
            the destination, the source will overwrite the destination.
            If you do not specify this flag, source files will _not_
            overwrite data in the destination.

    RELATED

      * takemove

takemove

    REPLACED BY
      - hou.Take.moveUnderTake()

    Moves a take under a new parent.

    USAGE
      takemove <take> <parent_take>

    This command Moves <take> and all its children under <parent_take>.

takename

    REPLACED BY
      - hou.Take.setName()
      - hou.takes.setDefaultTakeName()

    Rename a take, set the label of a take, or change the default
    basename for new takes.

    USAGES
      takename <take> <new_name>
      takename -g <default_name>

    OPTIONS


        -g <default_name>
            Set the default basename for new takes.

    EXAMPLES

      > takename take1 take2
      > takename -g diffuse_take

takerm

    REPLACED BY
      - hou.Take.destroy()

    Removes one or more takes.

    USAGE
      takerm [-R] <take1> <take2> ...

    OPTIONS


        -R
            (Recursive) Deletes the take and all its children. If you do
            not specify this flag, the children of the deleted take
            become children of the take's parent.

takesave

    REPLACED BY
      - hou.Take.saveToFile()

    Saves take information to a file, or prints it to the textport.

    USAGE
      takesave [-o <filename>] [-R] <take_name>

    OPTIONS


        -o <filename>
            The file to save the take information in. If you do not
            specify this option, the take information is printed to the
            textport.

        -R
            (Recursive) Save the take and all its children.

    RELATED

      * takeload

      * takescript

takescript

    Prints the commands necessary to recreate a take.

    USAGE
      takescript <take_pattern>

    For the takes specified by <take_pattern>, this will echo the
    commands necessary to re-create the take.

    RELATED

      * takesave

takeset

    REPLACED BY
      - hou.takes.setCurrentTake()

    Switches to a different take.

    USAGE
      takeset <take>


    TIP
        The global variable $ACTIVETAKE contains the name of the current
        take.

    RELATED

      * takeadd

tcur

    REPLACED BY
      - hou.setFrame()
      - hou.setTime()
      - hou.time()

    Gets or sets the current time.

    USAGE
      tcur [<time>]

    If you specify a time, the playhead moves to that time. Otherwise,
    the current time is printed.

    RELATED

      * fcur

      * fplayback

      * fps

      * frange

      * fset

      * ftimecode

      * tset

test_access

    On Windows, tests the permission of a file path.

    USAGE
      test_access <mode> <path>

    OPTIONS


        <mode>
            A number that indicates the type of access you are
            interested in. Individual values can be added together to
            test multiple criteria at once.

            1 : Executable

            2 : Writable

            4 : Readable

        <path>
            The file or directory path you want to test for
            accessibility.

texcache

    Manipulates the internal texture cache.

    USAGE
      texcache [-v] [-s] [-l] [-c] [-n] [-a on|off] [-r <xres> <yres>]
      [-m <nimages>] [-M <megabytes>] [ -f 0|1 texture ]

    OPTIONS


        -s
            Print the current settings.

        -l
            Print the contents of the texture cache.

        -v
            (Verbose) print extra information.

        -c
            Clear the cache.

            Note that to reset the viewport textures, glcache should be
            used.

        -n
            Clear the cache only if newer files exist on disk.

        -a on|off
            Auto-flushing of maps on/off. Leaving maps in the cache (-a
            off) improves performance at the cost of extra memory.

        -r <xres> <yres>
            Maximum resolution of images to store in the cache. Textures
            with resolution higher than this will not be cached. This
            does not include maps stored in COPs.

        -m <nimages>
            Maximum number of images to store in the cache.

        -M <megabytes>
            Maximum megabytes of data to store in the cache.

        -f 0|1 file
            Turn off|on the monitoring of given texture(s). If there is
            any change to the file(s) on the disk, the texture(s) will
            be automatically reloaded. This option will not be saved.
            Only available on Linux

    EXAMPLES

      > hscript-> texcache -r 512 512 -M 32 -a on
        Sets the maximum resolution of images in the cache to 512x512
        pixels, the maximum memory to 32 Mb and turns auto-flushing on.

    RELATED

      * geocache

      * objcache

      * opupdate

      * sopcache

      * glcache

time

    Print the time taken to execute a command.

    USAGE
      time <command>

    Prints the time taken to execute <command>. On UNIX, the command
    reports "u" (CPU usage) "s" (system usage) and "r" (real time). On
    Windows, the command only prints real time.

    To time a complicated set of commands, write it them to a .cmd file
    and use "time source script.cmd".

timeslice

    Sets timeslice options for timesliced channel operators.

    USAGE
      timeslice [-m <slice_size>] [-d on|off] [-c smart|always]

    OPTIONS


        -m <slice_size>
            Limit the maximum size (in frames) of a timeslice that can
            be processed in one cook.

        -d on|off
            If on, all newly created CHOPs that have timeslice
            capability will be created with their timeslice flag on.

        -c smart|always
            Enable smart or constant timeslice cooking. When set to
            smart, some timeslice CHOPs will cook only when needed,
            instead being completely time dependent.

tmgadd

    Creates time groups.

    USAGES
      tmgadd -t <time> <group_name> [<group_name2> ...]
      tmgadd -f <frame> <group_name> [<group_name2> ...]

    OPTIONS


        -t <time>
            Make <time> the first member of the new group(s).

        -f <frame>
            Make <frame> the first member of the new group(s).

tmgls

    Lists time groups.

    USAGE
      tmgls [-l] [-k] [<pattern> ...]

    If you specify one or more patterns, the command only lists groups
    that match a pattern.

    OPTIONS


        -l
            List the contents of the time group as well.

        -k
            Only list the time marks belonging to the time group.

tmgname

    Renames a time group.

    USAGE
      tmgname <old_name> <new_name>

tmgop

    Set, add to, or delete the contents of a time group.

    USAGES
      tmgop -t <time_from> <time_to> <group_name> set|add|remove
      <channel_patterns>
      tmgop -f <frame_from> <frame_to> <group_name> set|add|remove
      <channel_patterns>

    This command controls the contents of time groups. YOu specify a
    time or frame range, the <group_name> of the time group you want to
    modify, an operation (set, add, remove), and one or more patterns
    specifying which channels to use.

    OPTIONS


        -t <time_from> <time_to>
            Time range to set/add/remove in the group.

        -f <frame_from> <frame_to>
            Frame range to set/add/remove in the group.

        set|add|remove
            Set the contents of the group, add to the contents of the
            group, or remove from the contents of the group.

tmgrm

    Deletes a time group.

    USAGE
      tmgrm <group_pattern> [<group_pattern2> ...]

    You can specify one or more patterns. Time groups matching a pattern
    are deleted.

tmgshift

    Shift a time group by a length of time or number of frames.

    USAGES
      tmgshift [-a] [-g] [-r] -f <numframes> <group_name>
      tmgshift [-a] [-g] [-r] -t <time> <group_name>

    OPTIONS


        -a
            Absolute positioning. Instead of shifting the group by a
            number of frames or length of time, shifts the group to a
            frame or time.

        -g
            Shift the time group but not its members.

        -r
            Only shift if within keyframe boundaries.

        -f <numframes>
            Number of frames to shift by. If you use the -a option, this
            is the frame to shift the group to.

        -t <time>
            Length of time to shift by. If you use the -a option, this
            is the time to shift the group to.

toolbar

    Creates, edits, or removes a toolbar.

    USAGES
      toolbar -t <type> -n <name> -o set|add|remove [-s
      <save_directory>] <operators> ...
      toolbar -r [-a] -t <type> -n <name>

    OPTIONS


        -t <type>
            Toolbar type.


            sop
                surface operators

            obj
                objects

            pop
                particle operators

            mat
                shaders

            top
                texture operators

            cop
                composite operators

            chop
                channel operators

            out
                output drivers

        -n <name>
            The name of the toolbar to edit.

        -o set|add|remove

            set
                Set the contents of the toolbar to <operators>

            add
                Add <operators> to the toolbar.

            remove
                Remove <operators> from the toolbar.

        -s <save_directory>
            The directory in which to save the toolbar. If not given the
            toolbar is saved somewhere in the path.

        -r
            Remove the toolbar specified with the -t and -n options.

        -a
            Remove all toolbars of the given type/name in the search
            path. Otherwise, toolbar in use in the current session will
            be removed.

treechooser

    REPLACED BY
      - hou.ui.selectFromTree()

    Presents a graphical interface to the user to choose from a list of
    options.

    USAGE

         1. treechooser [-r] [-s <selected>] [-t <title>] [-h <help>]
            choice1 choice2 ...

    The treechooser command presents the list of strings using a tree-
    style graphical interface. The choices are parsed as if they were
    path names, with a slash separating the path components. The options
    are then organized into a tree for selection.

    Only choices explicitly specified can be selected.

    OPTIONS


        -b
            Allow selecting of branches.

            If this option is not present, only the exact paths
            specified in the arguments will be chosen. With this option,
            selecting a branch will choose all the children under the
            branch.

        -c
            Allow selects children with their ancestors.

        -r
            Radio (only one choice can be selected).

            When this option is not present, the command will return
            multiple choices as a space-separated list.

        -t
            Title for choice window.

        -h
            Help string to present to the user (only in non-graphical
            mode)

        -s
            Specify initial selection of nodes in the tree. The option
            takes a space separated list of choices.

    EXAMPLES

      > treechooser -t "Pick Some Objects" \
      >     -s "/obj/geo1 /obj/subnet1/geo1" \
      >     "/obj/geo1" \
      >     "/obj/geo2" \
      >     "/obj/subnet1/geo1" \
      >     "/obj/subnet1/geo2" \
      >     "/obj/subnet1/geo3" \
        Opens a graphical interface for a tree with an initial selection
        of /obj/geo1 and /obj/subnet1/geo1. The command will print out
        "/obj/geo1 /obj/subnet1/geo1" if the accepts the initial
        selection. The user will not be able to select /obj or
        /obj/subnet1 since they weren't specified explicitly on the
        command line.

      > treechooser -t "Pick Some Objects" \
      >     "/obj" \
      >     "/obj/geo1" \
      >     "/obj/geo2" \
      >     "/obj/subnet1" \
      >     "/obj/subnet1/geo1" \
      >     "/obj/subnet1/geo2" \
      >     "/obj/subnet1/geo3" \

        Opens the tree interface with no initial selection. This usage
        will allow the user to select /obj or /obj/subnet1.

treecontrol

    Sets various options of the tree contrl.

    USAGE
      treecontrol options [-d <desktop_name>] <pane1> ...

    You must specify a pane name. If you don't specify a desk name the
    command assumes the current desk.

    OPTIONS


        -d <desktop_name>
            Desktops to operate on.

        -a 0|1
            Sets the Auto Dive option

        -i 0|1
            Displays or hides the icons.

        -f 0|1
            Minimizes the filter list.

        -O 0|1
            Filters objects.

        -S 0|1
            Filters SOPs.

        -D 0|1
            Filters DOPs

        -P 0|1
            Filters POPs

        -H 0|1
            Filters SHOPs

        -V 0|1
            Filters VOPs

        -C 0|1
            Filters CHOPs

        -I 0|1
            Filters COPs

        -R 0|1
            Filters COPs

tset

    REPLACED BY
      - hou.playbar.setFrameRange()
      - hou.playbar.setTimeRange()
      - hou.playbar.timeRange()

    Gets/sets the global animation range.

    USAGE
      tset [<start_time> <end_time>]

    If no time range is specified, the current time range is printed
    out. Otherwise, the time range is set to the given inclusive range.
    Values are specified in seconds.

    EXAMPLES

      > tset `(10-1)/$FPS` `87/$FPS`
        This sets the global animation range to be from frame 10 to
        frame 87. In the <start_time> value, we need to subtract 1 first
        before dividing by $FPS (the frames per second) because frame 1
        is at time 0. For the <end_time> value, we do not subtract by 1
        in order to obtain an inclusive time range.

    RELATED

      * fcur

      * fplayback

      * fps

      * frange

      * fset

      * ftimecode

      * tcur

      * tset

ucd

    Change the UNIX working directory.

    USAGE
      ucd <unix_path>

    RELATED

      * unix

      * upwd

      * uls

      * umkdir

      * urm

uls

    Returns a list of files and directories in the UNIX working
    directory. This command is non-recursive.

    USAGE
      uls [-d | -f] [-p <search_path>] [<pattern>]

    OPTIONS


        -d
            List only directories.

        -f
            List only files.

        -p <search_path>
            List files and directories under <search_path> instead of
            the current working directory.

        <pattern>
            List files and directories that match <pattern>.

    RELATED

      * unix

      * ucd

      * upwd

      * umkdir

      * urm

umkdir

    Creates a new directory, <dir_name>, in the file system.

    USAGE
      umkdir [-p] <dir_name>

    OPTIONS


        -p
            Make parent directories as necessary, with no failure if the

        specified directory already exists.

    RELATED

      * unix

      * ucd

      * upwd

      * uls

      * urm

undoctrl

    REPLACED BY
      - hou.undos

    Turns undo on or off, or clears undo memory.

    USAGES
      undoctrl on|off
      undoctrl [-s] [-c]

    Turning off the undo mechanism can cause scripts to execute with
    greater speed, but the changes made by the script will not be undo-
    able.

    Please use with caution, remembering to turn undo back on at the end
    of the script. Running this command by itself in the textport will
    cause the undo stack to be corrupted.

    If you don't specify any options, the command prints the current
    state.

    OPTIONS


        -s
            Print the memory usage of the undo stack.

        -c
            Clear the undo stack, freeing the memory used.

unitlength

    Controls the Houdini Unit Length option.

    USAGE
      unitlength [<new_unit_length>]

    If no parameters are specified to this command, it outputs the
    current Unit Length value. This is the same value that appears in
    the Hip File Options page of the Houdini Preferences dialog. A
    number can also be supplied as a parameter which changes the Unit
    Length value. The number is interpreted as a length in meters.

unitmass

    Controls the Houdini Unit Mass option.

    USAGE
      unitmass [<new_unit_mass>]

    If no parameters are specified to this command, it outputs the
    current Unit Mass value. This is the same value that appears in the
    Hip File Options page of the Houdini Preferences dialog. A number
    can also be supplied as a parameter which changes the Unit Mass
    value. The number is interpreted as a mass in kilograms.

unix

    Starts a host system command.

    USAGE
      unix [-s shell] [-q] <command>


    NOTE
        Despite its name, the unix command works on non-UNIX operating
        systems. This is an alias to the system command.

    Houdini runs the commands using the value of the $SHELL variable,
    using the command $SHELL -c <command>. If the $SHELL variable is
    either csh or zsh, Houdini will also use the -f option (preventing
    sourcing of the .cshrc/.zshrc files).

    Houdini passes any global HScript variables to the external process
    as environment variables, and sets the status variable to the exit
    code of the command.

    If the HOUDINI11_COMPATIBILITY environment variable is set, the
    $SHELL variable is ignored and the shell defaults to csh. The -s
    option can be used to override the shell even when
    HOUDINI11_COMPATIBILITY is set.

    TIPS

      * Houdini includes dedicated HScript commands to call typical host
        system commands, such as uls to list the contents of a
        directory, urm to remove a file, and upwd to print the current
        directory.

            To make your code portable to non-UNIX systems such as
            Windows, use these HScript commands instead of explicitly
            calling the equivalent UNIX utility (ls, rm, pwd, etc.).

      * To redirect in the external shell (such as >&), enclose the
        argument in single quotes to prevent the Houdini command
        interpreter from acting on the redirection before the external
        shell can see it.

          > unix myscript.pl '>output.txt'
      * In most cases, the -q option should be used to preserve quoted
        arguments. However, for backward compatibility with existing
        scripts, the option is disabled by default. The -q option
        simplifies quoting issues.

          > # This command will fail since hscript strips the quotation marks from the
          > # argument "Hello world"
          > unix hwatermark -x 10 10 -m "Hello world" foo.pic foo.pic font.ttf 12
          > # Adding the -q option preserves quotes and passes "Hello world" as a
          > # single argument to hwatermark.
          > unix -q hwatermark -x 10 10 -m "Hello world" foo.pic foo.pic font.ttf 12

    OPTIONS


        -q
            Preserve quotation marks when passing arguments to the
            shell.

        -s <string>
            Override the value of the $SHELL variable.

    RELATED

      * system

      * java

      * ucd

      * upwd

      * uls

      * umkdir

      * urm

updateui

    Waits for Houdini's UI to update.

    USAGE
      updateui

    This command tells Houdini to process any events that have been
    queuing up. These events include externally-generated ones like
    mouse clicks and keypresses but they also include internally-
    generated ones that may have been queued as a result of executing
    other commands.

    This command is not available in hscript.

upwd

    Prints the Unix working directory.

    USAGE
      upwd

    RELATED

      * unix

      * ucd

      * uls

      * umkdir

      * urm

urm

    Unlinks <file_name>, in the file system. This method cannot unlink
    directories.

    USAGE
      urm <file_name>

    RELATED

      * unix

      * ucd

      * upwd

      * uls

      * umkdir

varchange

    Cooks any operators using changed variables.

    USAGE
      varchange [-v] [-V]

    When a variable's value changes, the OPs which reference that
    variable are not automatically cooked. Use varchange to cook all OPs
    when a variable they use changes.

    OPTIONS


        -v
            Print a list of all changed variables.

        -V
            Print a list of all changed variables and all operators that
            use the changed variables.

version

    REPLACED BY
      - hou.applicationCompilationDate()
      - hou.applicationName()
      - hou.applicationVersion()
      - hou.applicationVersionString()
      - hou.isApprentice()
      - hou.licenseCategory()

    Prints the application's version.

    USAGE
      version [-b | -n | -l | -g]

    OPTIONS


        -b
            Print the version number only.

        -n
            Print the application name and version number without the
            compilation date.

        -l
            Prints whether this is a commercial or apprentice version.

        -g
            Prints whether this is a graphical or non-graphical
            application.

vexinfo

    REPLACED BY
      - hou.VexContext

    Lists the currenly loaded VEX functions.

    USAGE
      vexinfo [-a] [-s] [-p] [-c] [-h] [-S]

    Prints the path to the VEX code for each loaded function.

    This command does not distinguish between VEX code loaded by custom
    VEX operators and generic VEX functions.

    OPTIONS


        -a
            Show all loaded functions.

        -s
            Show surface (SOP) functions.

        -p
            Show particle (POP) functions.

        -c
            Show compositing (COP) functions.

        -h
            Show channel (CHOP) functions.

        -x
            Show CVEX functions.

        -S
            Show shading functions.

vexprofile

    Turns profiling of VEX functions on/off

    USAGE
      vexprofile [-n] [-a] [-s] [-p] [-c] [-h] [-S] [start]

    Running the command with the word "start" after the options (if any)
    start profiling. If you don't specify any flags, profiling is turned
    on for all functions.

    Running the command again without arguments and without the word
    "start" turns profiling off. The command prints the profiling
    statistics when you turn off profiling. So, to save the results,
    redirect the output when you turn profiling off.

    OPTIONS


        -n
            (Numbers) Checks that all input and output variables are
            valid floating point numbers.

            Certain operations on invalid arguments can result in a
            value of "NAN" ("not a number"). This check will warn you
            about occurrences of this in your VEX code.

        -a
            Profile all loaded functions.

        -s
            Profile surface (SOP) functions.

        -p
            Profile particle (POP) functions.

        -c
            Profile compositing (COP) functions.

        -h
            Profile channel (CHOP) functions.

        -x
            Profile CVEX functions.

        -S
            Profile shading functions.

    EXAMPLES

      > vexprofile -n -a start opcook /obj/geo1/v_mountain1 vexprofile > /tmp/mountain.stats

viewagentopts

    Set various crowd agent display options for a viewport.

    USAGE
      viewagentopts [<options>] <viewports>

    This command can be used to change display options relating to crowd
    agent rendering on a single viewport or multiple viewports.

    OPTIONS


        -b <base_lod>
            Sets the base level of detail level for the agents. Normally
            this is zero, which uses the original mesh for the agent as
            the base level of detail. If set to higher levels,
            polyreduced meshes will be used as the base level.
            <base_lod> should be less than <max_lod> (specified with
            -m). This is an optimization option and increasing this
            value will improve performance at the expense of mesh
            quality.

        -d <deform_level>

            Sets the performance level of bone deformation done on
            agents, where <deform_level> is

                0
                    All agents use 4-bone deformation (higher quality)

                1
                    The original agent mesh uses 4 bone deformation,
                    while all polyreduced agents use a faster 1-bone
                    deformation.

                2
                    All agents use the fast 1-bone deformation (higher
                    performance)

        -L on|off
            Turn agent level-of-detail display on or off. If off, none
            of the other level-of-detail performance options have any
            effect (only the <deform_level> is still used), and all the
            agents are drawn at the full detail level.

        -l <lod_quality>
            Set the level-of-detail quality. Positive values will bias
            the LOD system towards higher detail agent meshes and boost
            display quality, while negative values will use lower detail
            meshes and boost performance. The effective range of
            <lod_quality> is -6 to 6.

        -m <num_lod_levels>
            Generate up to <num_lod_levels> levels of poly-reduced
            meshes. The <lod_min_points> setting may cause LOD level
            generation to stop shy of the requested number of levels, if
            more levels would go below that setting. Each level has
            roughly half the number of polygons as the previous level.
            Complex agent models may need more levels than the default 4
            LOD levels (which is in addition to the primary, unreduced
            original model).

        -p <lod_min_points>
            Specify a lower limit for reduced detail polygon meshes.
            This will halt the generation of more LOD levels if they
            would produce fewer points than <lod_min_points>.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

viewbackground

    REPLACED BY
      - hou.GeometryViewportSettings

    Sets general options for the viewport background.

    USAGE
      viewbackground [<<@options] <viewports/view-memories>

    You can paste an image in the background of a viewport for
    rotoscoping or reference purposes. This command sets the general
    options for the display of the background image. To set the actual
    image and its position, use viewroto.

    Without any options, the command prints the current values for the
    viewport/view-memory you specify.

    OPTIONS


        -b on|off
            Display background images on/off

        -q <quality>
            Quality of the background image.

        -i on|off
            Background texture filtering on/off. When off, individual
            pixels appear as blocks at high zoom levels, otherwise they
            are interpolated.

        -m <u> <v>
            Minimum U and V values for the image. Only applies to UV
            viewports/view-memories.

        -M <u> <v>
            Maximum U and V values for the image. Only applies to UV
            viewports/view-memories.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

viewcamera

    REPLACED BY
      - hou.GeometryViewport
      - hou.GeometryViewportSettings

    Make a viewport look through a camera.

    USAGE
      viewcamera [-c <camera_name>] <viewport> [<viewport2> ...]

    If you do not specify a camera with -c, the command prints the name
    of the camera associated with <viewport>.

    See how to refer to viewers and viewports.

    OPTIONS


        -c <camera_name>
            Camera to look through in <viewport>.

viewcolor

    Set the color override attribute in a particular viewport.

    USAGE
      viewcolor [-a <attrib>] [-t <color map>] [-o on|off] <viewport>

    Normally, the viewport will use the "Cd" attribute as the geometry
    color. This command is used to specify that the viewport use another
    attribute.

    OPTIONS


        -a <attrib>
            Specify the name of the attribute to use. The attribute must
            have a float or vector type.

        -t <color_map>
            Specify how to map the attribute to a color.


            none
                Components map directly to RGB

            false
                First component is used to map into a false color ramp.

            pink
                First component is used to map into a pink ramp.

            mono
                First component is copied to all three components

            blackbody
                First component is used to map into a black-red-yellow-
                white ramp.

            bipartite
                First component is used to map into a cyan-blue-red-
                yellow ramp.

        -o on|off
            Enable/disable the color override.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewcolor -a weight -t false_ramp -o on Build.panetab1.world.persp1

viewcopy

    REPLACED BY
      - hou.GeometryViewportSettings

    Copies settings from one viewport or view-memory to another.

    USAGE
      viewcopy <source> <destination> [<destination2> ...]

    For example, you can set up memory buttons based on the current
    state of a viewport, copy the state stored in the memory buttons
    back to a viewport, or copy settings between different viewports.


    NOTE
        If <destination> is a view-memory that does not exist, it will
        be created.

    OPTIONS

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewcopy Build.panetab1.world.persp1 Build.panetab1.world:1
        Copies the perspective view to memory location 1 of panetab1 of
        the Build desk.

      > viewcopy Build.panetab1.world:1 Build.panetab1.world.persp1 Build.panetab1.world:some_name

        Copies memory location 1 to the perspective view and also to a
        named memory location in the perspective view of the Build
        desktop's viewer in panetab1.

viewdisplay

    REPLACED BY
      - hou.GeometryViewportSettings

    Set various options of a viewport or view-memory.

    USAGE
      viewdisplay [<options>] <viewports/view-memories>

    If you specify a view-memory that doesn't exist, the command will
    create it.

    The -M, -N, -E, and -I options are obsolete. Use viewdispset
    instead.

    OPTIONS


        -B bw|wb
            Color scheme (bw = light background, wb = black background).

        -a on|off
            Match selected with unselected on/off

        -A templ|curr_all|curr_unsel|curr_sel on|off
            For template or current geometry, turn faded look on/off

        -b on|off
            Backface culling on/off

        -c on|off
            Shade open curves on/off. The object must have its
            appropriate display flag turned on for this option to affect
            it.

        -C <value>
            Hidden line constant sensitivity level.

        -d on|off
            Particle origin axes on/off

        -D on|off
            Geometry on/off

        -e <value>
            Line width

        -f on|off
            Field guide on/off

        -F on|off
            Filled selections on/off

        -g on|off
            Guide geometry on/off

        -G <visible>
            Visible Objects mask. Default is *.

        -h on|off
            "hulls only" on/off

        -H on|off
            Handles on/off

        -i on|off
            footprint geometry on/off

        -j on|off
            object names on/off

        -J on|off
            full object paths on/off (if object names is on)

        -k on|off
            Camera mask on/off

        -K on|off
            Enables the Display of sprites. A particle must have a
            sprite attribute on it for it to be considered a sprite
            (spriteshop, spriterot, spritescale).

        -l <value>
            Level of detail (default is 1.0)

        -L on|off
            Multi-texturing on/off

        -m on|off
            Camera name on/off

        -n <value>
            Normals display scale (default is 0.2)

        -o on|off
            Origin axes on/off

        -O on|off
            Floating origin axes on/off

        -p <value>
            Point size

        -P points|lines|discs|pixels
            Particle display mode.

        -q on|off
            Transparency on/off

        -Q on|off
            State status on/off

        -r on|off
            Projected textures and spotlights on/off

        -R on|off
            Target output geometry on/off

        -s on|off
            Show safe area on/off

        -S on|off
            Specular on/off (in shaded mode).

        -t on|off
            Texturing on/off (in shaded mode).

        -T on|off
            Templated geometry on/off

        -u on|off
            Track component selection mode to automatically enable
            useful decoration drawing.

        -U <value>
            Shadow variable sensitivity level.

        -v on|off
            Viewport name on/off

        -V <value>
            Hidden line variable sensitivity level.

        -W on|off <mode> <threshold>
            Turn option to draw in <mode> when the object render time is
            greater than or equal to <threshold>, where <mode> is one
            of:


            bound_box_wire
                Wireframe Bounding Box

            bound_box_shade
                Shaded Bounding Box

            wire
                Wireframe

            hidden_invis
                Hidden Line Invisible

            hidden_ghost
                Hidden Line Ghost

            flat
                Flat Shaded

            flat_wire
                Flat Wire Shaded

            shade
                Smooth Shaded

            shade_wire
                Smooth Wire Shaded

            vex
                VEX Shaded

            vex_wire
                VEX Wire Shaded

        -x on|off
            YZ plane grid on/off

        -X on|off
            Draw shadows on/off

        -y on|off
            XZ plane grid on/off

        -Y <value>
            Shadow constant sensitivity level.

        -z on|off
            XY plane grid on/off

        -Z on|off
            Z sorting of sprites on/off. Obsolete, as sprites are always
            sorted if transparency is enabled and sprites are
            transparent.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

viewdispopts

    Set various options of a viewport.

    USAGE
      viewdispopts [<options>] <viewports>

    Similar to viewdisplay, this command allows you to set display
    options for a viewport.

    OPTIONS


        -a on|off
            Turns on or off display of object origin guides.

        -s on|off
            Turns on or off display of current and selected object
            highlighting when viewing objects at the scene level.

        -w <alpha>
            Specifies the interior wire alpha for wireframe
            representations of geometry with internal structure, such as
            tetrahedron meshes. 1.0 will draw opaque interior wires,
            while 0.0 will remove them entirely. The default is 0.1,
            which draws internal wireframe lines faintly.

        -x on|off
            Enables of disables support for drawing X-Ray objects. If
            off, the X-Ray flag on objects is ignored.

        -X on|off
            Turns on or off high quality X-Ray object rendering. Only
            has an effect if X-Ray rendering is turned on.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

viewdispset

    REPLACED BY
      - hou.GeometryViewportDisplaySet.isShowingPointUVs()
      - hou.GeometryViewportDisplaySet.isShowingUVOverlap()
      - hou.GeometryViewportDisplaySet.showPointMarkers()
      - hou.GeometryViewportDisplaySet.showPointNumbers()
      - hou.GeometryViewportDisplaySet.showPointNormals()
      - hou.GeometryViewportDisplaySet.showPointUVs()
      - hou.GeometryViewportDisplaySet.showPointPositions()
      - hou.GeometryViewportDisplaySet.showPointTrails()
      - hou.GeometryViewportDisplaySet.showCoincidentPoints()
      - hou.GeometryViewportDisplaySet.showPrimHulls()
      - hou.GeometryViewportDisplaySet.showPrimNumbers()
      - hou.GeometryViewportDisplaySet.showPrimNormals()
      - hou.GeometryViewportDisplaySet.showPrimBreakpoints()
      - hou.GeometryViewportDisplaySet.showPrimProfiles()
      - hou.GeometryViewportDisplaySet.showPrimProfileNumbers()
      - hou.GeometryViewportDisplaySet.showVertexMarkers()
      - hou.GeometryViewportDisplaySet.showVertexNumbers()
      - hou.GeometryViewportDisplaySet.showVertexNormals()
      - hou.GeometryViewportDisplaySet.showVertexUVs()
      - hou.GeometryViewportDisplaySet.showUVBackfaces()
      - hou.GeometryViewportDisplaySet.showUVOverlap()
      - hou.GeometryViewportDisplaySet.setPointMarkerVisibility()
      - hou.GeometryViewportDisplaySet.setPointNumberVisibility()
      - hou.GeometryViewportDisplaySet.setPointNormalVisibility()
      - hou.GeometryViewportDisplaySet.setPointUVVisibility()
      - hou.GeometryViewportDisplaySet.setPointPositionVisibility()
      - hou.GeometryViewportDisplaySet.setPointTrailVisibility()
      - hou.GeometryViewportDisplaySet.setPrimNumberVisibility()
      - hou.GeometryViewportDisplaySet.setPrimNormalVisibility()
      - hou.GeometryViewportDisplaySet.setPrimBreakpointVisibility()
      - hou.GeometryViewportDisplaySet.setVertexMarkerVisibility()
      - hou.GeometryViewportDisplaySet.setVertexNumberVisibility()
      - hou.GeometryViewportDisplaySet.setVertexNormalVisibility()
      - hou.GeometryViewportDisplaySet.setVertexUVVisibility()
      - hou.GeometryViewportDisplaySet.setShadedMode()
      - hou.GeometryViewportDisplaySet.setShadingModeLocked()
      - hou.GeometryViewportDisplaySet.useGhostedLook()
      - hou.GeometryViewportDisplaySet.useFadedLook()
      - hou.GeometryViewportDisplaySet.useXRay()
      - hou.GeometryViewportDisplaySet.useLighting()
      - hou.GeometryViewportDisplaySet.setBoundaryMode()
      - hou.GeometryViewportDisplaySet.setUVBoundaryMode()
      - hou.GeometryViewportDisplaySet.setToolbarLinked()
      - hou.GeometryViewportDisplaySet.setLinkToDisplaySet()
      - hou.GeometryViewportDisplaySet.setUniqueDisplaySet()

    Set various options of a viewport. Replaces viewdisplay.

    USAGE
      viewdispset [<options>] <display_set> <viewports>

    The <display_set> specifies which geometry the settings should apply
    to. This can be one of:


    scene
        Apply to Scene Geometry.

    selectscene
        Apply to Selected Scene Geometry.

    ghostscene
        Apply to Ghost Scene Geometry.

    display
        Apply to Display Model Geometry.

    current
        Apply to Current Model Geometry (in Show Current Operator mode).

    template
        Apply to Template Model Geometry.

    OPTIONS


        -s <shading_mode>
            Where <shading_mode> is one of:


            bound_box_wire
                Wireframe Bounding Box

            bound_box_shade
                Shaded Bounding Box

            wire
                Wireframe

            wire_ghost
                Wireframe

            hidden_invis
                Hidden Line Invisible

            hidden_ghost
                Hidden Line Ghost

            flat
                Flat Shaded

            flat_wire
                Flat Wire Shaded

            shade
                Smooth Shaded

            shade_wire
                Smooth Wire Shaded

        -B <boundary_mode>
            Where <boundary_mode> is one of:


            none
                Do not draw geometry boundaries

            3d
                Draw boundaries defined by the 3D connectivity of the
                geometry

            uv
                Draw boundaries defined by the geometry's UV attribute
                connectivity

            viewport
                Draw 3D boundaries in 3D viewports and UV boundaries in
                UV viewports

        -r unique|<display_set>
            Use unique settings or reference those from the specified
            display set.

        -m on|off <visibility>
            Show point markers on/off and set visibility.

        -c on|off <visibility>
            Show point numbers on/off and set visibility.

        -n on|off <visibility>
            Show point normals on/off and set visibility.

        -u on|off <visibility>
            Show point texture coordinates on/off and set visibility.

        -x on|off <visibility>
            Show point positions on/off and set visibility.

        -h on|off
            Show primitive hulls on/off.

        -C on|off <visibility>
            Show primitive numbers on/off and set visibility.

        -N on|off <visibility>
            Show primitive normals on/off and set visibility.

        -b on|off <visibility>
            Show primitive breakpoints on/off and set visibility.

        -P on|off
            Show primitive profile curves on/off.

        -p on|off
            Show primitive profile numbers on/off.

        -M on|off <visibility>
            Show vertex markers on/off and set visibility.

        -v on|off <visibility>
            Show vertex numbers on/off and set visibility.

        -V on|off <visibility>
            Show vertex normals on/off and set visibility.

        -U on|off <visibility>
            Show vertex texture coordinates on/off and set visibility.

        -f on|off
            Show filled UV backfaces on/off.

        -o on|off
            Show overlapping UV regions on/off.

        -G on|off
            Draw ghosted on/off.

        -F on|off
            Draw faded on/off.

        -l on|off
            Allow lighting on/off.

        -L on|off
            Link to toolbar on/off.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

vieweffect

    Controls viewport settings.

    This command is used internally by Houdini to save the options set
    on a viewport.

    RELATED

      * viewdispopts

      * viewdispset

viewergrouplist

    Set group list options of viewer panes.

    USAGE
      viewergrouplist [<options>] <viewports>

    Similar to vieweroption, this command allows you to set display
    options for a viewer pane, but specifically related to the group
    list control. See how to refer to viewers and viewports. Running
    this command with no options outputs the command that describes the
    current state of the group list gadget.

    OPTIONS


        -g on|off
            Turns the group and attribute list gadget on or off in the
            viewer. This corresponds to the Group and Attribute List
            check box on the Guides page of the Display Options dialog
            for a geometry viewer.

        -s <width> <height>
            Controls the width and height of the group and attribute
            list gadget.

        -c on|off
            Turns on or off the coloring of the different groups or
            attribute values in the geometry viewer. Only has an effect
            if the group list gadget is also turned on.

        -t <component_type>
            Controls the type of component that should be shown in the
            group list gadget. Supported values are:


            primitive
                List primitive groups or attribute values or
                connectivity.

            point
                List point groups or attribute values or connectivity.

            edge
                List edge groups or connectivity.

            vertex
                List vertex attribute values or connectivity.

            breakpoint
                List breakpoint connectivity.

            matchselect
                The group list component type changes with the current
                component selection type.

        -m <mask>
            Sets the group or attribute mask value for the group list
            gadget.

        -e on|off
            Turns on or off the inclusion of empty groups in the group
            list gadget.

        -p on|off
            Turns on or off the trimming of the group list contents to
            show only groups that contain one or more selected or pre-
            selected components (if any components are under the mouse
            in the viewport).

        -h on|off
            Turns on or off the condensing of the hierarchy in the group
            list. This applies to components grouped by string
            attributes representing a path. Turning this option on can
            fit more information into the list, but can make it harder
            to distinguish levels in the hierarchy.

viewerinspect

    Gets/sets inspection options for a viewer.

    USAGE
      viewerinspect <viewer> [<parameter> (<value> ) ...]

    With no settings, the command prints out the command that would
    recreate the current inspect settings of the specified <viewer>.

    OPTIONS


        mode ( objects|prims|pixels )
            Set the inspection mode.

        object_properties ( <properties> )
            Set which object properties are shown in the inspect window
            by supplying a space separated list of tokens. Each token
            takes the form '+<property>' or '-<property>' or
            '<property>' where property is one of: bounds, groups, or
            script.

        prim_properties ( <properties> )
            Set which primitive properties are shown in the inspect
            window by supplying a space separated list of tokens. Each
            token takes the form '+<property>' or '-<property>' or
            '<property>' where property is one of: intrinsics, groups,
            materials, or script.

        enable ( 0|1 )
            Enable/disable inspection.

        magnify ( 0|1 )
            Enable/disable magnification of the area under the cursor.

    EXAMPLES

      > viewerinspect Build.panetab1.world
        Display the inspection parameters of Build.panetab1.world.

      > viewerinspect Build.panetab1.world mode ( objects ) object_properties ( bounds groups ) enable ( 1 )

        Change the mode to objects, show only object bounds and
        bundle/group membership, and enable.

      > viewerinspect Build.panetab1.world object_properties ( +script )

        Add the display of the custom python script output without
        disabling any other object properties.

vieweroption

    REPLACED BY
      - hou.SceneViewer

    Sets various options for viewer panes.

    USAGE
      vieweroption [-a 0|1|2] [-h 0|1] [-m 0|1] [-c 0|1] [-l 0|1] [-s
      0|1] [-r <renderer>] [-F <flipcommand>] [-V <visibilitystring>]
      <viewernames>

    Unlike viewdisplay, this command affects the entire viewer pane,
    rather than a viewport within the viewer.

    See how to refer to viewers and viewports .

    OPTIONS


        -a 0|1|2
            Hide other objects, show all objects, or ghost other objects

        -h 0|1
            Use headlight on/off

        -m 0|1
            Use object material at SOP level on/off

        -c 0|1
            Show current/display SOP.

        -l 0|1
            Link orthographic viewports on/off

        -s 0|1
            Apply option changes in the UI to all split views on/off

        -r <renderer>
            Change the renderer to output driver <renderer>.

        -F <flipcommand>
            Set flipbook options.

        -V <visibilitystring>
            Set object level visibility by supplying a space separated
            string of tokens. Each token takes the form '+<type>' or
            '-<type>' where type is one of: *, geo, cam, light, muscle,
            bone, null, blend, other, or popguide.

    RELATED

      * viewdisplay

viewerstow

    Stows or unstows components of a viewer.

    USAGE
      viewerstow [-t open|stow] [-b open|stow] [-l open|stow] [-x
      open|stow] [-m open|stow|hide] [-d open|stow] <viewer> [<viewer2>
      ...]

    Each option corresponds to a toolbar position you can stow or open
    (unstow). Some toolbars can be completely hidden in the viewer, such
    as the view memory and color correction toolbars. Toolbars that are
    completely hidden can be restored using the toolbar toggles found in
    the viewport label menu.

    OPTIONS


        -t open|stow
            Top toolbar

        -b open|stow
            Bottom toolbar

        -l open|stow
            Left toolbar

        -x open|stow
            Toolbox under the top toolbar.

        -m open|stow|hide
            View memory toolbar at the bottom of the viewport. It can be
            entirely hidden via the 'hide' option.

        -c open|stow|hide
            Color correction toolbar at the bottom of the viewport. It
            can be entirely hidden via the 'hide' option.

        -d open|stow
            Display flags toolbar on the right.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

viewhome

    REPLACED BY
      - hou.GeometryViewport

    This command allows you to home the named viewports.

    USAGE
      viewhome [-s] <viewports>

    OPTIONS


        -s
            Home with respect to selected operators only.

    EXAMPLES

      > viewhome -s Build.panetab1.world.persp1

    RELATED

      * viewls

viewinfotext

    Set info text options for a viewport.

    USAGE
      viewinfotext [<options>] <viewports>

    This command sets the options for the text display of information in
    the viewport.

    Without any options, the command prints the current values for the
    viewports you specify.

    OPTIONS


        -m off|sel_only|always

            The info text mode where: off
                Info text is not displayed at all.

            sel_only
                Info text is only displayed for selected entities.

            always
                Info text is always displayed, whether or not there is
                an active selection.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

viewlayout

    REPLACED BY
      - hou.SceneViewer

    Rearranges viewports in a viewer pane.

    USAGES
      viewlayout -s <type> <viewer> [<viewer2> ...]
      viewlayout -d h|v <type1> <type2> <viewer> [<viewer2> ...]
      viewlayout -q <viewer> [<viewer2> ...]
      viewlayout -T h|v <viewer> [<viewer2> ...]
      viewlayout -Q h|v <viewer> [<viewer2> ...]

    The -s (single view) and -d (double view) options take a <type>
    argument, a number from 1 to 4, to specify which view to put in the
    viewport.

    The numbers 1 to 4 do not correspond to actual views (such as top,
    left, side, perspective), but rather refer to whatever view is in a
    particular viewport in the quad view:

     1. The view in quad-view's top-left viewport.

     2. The view in quad-view's top-right viewport.

     3. The view in quad-view's bottom-left viewport.

     4. The view in quad-view's bottom-right viewport.

    OPTIONS


        -s <type>
            Fill the viewer with a single viewport.

        -d h|v <type1> <type2>
            Split the viewer between two viewports (h = horizontal
            split, v = vertical split).

        -q
            Quad view.

        -T h|v
            Split the viewer between three viewports with one viewport
            taking

        -Q h|v
            Split the viewer between four viewports with one viewport
            taking

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewlayout -q Build.*.world
        Use the quad-view layout in all viewers of the Build desktop.

      > viewlayout -d h 1 3 Build.panetab1.world

        Use views 1 and 3 in a vertical double-view layout in the viewer
        that's in the Build desktop's panetab1.

      > viewlayout -s 4 Build.panetab1.world

        Use only the bottom-right view in the above viewer.

viewlight

    Controls viewport settings.

    This command is used internally by Houdini to save the options set
    on a viewport.

    RELATED

      * viewdispopts

      * viewdispset

viewls

    REPLACED BY
      - hou.GeometryViewportSettings
      - hou.SceneViewer

    Lists all viewer panes.

    USAGE
      viewls [-n] [-t world|texture|particle] [-l] [-v [-T
      perspective|ortho_<side>|uv]] [-A] [<pattern>]

    Each line of the list of viewers is in the format "<viewername>
    <type>"|where <viewername> is in the form "<desk>.<pane>.<type>"
    <type> is "world"|"texture"|or "particle".

    If you specify a <pattern>|only viewers whose names match the
    pattern are printed.

    OPTIONS


        -n
            Show viewer names only.

        -t world|texture|particle
            Only show viewers of the specified type.

        -l
            List view-memories also. These lines have the format
            "<viewer_name>:<memory_name> <view_type>"

        -v
            Lists the viewports associated with each viewer pane. These
            lines have the format "<viewer_name>.<viewport_name>
            <viewport_type>"

        -T <viewport_type>
            With the -v option|only shows viewports of the specified
            type|one of perspective|ortho_front|ortho_back|ortho_right|o
            rtho_left|ortho_top|ortho_bottom|or uv.

        -A
            The -A option will include all existing viewers including
            those that are not currently active.

viewmaskoverlay

    Sets various options of the view mask overlay in viewports.

    USAGE
      viewmaskoverlay [-o <opacity>] <viewport> [<viewport2> ...]


    OPTIONS


        -o <opacity>
            Set the opacity of the overlay.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewmaskoverlay -o 0.4 *
      > viewmaskoverlay -o 0.7 Build.panetab1.world

viewname

    REPLACED BY
      - hou.GeometryViewportSettings

    Renames a viewport

    USAGE
      viewname [-n <name>] [-l on|off] <viewport> [<viewport2> ...]

    Viewports in the same viewer must have unique names. If you specify
    a name for more than viewport in the same viewer, the names will
    have numbers appended or incremented at the end to make them unique.

    If you do not specify -n and/or -l, the command does nothing.

    OPTIONS


        -n <name> : -l on|off
            (Lock) If on, prevents Houdini from changing the name
            automatically. For example, changing a viewport from
            perspective to top usually causes it to be renamed "top1",
            removing any custom name. To preserve the custom name, use
            "-l on".

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewname -n custom1 -l on Build.panetab1.world.persp1
        Change the viewport called persp1 in the the first pane of the
        Build desktop to be called custom1 The name custom will be
        preserved even if the viewport changes type.

      > viewname -n custom -l off Build.panetab1.world

        Change all four viewports to be called custom, custom1, custom2
        and custom3: When they are changed to a different type, the name
        will be lost.

viewonionskin

    Set various onion skinning display options for a viewport.

    USAGE
      viewonionskin [<options>] <viewports>

    This command can be used to change display options relating to onion
    skin rendering on a single viewport or multiple viewports. Onion
    skinning is enabled on a geometry object by turning on the Onion
    Skinning parameter in the Misc tab.

    See how to refer to viewers and viewports.

    OPTIONS


        -a <skins_after>
            Sets the number of skins that follow the current animation.
            These are spaced 'frame_increment' apart, working back from
            the current frame.

        -b <skins_before>
            Sets the number of skins that precede the current animation.
            These are spaced 'frame_increment' apart, working forward
            from the current frame.

        -e on|off
            Globally turn onion skinning on or off. When off, all onion
            skinning is disabled, regardless of the setting of the
            objects' Onion Skinning parameter.

        -i <frame_increment>
            Set the number of frames between skins. A frame increment of
            1 will not skip any frames. A small frame increment is good
            for visualizing quick animations, whereas larger frame
            increments is good for slower ones.

        -A <frame_after_color>
            Tint the skins that follow the current animation by this
            color. The default, white, does not apply any tint.

        -B <frame_before_color>
            Tint the skins that precede the current animation by this
            color. The default, white, does not apply any tint.

        -o <skin_opacity>
            Sets the opacity for the skins. An opacity of 1.0 makes the
            skin opaque, while values closer to zero make it easier to
            see through the skins.

viewoptadd

    Adds display options to all viewers.

    USAGE
      viewoptadd [-v] [-r] <type> [<name>] [<name2> ...]

    With no arguments, the command prints a list of option types.

    If you specify a type, the command adds a display option of that
    type with a generic name.

    If you specify names, the command creates display options with the
    given names.

    OPTIONS


        -r
            Replace any existing option with the same name. This option
            cannot be used when no names are specified.

        -v
            Prints the name of the created option.

    EXAMPLES

      > viewoptadd vector vector_option
        Creates a vector display option called "vector_option"

    RELATED

      * viewoptrm

      * viewoptls

      * viewoptset

viewoptenable

    Enable/disable user options in a particular viewport.

    USAGE
      viewoptenable <viewport> <apply_to> [ [+|-]<option_pattern> ...]

    The <apply_to> argument specifies which geometry these settings
    should apply to. This can be one of:


    all
        Apply to both selected and unselected (H11 Scene Renderer)

    sel
        Apply to selected (H11 Scene Renderer)

    unsel
        Apply to unselected (H11 Scene Renderer)

    templ
        Apply to templates (H11 Scene Renderer)

    target
        Apply to target output (ie. the display sop when in "view
        current" mode) (H11 Scene Renderer)

    or:


    displayset\:scene
        Unselected geometry at the scene (object) level.

    displayset\:selectscene
        Selected geometry at the scene (object) level.

    displayset\:ghostscene
        External object geometry when not at the scene (object) level
        and external objects are being ghosted.

    displayset\:display
        Geometry for the node with the display flag set in the currently
        modeled object.

    displayset\:current
        Geometry for the selected node in the currently modeled object
        if it is not also the display node.

    displayset\:template
        Geometry for all the nodes with the template flag set in the
        currently modeled object.

    With no settings, the command prints the command that would enable
    the current set of active display options for the specified
    viewport.

    OPTIONS


        +<option_pattern>
            Enable all user options matching <option_pattern>.

        -<optioni_pattern>
            Disable all user options matching <option_pattern>.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewoptenable Build.panetab1.world.persp1 displayset:scene
        Display the current enabled options for the unselected scene
        geometry.

      > viewoptenable Build.panetab1.world.persp1 displayset:scene +vector_option

        Enable "vector_option" for the unselected scene geometry.

viewoptls

    Lists options available in viewers.

    USAGE
      viewoptls [-t]

    OPTIONS


        -t
            Print types of listed options.

    EXAMPLES

    RELATED

      * viewoptrm

      * viewoptls

      * viewoptset

viewoptname

    Renames a display option.

    USAGE
      viewoptname <old_name> <new_name>

viewoptrm

    Removes display options from all viewers.

    USAGE
      viewoptrm <name_pattern> [<name_pattern2> ...]

    OPTIONS

    RELATED

      * viewoptadd

      * viewoptls

viewoptset

    Gets/sets the settings for a particular display option. These
    settings are shared by all viewers.

    USAGE
      viewoptset <option> [<parameter> ( <value> ) ...]

    With no settings, the command prints the command that would recreate
    the current settings of the specified <option>.

    OPTIONS


        <parameter> ( <value> )
            Set <parameter> of <option> to <value>. The available
            parameters vary by option type.

    EXAMPLES

      > viewoptset vector_option
        Display the current settings of "vector_option"

      > viewoptset "vector_option" fade ( 1 )

        Display the vector stick with a faded tip.

vieworthogrid

    REPLACED BY
      - hou.GeometryViewportSettings

    Controls display of the grid in an orthographic viewport.

    USAGE
      vieworthogrid [-d on|off] [-o <x> <y> <z>] [-s <x> <y>] [-r <x>
      <y>] <viewport> [<viewport2> ...]

    OPTIONS


        -d on|off
            Grid on/off

        -o <x> <y> <z>
            Offset grid.

        -s <x> <y>
            Set grid spacing in X and Y.

        -r <x> <y>
            Set ruler spacing in X and Y. <x> and <y> must be integers.

        -R 0|1|2
            Set the ruler drawing type (0 = no ruler, 1 = ruler on main
            axis, 2 = ruler on grid points).

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > vieworthogrid -o 0 0 0 *
        Sets the grid offset to 0,0,0 in all viewports.

      > vieworthogrid -o 0 0 0 -s 0.1 0.1 -r 10 10 Build.panetab1.world

        Sets options for all viewports in the Build.panetab1.world
        viewer pane.

viewprojection

    REPLACED BY
      - hou.GeometryViewportSettings

    Sets the projection method of a perspective viewport.

    USAGE
      viewprojection [-o ortho|perspective] <viewports/view-memories>

    The command lets you switch a perspective viewport between true
    perspective (where parallel lines converge at the horizon) and
    isographic projection (where parallel lines remain parallel).

    OPTIONS


        -o ortho|perspective
            Set the projection type of the viewport/view-memory.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

viewrefplane

    Changes reference plane parameters.

    USAGE
      viewrefplane [options] <viewers>

    If you don't specify any options, viewrefplane prints the command(s)
    to regenerate the current reference plane setup.

    OPTIONS


        -W yup|zup
            Used internally to specify the active global orientation
            mode when a hip file is saved. This is only valid inside a
            hip file.

        -o <x> <y> <z>
            Set the origin.

        -n <x> <y> <z>
            Set the plane normal to.

        -x <x> <y> <z>
            Set the horizontal axis.

        -u <x> <y> <z>
            Set the up vector.

        -l n|x|y|z
            Lock the up vector to the normal, or world x, y, or z axes.

        -s <x> <y>
            Set the grid space to <x> units along the X-axis and <y>
            units along the Y-axis.

        -r <x> <y>
            Set the grid ruler to <x> units along the X-axis and <y>
            units along the Y-axis.

        -R 0|1|2
            Set the ruler drawing type (0 = no ruler, 1 = ruler on main
            axis, 2 = ruler on grid points).

        -d on|off
            Turns display of the plane on/off.

    EXAMPLES

      > viewrefplane -o 0 0 0 *
      > viewrefplane -o 1 1 1 -n 0 0 1 -r 10 10 Build.panetab1.world

viewroto

    Sets image and position options for the viewport background.

    USAGE
      viewroto [<<@options] <viewtype> <viewports/view-memories>

    You can paste an image in the background of a viewport for
    rotoscoping or reference purposes. This command sets the image
    source and positioning options for the display of the background
    image. To set the display, quality, and filtering options use
    viewbackground.

    Some rotoscope parameters can be specified per viewport type. The
    <viewtype> must be one of persp, cam, top, front, right, bottom,
    back, left, or uv. The cam settings are used when looking through a
    camera object. The persp settings are used in a free view without a
    camera. The uv settings are for the UV viewport, and the others
    refer to the various fixed-axis orthographic views.

    Without any options, the command prints the current values for the
    viewport/view-memory you specify.

    OPTIONS


        -S file|cop
            source of the background image.

        -F <filename>
            Sets the filename from which to get the image. Only applies
            when "-S file".

        -C <cop_path>
            Set the compositing operator to use for the background
            image. This option lets you set the operator with just a
            path. Use -c to set the network and COP separately. Only
            applies when "-S cop".

        -c <ice_name> <cop_name>
            Set the compositing operator to use for the background
            image. This option lets you set the network and COP
            separately, use -C to set the operator using just a path.
            Only applies when "-S cop".

        -a on|off
            Automatic position/scaling of background image on/off. If
            off, you must manually position and scale the image with -o
            and -s. Only applies to 3D viewports/view-memories.

        -o <x> <y>
            Offsets the image by <x> and <y>. Only applies to 3D
            viewports/view-memories, and only has an effect when
            automatic position/scaling is off.

        -s <x> <y>
            Scales the image by <x> and <y>. Only applies to 3D
            viewports/view-memories, and only has an effect when
            automatic position/scaling is off.

        -B <brightness>
            Sets the brightness of the background image.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

viewsnapshot

    REPLACED BY
      - hou.GeometryViewportSettings
      - hou.SceneViewer

    Manages the view snapshot memory.

    USAGE
      viewsnapshot [-t <memory>] [-d <memory>] [-h] [-c] <viewer>

    This command can record an image from the viewer, display (recall) a
    memory image to the viewer, hide the recalled memory, and erase the
    image memory.

    A viewer argument is a name of a pane for viewing the scene. A
    viewer can be subdivided into up to four viewports (such as top,
    left, front, and perspective).

    Viewers have names of the form "<desk>.<pane>.<type>", where:


    desk
        The name of the desk containing the viewer pane.

    pane
        The name of the viewer pane.

    type
        "world", "particle", or "texture", depending on the contents of
        the pane.

    OPTIONS


        -t <memory>
            Takes a snapshot of the viewer and stores it in the <memory>

        -d <memory>
            Displays the snapshot stored in the <memory>

        -h
            Hides currently displayed snapshot (if any).

        -c
            Frees all the snapshot memories.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewsnapshot -t 4 Build.panetab1.world
        Take a snapshot of the scene in the viewer to memory 4.

      > viewsnapshot -d some_memory Build.panetab1.world

        Display a snapshot stored in memory "some_memory"

      > viewsnapshot -h Build.panetab2.world

        Hide the snapshot displayed in Build.panetab2.world

    RELATED

      * viewsnapshotoption

      * viewls

viewsnapshotoption

    REPLACED BY
      - hou.SceneViewer

    Sets the options for the view snapshot memory.

    USAGE
      viewsnapshotoption [-s on|off] [-h on|off] [-a <alpha>] [-v
      <objects>] <viewer>

    This command can set the value of snapshot alpha blending, specify
    the objects that are visible when a snapshot is taken, and set the
    flags options for the snapshot memory.

    A viewer argument is a name of a pane for viewing the scene. A
    viewer can be subdivided into up to four viewports (such as top,
    left, front, and perspective).

    Viewers have names of the form "<desk>.<pane>.<type>", where:


    desk
        The name of the desk containing the viewer pane.

    pane
        The name of the viewer pane.

    type
        "world", "particle", or "texture", depending on the contents of
        the pane.

    If no options are specified, the command that sets the current
    options is printed out.

    OPTIONS


        -s on|off
            This flag determines whether a snapshot is displayed at the
            frame at which it was taken (i.e., at source frame)

        -h on|off
            This flag determines whether handles are hidden when a
            snapshot is taken

        -a <alpha>
            Sets the alpha value for blending snapshots with a scene
            view

        -v <objects>
            Sets the objects that are visible when a snapshot is taken

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewsnapshotoption -s on Build.panetab2.world
        Inhibits the display of memory when the current frame is the
        same as the frame at which the memory has been taken

      > viewsnapshotoption -h off Build.panetab1.world

        Allows the handles to be included in snapshots (i.e., do not
        hide handles)

      > viewsnapshotoption -a 0.33 -v "*obj* *eye*" Build.panetab1.world

        Sets alpha for image blending and specify visible objects.

      > viewsnapshot Build.panetab2.world

        Displays the options of the viewer.

    RELATED

      * viewsnapshot

      * viewls

viewtool

    Sets the current tool in a scene viewer (or lists available tools).

    USAGE
      viewtool [-t <tool_name>] <viewer_name>

    This command sets the currently active tool in a scene viewer (that
    is, the selected tool that shows its options in the operator control
    toolbar and acts on mouse clicks and key presses). This command
    simulates the effect of the user choosing a tool in the viewer, such
    as via the tab menu . If no options are specified, then this command
    lists all the available tools for the given viewer.

    Use the viewls command to list the available scene viewers.


    NOTE
        The tools you can select depend on the viewer type. For example,
        you can only select object tools (such as Pose) when the viewer
        is at the object level.

    OPTIONS


        -t <tool_name>
            Name of the tool to select in the viewer.

            This is the _internal_ name of the tool, not the name that
            usually shows up in the user interface, for example xform
            instead of Transform.

            Use this command without any options to obtain the list of
            available tools.

    EXAMPLES

      > viewtool Build.panetab1.world
        Prints a list of tools available in the scene viewer named
        Build.panetab1.world. This list may depend on the viewer type
        (e.g., POP viewer vs. SOP viewer).

      > viewtool -t geo Build.panetab1.world

        Selects the Geometry Object in the scene viewer named
        Build.panetab1.world.

      > viewtool -t polyextrude Build.panetab1.world

        Selects the Poly Extrude SOP in the scene viewer named
        Build.panetab1.world.

    RELATED

      * imgviewtool

      * viewls

viewtransform

    REPLACED BY
      - hou.GeometryViewportSettings

    Gets/sets projection data for a viewport.

    USAGE
      viewtransform [-p] [-v <version>] <viewport> [<parameter>
      (<value>) ...]

    OPTIONS


        -W yup|zup
            Used internally to specify the active global orientation
            mode when a hip file is saved. This is only valid inside a
            hip file.

        -p
            Prints the command that would recreate the current state of
            the <viewport>, in the form of a viewtransform command with
            every parameter set.

        <parameter> ( <value> )
            Set <parameter> of <viewport> to <value>. Use the -p option
            to show available parameters.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewtransform -p Build.panetab1.world.persp1
        Display the viewing parameters of Build.panetab1.world.persp1.

      > viewtransform Build.panetab1.world.persp1 orthowidth ( 4.5 )

        Change the orthographic width to 4.5 in the specified viewport.
        To change more parameters, add them and their values to the
        command after the viewport argument.

      > viewtransform Build.panetab1.world.persp1 flag ( +a ) aspect ( 1.333 )

        Turn on the use of the aspect ratio and set it to 1.333.

      > viewtransform Build.panetab1.world.persp1 flag ( -a )

        Turn off the use of the aspect ratio.

viewtype

    REPLACED BY
      - hou.GeometryViewportSettings

    Changes the type of a viewport.

    USAGE
      viewtype [-t <type>] <viewport>

    OPTIONS


        -t <viewport_type>
            Set <viewport> to one of perspective, ortho_front,
            ortho_back, ortho_right, ortho_left, ortho_top,
            ortho_bottom, or uv.

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewtype -t ortho_top Build.panetab1.world.persp1
        Change the viewport called persp1 in the the first pane of the
        Build desktop to be an ortho_top viewport.

      > viewtype -t front Build.panetab1.world

        Change all viewports in the Build.panetab1.world viewer pane to
        be ortho FRONT viewports.

    RELATED

      * viewls

viewupdate

    REPLACED BY
      - hou.ui.triggerUpdate()

    Controls the updating of views.

    USAGE
      viewupdate [-c] [-u never|changes|always|now]

    This command controls how often views update. Normally the views
    update continuously, however you can improve script performance by
    disabling updates while you change the world, then re-enabling
    updates to show your changes all at once.

    If you don't specify any options the command prints the current
    update mode.


    NOTE
        Currently the update mode applies only to 3D viewports.

    OPTIONS


        -c
            Print output in the form of a command.

        -u never|changes|always|now
            Sets the global view update policy:


            never (or "off")
                Do not update views unless you do viewupdate -u now.

            changes (or "on")
                Update views after changes.

            always (or "continuous")
                Update continuously.

            now
                Forces an update when the current update mode is
                "never".

    EXAMPLES

      > viewupdate -u never
      > viewupdate -u now
      > viewupdate -c

viewuvgrid

    REPLACED BY
      - hou.GeometryViewportSettings

    Sets various options of the grid in UV texture viewports.

    USAGE
      viewuvgrid [-r on|off] [-s <u> <v>] [-P on|off] [-S <u> <v>] [-O
      <x> <y>] [-C on|off] [-t on|off] <viewport> [<viewport2> ...]

    OPTIONS


        -r on|off
            Reference grid display on/off.

        -s <u> <v>
            Set the grid spacing along U and V.

        -P on|off
            Pixel grid on/off

        -S <u> <v>
            Set the pixel grid spacing along U and V.

        -O <x> <y>
            Sets the pixel grid offset.

        -C on|off
            Only draw pixel grid over background image on/off

        -t on|off
            Show tile boundary on/off

        HOW TO REFER TO VIEWERS AND VIEWPORTS IN COMMANDS

            Viewers have names with the form "desk.pane.type", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

            To see a list of all viewers, use "viewls -n". For most
            viewer-related commands, you can specify more than one
            viewer at a time, and/or use wildcards in viewer names.

            A viewer can be subdivided into up to four viewports (such
            as top, left, front, and perspective). Viewports have names
            with the form "desk.pane.type.viewport", where:

          * desk = The name of the desk containing the viewer pane.

          * pane = The name of the viewer pane.

          * type = "world", "particle", or "texture", depending on the
            contents of the pane.

          * viewport = The name of the viewport within the viewer pane.
            You can change the name of a viewport in the viewport's
            display options editor. To list all viewports, use "viewls
            -n -v" (to show what viewer each viewport is in, just use
            "viewls -v").

            For most viewport-related commands, you can specify more
            than one viewer at a time, and/or use wildcards in viewer
            names. You can also use the name of a viewer to refer to all
            viewports in the viewer. For example instead of "viewcamera
            -c cam1 Build.panetab1.world.persp1
            Build.panetab1.world.top1 ...", you could do "viewcamera -c
            cam1 Build.panetab1.world.*" or just "viewcamera -c cam1
            Build.panetab1.world".

            Most viewport-related commands work on view-memories as well
            as viewports. View-memories have the format
            "desk.pane.type:memory", where memory is a number from 1-9
            or a name. The first three components (desk name, pane name,
            type) can have wildcards. To list all view-memories, use
            viewls -n -l.

            The viewlayout command controls the number and layout of
            viewports in a viewer pane.

    EXAMPLES

      > viewuvgrid -r on -s 0.1 0.1 *
      > viewuvgrid -P on -S 2 2 -O 0 0 -C on Build.panetab1.world

viewwrite

    REPLACED BY
      - hou.GeometryViewport

    Creates a flipbook from a viewport.

    USAGE
      viewwrite [options] <viewername> [<output_files>]

    <viewername> must be a single, open viewport.

    <output_files> is a file path (using the $F variable to create an
    image sequence). If -M is used with files in <output_files>, frames
    are written to MPlay and disk files simultaneously.

    OPTIONS


        -f <start> <end>
            Frame range to render

        -i <inc>
            Increment in frame range. For example, 2 renders every other
            frame, 3 renders every third frame, etc.

        -E
            Leave the playbar at the last frame rendered instead of
            restoring the playbar frame prior to the flipbook.

        -r <resx> <resy>
            Resolution. If not specified, the command uses the viewport
            resolution. The command makes no effort to preserve aspect
            ratio.

        -R current|beauty|all


        -c
            Crop out view mask overlay region.

        -b <imagefile>
            Background image sent to MPlay. This has no effect on output
            files.

        -B
            Only flipbook the beauty pass. Ignore handles, guides, and
            decorations. This option is deprecated, use -R beauty
            instead.

        -g <gamma>
            Gamma value.

        -l <lutfile>
            File containing a lookup table (LUT).

        -e
            Enable block editing.

        -a <audio_file>
            Audio file to use with the flipbook.

        -o <frame> <audio_sec>
            Synchronize image <frame> with audio at <audio_sec>.

        -q <aa_quality>
            Set the antialias quality to 0 (off), 1 (low, 2x), 2 (med,
            4x) or 3 (high, 8x or 6x). This will antialias polygons and
            textures in addition to lines.

        -S <session_label>
            Sets the flipbook session label, so that flipbook images
            will be routed to the flipbook with that label. If no
            flipbook exists with that label, once will be started.

        -v <pattern>
            Only objects whose names match <pattern> appear in the
            render. Default is "*".

        -t visible|geo|not_geo|all


        -M
            Flipbook to MPlay in addition to any files specificed.

        -m <frames> <bias> <shutter>
            Flipbook with motion blur, by blending <num_frames>
            subframes together. <bias> specifies if the subframes
            rendered are before (-1), centered about (0) or after (1)
            the specified render frame. <shutter> specifies the camera
            shutter time (or, the portion of a frame that the subframes
            are sampled over). If zero, the value from the camera
            attached to the viewport will be used.

        -d <quality> <focus_length> <aperture> <fstop>
            Flipbook with depth of field, by blending <quality>
            subframes together, jittered about the camera's circle of
            confusion. Increasing the quality improves the blur, at the
            expense of rendering time. The <focus_length>, <aperture>
            and <fstop> parameters specify the camera values needed to
            determine the depth of field (defaults 10, 41.4124 and 22).
            If any of these parameters are zero, the value from the
            camera attached to the viewport will be used.

        -k
            Render only frames at which currently scoped channels have
            keys.

        -A
            Append the rendered frames to the existing sequence (frame
            numbers will no longer correspond to the images).

        -I
            Initialize simulation operators (POPs, DOPs, Spring SOPs)
            before creating the flipbook. This is useful to flipbook
            simulations that are not cached, and therefore may not
            appear correctly in the flipbook if the current frame is
            later than the frames being flipbooked.

    EXAMPLES

      > viewwrite -M -f 1 10 Build.panetab1.world.persp1
        Render frames 1 to 10 to a flipbook.

      > viewwrite -f 1 10 Build.panetab1.world.persp1 '$F.jpg'

        Render frames 1 to 10 to disk files. Single quotes protect the
        $F variable from being expanded when the command is entered.

vopforcecompile

    Forces a VOP Network to compile its code.

    USAGE
      vopforcecompile <vop_node>

    <vop_node> can be either a VOP node or a VOPNET node. If you specify
    a VOP node, the command will use its enclosing VOPNET. The VOPNET is
    forced to generate its code, and then compile that code. Any compile
    errors will be reported as warnings on the VOP nodes. This is useful
    for testing the validity of code generated by a VOP Network without
    having to start a render or use the Shader View.

vopwritevfl

    Writes code generated from a VOP network to a file.

    USAGE
      vopwritevfl [-s] [-c <context_name>] <vop_node> <vfl_file>

    <vop_node> is a node path to a VOP node, a VOPNET node, or a SHOP
    containing a vop network.

    <vfl_file> is a file path for the generated VEX source code.

    OPTIONS


        -s
            (Skip) Do not write the file header. The file header is a
            comment that contains information about the file name,
            original node name from which the code was generated, and a
            time stamp at which the code was written out.

        -c <context_name>
            The name of the shader context for the code. This option
            applies to nodes such as the Material Shader Builder which
            can generate code for multiple context types.

            For example, a Material network might contain both surface
            and displacement shaders, so you must specify which type of
            shader code to generate using this command:

          > vopwritevfl /shop/vopmaterial1 -c surface

            For single-context nodes, this argument is ignored.

            For VEX materials, possible values are surface,
            displacement, light, shadow, fog, image3d, photon, or cvex.

            For RSL materials, possible values are surface,
            displacement, light, volume, or imager.

    EXAMPLES

      > vopwritevfl /vex/surface1 $HIH/vex/Surface/surface1.vfl
        Write the surface1 VFL code to the proper VEX subdirectory for
        VEX Surface shaders.

      > vopwritevfl /shop/vopmaterial1 -s -c displacement $HOME/disp.vfl

        Write the displacement shader vfl code provided by the vop
        material, and skip the file header comment.

while

    Loops through a block of commands while a condition is true.

    USAGE
      while (<condition>) ... end

    The while statement tests <condition> and if it's true, loops over
    the instructions between the while and end statements, then repeats.

    EXAMPLES

      > set i = 0
      > while ( $i < 10 )
      >     set i = `$i+1`
      >     echo $i
      > end

    RELATED

      * for

      * foreach

