= FAQs =

"""Answers to frequently asked questions."""


@faqs
#filtered: yes

== General FAQs == (general)

=== All Platforms === (general_all)

:: Do I need a license to run HQueue?
    #id: hqueue_licensing

    No.  HQueue itself does not require a license.

    However HQueue render and simulation jobs launch Houdini and Mantra
    so the client machines require access to the appropriate licenses
    in order to run those applications.

:: What are the system requirements?
    #id: system_requirements

    The HQueue Server can run on macOS, Windows and Linux.
    The server machine should have at least 2 CPUs and 4GB of RAM.
    It should also have a decent network card to handle network traffic
    from client machines and other observers.

    The HQueue Client has the same system requirements as Houdini.
    See [Houdini System Requirements|https://www.sidefx.com/Support/system-requirements/].

:: What ports does HQueue use?
    #id: ports

    The HQueue Server listens for incoming connections on port 5000.

    The HQueue Clients listen for incoming connections on port 5001.

    These ports must be opened in any local firewalls in order for the server
    and clients to communicate with each other.

:: Can I add the HQueue Server machine as a client to the farm?
    #id: add_server_as_client

    Yes.  It is possible to add the HQueue Server machine as a client machine
    to the farm.

    This is recommended for mini farms consisting of less than 10 client
    machines.

    For larger farms a dedicated server machine is recommended since job
    processing can take away hardware resources (i.e. CPU, memory) from the
    HQueue Server.

:: How do I register a network folder with HQueue?
    #id: register_network_folder

    See the instructions in the [installation guide|gettingstarted].

    If your farm needs to support a mix of macOS, Windows and Linux machines then you need to set different groups of `hqserver.sharedNetwork.*` keys in the HQueue Server configuration file.  For details on which keys to set, then see the OS-specific "Setting up a farm" links listed above.

:: How do I submit render or simulation jobs to HQueue?
    #id: submit_jobs

    See [How to Submit Jobs|submittingjobs].

:: What is $HQROOT?
    #id: hqroot

    `$HQROOT` is a variable that exists in the environment of a running job.
    It maps to a folder path that represents the network folder that is
    registered on HQueue.  Its value depends on the OS of the client machine
    running the job.

    :platform:Mac
      `$HQROOT` translates to the value stored in the
      `hqserver.sharedNetwork.mount.macosx` key in the HQueue Server
      configuration file. 

      For example, if the configuration file contains this line:
      {{{
	hqserver.sharedNetwork.mount.macosx = /Volumes/myShare
      }}}

      then `$HQROOT` translates to `/Volumes/myShare` on macOS machines.

    :platform:Windows
      `$HQROOT` translates to the values stored in the
      `hqserver.sharedNetwork.host` and `hqserver.sharedNetwork.path.windows`
      keys in the HQueue Server configuration file. 

      For example, if the configuration file contains these lines:
      {{{
	hqserver.sharedNetwork.host = myServer
	hqserver.sharedNetwork.path.windows = myShare
      }}}

      then `$HQROOT` translates to `\\myServer\myShare` on Windows machines.

    :platform:Linux
      `$HQROOT` translates to the value stored in the
      `hqserver.sharedNetwork.mount.linux` key in the HQueue Server
      configuration file. 

      For example, if the configuration file contains this line:
      {{{
	hqserver.sharedNetwork.mount.linux = /mnt/myShare
      }}}

      then `$HQROOT` translates to `/mnt/myShare` on Linux machines.


    `$HQROOT` can be used in any file or directory path parameter in
    HQueue Render and Simulation ROPs.  For example, it can be used in the
    `Target HFS` parameter to specify a copy of Houdini that is installed
    in the network folder.

:: What is $HQCLIENTARCH?
    #id: hqclientarch

    `$HQCLIENTARCH` is a variable that exists in the environment of a running
    job.  It maps to a string representing the platform of the client machine
    running the job.

    :platform:Mac
      `$HQCLIENTARCH` translates to `macosx-x86_64` on macOS machines.

    :platform:Windows
      `$HQCLIENTARCH` translates to `windows-x86_64` on Window machines.

    :platform:Linux
      `$HQCLIENTARCH` translates to `linux-x86_64` on Linux machines.

    `$HQCLIENTARCH` is used by the `Target HFS` parameter in HQueue Render and
    Simulation ROPs.  It allows users to specify a platform-independent path to
    a platform-dependent Houdin installation.  Therefore, it is only useful for
    farms that have a mix of macOS, Windows and Linux client machines


=== macOS === (general_macosx)

:: How do I restart the HQueue Server?
    #id: restart_server_macosx

    See how to restart on the [configuration page|configuration].

:: How do I restart the HQueue Client on a client machine?
    #id: restart_client_macosx

    See how to restart on the [configuration page|configuration].

:: How do I add a macOS client machine to the farm?
    #id: add_client_macosx

    See the _Add a client machine_ step in the
    [Setting up a farm on macOS|/hqueue/gettingstarted#farm_setup_macosx]
    instructions of the Getting Started guide.

:: How do I install a copy of Houdini to a location in the network folder?
    #id: install_houdini_network_folder_macosx

    To install Houdini to a location in the network folder:
    # First download and install Houdini locally on a client.
    # After installation, open a Terminal app and type:
      {{{
	#!bash

	# Copy the Houdini distro to the networkfolder.
	# NOTE: This assumes that the network folder is mounted at
	# /Volumes/myShare and that Houdini is to be installed in the standard
	# "houdini_distros" folder.
        cp -a /Applications/Houdini/HoudiniX.Y.ZZZ /Volumes/myShare/houdini_distros/.

	# Create a non-versioned symbolic link to the Houdini distro.
	# NOTE: Houdini render and simulation jobs by default look for Houdini
	# at "$HQROOT/houdini_distros/hfs.$HQCLIENTARCH" where $HQROOT maps to
	# the network folder mount point and $HQCLIENTARCH maps to
	# "macosx-x86_64" for macOS machines.
	cd /Volumes/myShare/houdini_distros
	rm -f hfs.macosx-x86_64
	ln -sf HoudiniX.Y.ZZZ/Frameworks/Houdini.framework/Versions/Current/Resources hfs.macosx-x86_64
    }}}

:: How do I modify the HQueue Client to run with a different user account?
    #id: change_client_user_account_macosx

    To change the HQueue Client's user account:

    - Open `/Library/LaunchDaemons/com.sidefx.hqclient.plist` in a text editor.
    - Locate this line:
    {{{
    #!xml
        <string>hquser</string>
    }}}

    and replace it with:
    {{{
    #!xml
        <string>MyUser</string>
    }}}

    where `MyUser` is the username of the desired user account.
    - Save the changes to the file.
    - Then run these commands in a terminal:
    {{{
    #!bash
    # Stop the HQueue Client service.
    sudo launchctl unload /Library/LaunchDaemons/com.sidefx.hqclient.plist

    # Change ownership to MyUser for the HQueue Client files.
    sudo chown -R MyUser /Library/HQClient
    sudo chown -R MyUser /Library/Logs/HQClient

    # Restart the HQueue Client service.
    sudo launchctl load /Library/LaunchDaemons/com.sidefx.hqclient.plist
    }}}

:: How do I uninstall the HQueue Client?
    #id: uninstall_client_macosx

    See [uninstalling clients|uninstall].

:: How do I uninstall the HQueue Server?
    #id: uninstall_server_macosx

    See [uninstalling the server|uninstall].


=== Windows === (general_windows)
:: How do I restart the HQueue Server?
    #id: restart_server_windows

    See how to restart on the [configuration page|configuration].

:: How do I restart the HQueue Client on a client machine?
    #id: restart_client_windows

    See how to restart on the [configuration page|configuration].

:: How do I add a Windows client machine to the farm?
    #id: add_client_windows

    See the _Add a client machine_ step in the
    [Setting up a farm on Windows|/hqueue/gettingstarted#farm_setup_windows]
    instructions of the Getting Started guide.

:: How do I install a copy of Houdini to a location in the network folder?
    #id: install_houdini_network_folder_windows

    To install Houdini to a location in the network folder:
    # Download the Houdini installer.
    # Open a Windows command prompt and type:
      {{{
        #!winbatch

	# Run the Houdini installer in silent mode to install a copy onto the
	# network folder.
	#
	# NOTE: This assumes that the network folder is mapped at H: and that
	# Houdini is to be intalled in the standard "houdini_distros" folder.
	#
	# NOTE: HQueue render and simulation jobs by default look for Houdini
	# at "$HQROOT/houdini_distros/hfs.$HQCLIENTARCH" where $HQROOT maps to
	# the network folder and $HQCLIENTARCH maps to "windows-x86_64" for
	# Windows machines.
        start /WAIT houdini-X.Y.ZZZ-win64-vc141.exe /S /MainApp=Yes \
	    /InstallDir=H:\houdini_distros\hfs.windows-x86_64 \
	    /ApprenticeLicensing=No /DesktopIcon=No /FileAssociations=No \
	    /HoudiniServer=No /HQueueServer=No /HQueueClient=No \
	    /IndustryFileAssociations=No /LicenseServer=No /Registry=No \
	    /StartMenu=No
    }}}

:: How do I modify the HQueue Client to run with a different user account?
    #id: change_client_user_account_windows

    To change the HQueue Client's user account you need to change the logon
    account on the `HQueueClient` service.

    To do that:
    # Open the Windows Services window.  
      i.e.  _Control Panel -> Administrative Tools -> Services_.
    # Locate the `HQueueClient` service in the services list.  RMB-click
      the service and choose Properties.
    # In the Properties dialog select the `Log On` tab and then select the
      "This account:" radio button.  Change the user account and password to
      your Windows account and password.  Click `OK` to save the changes and
      close the dialog.
    # RMB-click the HQueue Client service again and select Restart to
      restart the service.

:: How do I uninstall the HQueue Client?
    #id: uninstall_client_windows

    See [uninstalling clients|uninstall].

:: How do I uninstall the HQueue Server?
    #id: uninstall_server_windows

    See [uninstalling the server|uninstall]


=== Linux === (general_linux)

:: How do I restart the HQueue Server?
    #id: restart_server_linux

    See how to restart on the [configuration page|configuration].

:: How do I restart the HQueue Client on a client machine?
    #id: restart_client_linux

    See how to restart on the [configuration page|configuration].

:: How do I add a Linux client machine to the farm?
    #id: add_client_linux

    See the _Add a client machine_ step in [Setting up a farm on Linux|/hqueue/gettingstarted#farm_setup_linux].

    Alternatively, you can [add Linux client machines|managingclients] from the HQueue web
    interface.

:: How do I install a copy of Houdini to a location in the network folder?
    #id: install_houdini_network_folder_linux

    To install Houdini to a location in the network folder:
    # First download the Houdini installer tarball.
    # After installation, open a terminal and type:
      {{{
      #!sh
      tar zxf houdini-X.Y.ZZZ-linux_x86_64_gcc6.3.tar.gz
      cd houdini-X.Y.ZZZ-linux_x86_64_gcc6.3

      # Run the Houdini installer in silent mode to install a copy onto the
      # network folder.  
      #
      # NOTE: This assumes that the network folder is mounted at /mnt/myShare
      # and that Houdini is to be intalled in the standard "houdini_distros"
      # folder.
      ./houdini.install \
	  --no-menus \
	  --no-license \
	  --no-install-bin-symlink \
          --no-install-hfs-symlink \
	  --make-dir /mnt/myShare/houdini_distros/hfsX.Y.ZZZ-linux-x86_64

      # Create a non-versioned symbolic link to the Houdini installation.
      #
      # NOTE: HQueue render and simulation jobs by default look for Houdini
      # at "$HQROOT/houdini_distros/hfs.$HQCLIENTARCH" where $HQROOT maps to
      # the network folder and $HQCLIENTARCH maps to "linux-x86_64" for
      # Linux machines.
      cd /mnt/myShare/houdini_distros
      ln -sf hfsX.Y.ZZZ-linux-x86_64 hfs.linux-x86_64
    }}}

:: How do I uninstall the HQueue Client?
    #id: uninstall_client_linux

    See [uninstalling clients|uninstall].

:: How do I uninstall the HQueue Server?
    #id: uninstall_server_linux

    See [uninstalling the server|uninstall]


== Troubleshooting FAQs == (troubleshooting_faqs)

=== All Platforms === (troubleshooting_all)

:: HQueue becomes slow after adding X number of client machines to the farm.
    #id: slow_server_after_adding_clients

    If HQueue becomes slow after adding a large number of client machines then
    it is possible that the server machine is unable to handle the amount of
    network traffic on the farm.  Adding a redundant network card (NIC) to the
    server machine can help handle network bandwidth and bring HQueue back to a
    more responsive state.

:: My job is in the `abandoned` state
    #id: job_abandoned

    If a job is marked as `abandoned` and it stays `abandoned` then there
    are a couple of possible causes:

    # The HQueue Client machine assigned to the job was terminated.
      In this case, restart the HQueue Client and reschedule the `abandoned`
      job.

    # The HQueue Client machine assigned to the job is no longer able
      to connect to the HQueue Server.  In this case, check if network
      connections from the client machine to the server are possible.  This can
      easily be tested by opening a web browser on the client machine and
      navigating to the HQueue Server URL, `http://serverMachine:5000`.

      Once networking connection issues are resolved the HQueue Client will be
      able to contact the HQueue Server and the job will move out of the
      `abandoned` state.


:: My job is jumping between `abandoned` and `running` states
    #id: job_jumps_between_abandoned_and_running

    If a job jumps between the `abandoned` and the `running` states then it is
    likely that the client machine assigned to the job has multiple HQueue
    Clients running and conflicting with each other.

    To fix this error kill all HQueue Client processes on the client machine
    and restart the HQueue Client.

    :platform:Mac
      See this [FAQ|/hqueue/faqs#multiple_clients_macosx] for macOS machines.

    :platform:Windows
      See this [FAQ|/hqueue/faqs#multiple_clients_windows] for Windows machines.

    :platform:Linux
      See this [FAQ|/hqueue/faqs#multiple_clients_linux] for Linux machines.

:: Restarting a client machine from the web interface fails with "Invalid username or password".
    #id: invalid_username_and_password_client

    NOTE:
      This FAQ only applies to macOS and Linux client machines.
      Restarting from the web interface is not possible for Windows
      client machines.

    HQueue requires a valid username and password in order to remotely connect
    to the client machine and restart the HQueue Client.

    To fix an "Invalid username or password" error:
    # Go to the Clients page on the web interface and click on the client
      machine name to view the machine's details.
    # On the next page, click on `Set Username and Password` inside
      the `Remote Login` section.
    # Set the `Username` and `Password` fields to the username and password
      of the user account that runs the HQueue Client on the client machine.
    # Click `Save` to complete setting the registered username and password.


=== macOS === (troubleshooting_macosx)

:: Adding a client machine through the web interface fails with "Connection Refused".
    #id: connection_refused_add_client_macosx

    HQueue needs to remotely connect to the client machine in order to install
    the HQueue Client.

    If adding a client machine fails with a "Connection Refused" error then
    check the following:

    - The username and password entered in the `Admin. Username` and `Admin.
      Password` fields are correct.  Alternatively, check that the username and
      password in the `Username` and `Password` fields (if enabled) are
      correct.

    - Check that remote login is enabled on the machine.
      To do that, open the macOS System Preferences and click on `Sharing`.
      Then look for `Remote Login` in the services list and ensure
      that it is checked on.  You may need to also select `Remote Login`
      and then choose to allow access for `All users` if you continue
      to experience "Connection Refused" errors.

:: My job fails with a "Permission denied" error when it tries to access files from the network folder.
    #id: permission_denied_job_macosx

    A "Permission denied" error indicates that the HQueue Client, which runs
    with a generic `hquser` user account,  does not have permission to access
    the network folder.

    To fix this error, change the user account running the HQueue Client to
    a macOS user account that has access to the network folder.  This must be
    done on the client machine that failed the job.  For details,
    see this [FAQ|/hqueue/faqs#change_client_user_account_macosx].

:: Multiple HQueue Clients are running on a client machine.
    #id: multiple_clients_macosx

    NOTE:
      Only one HQueue Client listening on port 5001 can run on a machine.

    If multiple HQueue Clients are running then do the following:
    # *Stop the HQueue Client*
        Open a Terminal app and type the following:
        {{{
	  #!bash
	  sudo launchctl unload /Library/LaunchDaemons/com.sidefx.hqclient.plist
        }}}
	  
    # *Kill additional HQueue Client processes*
        In a terminal, list the additional HQueue Client processes with this
        command:
	{{{
	  #!bash
	  ps -ef | grep hqnode.py
	}}}

	NOTE:
	  HQueue Client processes can be identified by the `hqnode.py`
	  Python script file.

	The command output will show the ids of the processes, typically in the
	2nd column.

        Then kill the HQueue Client processes by their ids by running this
        terminal command:
	{{{
	  #!bash
	  killall -9 <process_id1> <process_id2> ...
	}}}
    # *Restart the HQueue Client*
        Open a Terminal app and type the following:
        {{{
	  #!bash
	  sudo launchctl load /Library/LaunchDaemons/com.sidefx.hqclient.plist
	}}}


=== Windows === (troubleshooting_windows)

:: My job fails with an "Access is denied" error when it tries to access files from the network folder.
    #id: access_is_denied_job_windows

    An "Access is denied" error indicates that the HQueue Client does not
    have permission to access the network folder.

    To fix this error, change the user account running the HQueue Client to a
    Windows user account that has access to the network folder.  This must be
    done on the client machine that failed the job.  For details, see this
    [FAQ|/hqueue/faqs#change_client_user_account_windows].

:: My job fails with a "Cannot find file" error when loading a .hip file from the network folder.
    #id: cannot_find_hip_file_windows

    A "Cannot find file" error can indicate that the HQueue Client is unable
    to see the network folder.

    To fix this error, change the user account running the HQueue Client to a
    Windows user account that has access to the network folder.  This must be
    done on the client machine that failed the job.  For details, see this
    [FAQ|/hqueue/faqs#change_client_user_account_windows].

:: My job fails to access files from my network access storage (NAS) device.
    #id: no_nas_access_windows

    HQueue Clients on Windows typically access network files using _Universal
    Naming Convention (UNC)_ paths instead of mapped drive letters.  For
    example, HQueue Clients access file paths such as
    `\\myServer\myShare\test.hip` instead of `X:\test.hip`.  This occurs
    because HQueue Clients run as services which generally do not have access
    to mapped drive letters.

    However some NAS devices do not provide UNC paths and can only be accessed
    by drive letters.  In this scenario HQueue jobs fail when accessing network
    files on these devices.

    To fix these failures you can instruct HQueue to use mapped drive letters:
    # Go to the HQueue Server machine and open `C:/HQueueServer/hqserver.ini`
      in a text editor.
    # Look for the `hqserver.sharedNetwork.path.windows` key and set it
      to an empty string.

      For example:
      {{{
          hqserver.sharedNetwork.path.windows =
      }}}
    # Save the changes to the file.
    # Then restart the HQueue Server.  See this
      [FAQ|/hqueue/faqs#restart_server_windows] for instructions.
    # Then restart the HQueue Clients.  See this
      [FAQ|/hqueue/faqs#restart_client_windows] for instructions.


:: Multiple HQueue Clients are running on a client machine.
    #id: multiple_clients_windows

    NOTE:
      Only one HQueue Client listening on port 5001 can run on a machine.

    If multiple HQueue Clients are running then do the following:
    # *Stop the HQueue Client*
	Go to the client machine and open the Windows Services window
	(_Control Panel -> Administrative Tools -> Services_).
	Then locate the `HQueueClient` service in the services list, RMB-click
	it and choose `Stop`.
	  
    # *Kill additional HQueue Client processes*
        Open the Windows Task Manager.
	In the Processes list, kill all `python*.exe` processes by RMB-clicking
	on each matching process and choosing `End task`.

    # *Restart the HQueue Client*
	In the Windows Services window, RMB-click the `HQueueClient` service
	and choose `Start`.


=== Linux === (troubleshooting_linux)

:: I rebooted a client machine and now it is no longer active on the farm.
    #id: client_inactive_after_reboot_linux

    On Linux, the HQueue Client is not setup as a registered daemon.
    This means that when the client machine is rebooted the HQueue Client
    does not automatically start up during the machine's boot sequence.

    You need to manually restart the HQueue Client after a reboot.
    See this [FAQ|/hqueue/faqs#restart_client_linux] for restarting
    the HQueue Client.

    Alternatively, you could configure the HQueue Client as a registered daemon
    so that it automatically starts up after a reboot.

    For example, if your Linux operating system supports `initd` to manage
    the initialization of daemons then you can run these terminal commands
    to register the HQueue Client:
    {{{
      #!bash
      sudo ln -sf /home/hquser/hqclient/hqclientd /etc/init.d/hqclientd
      sudo update-rc.d hqclientd defaults
    }}}

    Replace `/home/hquser/hqclient` with the location of the HQueue Client
    installation.

:: I rebooted the server machine and now HQueue is no longer available.
    #id: server_unavailable_after_reboot_linux

    On Linux, the HQueue Server is not setup as a registered daemon.
    This means that when the server machine is rebooted the HQueue Server
    does not automatically start up during the machine's boot sequence.

    You need to manually restart the HQueue Server after a reboot.
    See this [FAQ|/hqueue/faqs#restart_server_linux] for restarting
    the HQueue Server.

    Alternatively, you could configure the HQueue Server as a registered daemon
    so that it automatically starts up after a reboot.

    For example, if your Linux operating system supports `initd` to manage
    the initialization of daemons then you can run these terminal commands
    to register the HQueue Server:
    {{{
      #!bash
      sudo ln -sf /opt/hqueue/scripts/hqserverd /etc/init.d/hqserverd
      sudo update-rc.d hqserverd defaults
    }}}


:: Adding a client machine through the web interface fails with "Connection Refused".
    #id: connection_refused_add_client_linux

    HQueue needs to remotely connect to the client machine in order to install
    the HQueue Client.  HQueue uses SSH to perform the remote connection.

    If adding a client machine fails with a "Connection Refused" error then
    check the following:

    - The username and password entered in the `Admin. Username` and `Admin.
      Password` fields are correct.  Alternatively, check that the username and
      password in the `Username` and `Password` fields (if enabled) are
      correct.

    - Check that SSH connection to the machine is possible.  To test, try
      running `ssh username@machine` from a terminal on another machine.

      NOTE:
        If trying to connect with the `root` account then you may need to
	enable remote root login.  Some operating systems such as Red Hat and
	Ubuntu disable remote root login by default.

	To enable remote root login:
	- On the client machine, open `/etc/ssh/sshd_config` in a text editor.
	- Comment out any lines that begin with `PermitRootLogin`.
	- Then add this line to the end of the file:
	  {{{
	  PermitRootLogin yes
	  }}}
	- Save the changes to the file and then restart SSH with this
	  terminal command:
	  {{{
	  sudo service ssh reload
	  }}}
	  or if on Red Hat:
	  {{{
	  sudo service sshd restart
	  }}}

    * The client machine is behind a firewall which is dropping remote connections.
    * The user account specified does not have permission to remotely log into the client machine.  For example, on newer versions of Ubuntu, the root account does not have permission to SSH into the machine by default.
    * The SSH package is not installed on the client machine.


:: Adding a client machine through the web interface fails with "Could not execute install script.  sudo: sorry, you must have a tty to run sudo"
    #id: sudo_tty_add_client_linux

    HQueue needs to remotely connect to the client machine and run `sudo`
    commands to install the HQueue Client.

    This error indicates that the Linux operating system on the client machine
    is restricting execution of administrator-level commands from a remote
    connection.
    
    To bypass this restriction:
    - On the client machine, open `/etc/sudoers` in a text file.
    - Look for the line that reads `Default requiretty` and comment it out.
    - Save the changes to the file.

    NOTE:
      You can add the restriction back after adding the client machine
      to HQueue.

:: Multiple HQueue Clients are running on a client machine.
    #id: multiple_clients_linux

    NOTE:
      Only one HQueue Client listening on port 5001 can run on a machine.

    If multiple HQueue Clients are running then do the following:
    # *Stop the HQueue Client*
        Open a terminal and type the following:
        {{{
	  #!bash
	  cd /home/hquser/hqclient
	  ./scripts/hqclientd stop
        }}}

	Replace `/home/hquser/hqclient` with the location of the HQueue Client
	installation.
	  
    # *Kill additional HQueue Client processes*
        In a terminal, list the additional HQueue Client processes with this
        command:
	{{{
	  #!bash
	  ps -ef | grep hqnode.py
	}}}

	NOTE:
	  HQueue Client processes can be identified by the `hqnode.py`
	  Python script file.

	The command output will show the ids of the processes, typically in the
	2nd column.

        Then kill the HQueue Client processes by their ids by running this
        terminal command:
	{{{
	  #!bash
	  killall -9 <process_id1> <process_id2> ...
	}}}
    # *Restart the HQueue Client*
        In a terminal, type the following:
        {{{
	  #!bash
	    cd /home/hquser/hqclient
	    ./scripts/hqclientd start
	}}}
