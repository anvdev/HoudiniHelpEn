= pdg.GraphContext =
#type: pyclass
#cppname: PDG_GraphContext
#group: nodes

"""The top level object in a dependency graph."""

This object contains a reference to the graph and methods for running, pausing,
canceling, etc. the work in the graph.

WARNING:
    Do not use mutating methods, such as adding/removing nodes or setting
    parameter values, on a graph produced by a TOP network. The TOP network
    expects to manage the graph itself.


@methods

== Static methods ==

::`byName(name)` -> [Py:pdg.GraphContext]:
    #cppname: PDG_GraphContext::byName
    #mode: static

    Looks up a graph context object by name.

::`findFile(path)` -> `str`:
    #cppname: PDG_GraphContext::findFile
    #mode: static

    Find a file on the PDG search path and returns the absolute path to that
    file.

::`globFiles(ext, subdir)` -> `list` of `str`:
    #cppname: PDG_GraphContext::globFiles
    #mode: static

    Finds all files on the PDG search path with the specified extension, in
    the specified subdirectory.

::`globTypeFiles()` -> `list` of `str`:
    #cppname: PDG_GraphContext::globTypeFiles
    #mode: static

    Returns the list of all .py files on the search path.

::`names()` -> `list` of `str`:
    #cppname: PDG_GraphContext::names
    #mode: static

    Returns the names of all active graph contexts.

::`searchPath()` -> `list` of `str`:
    #cppname: PDG_GraphContext::searchPath
    #mode: static

    Returns the list of paths on the PDG search path.


== Instance methods ==

::`__init__(self, name="context")`:
    #cppname: PDG_GraphContext::PDG_GraphContext

    Constructs a new graph context. If name is not specified, the default name
    "context" is used instead. The name is automatically made unique.

    In TOPs, the graph context associated with a TOP network has the same name
    as the network object.

::`addDependency(self, type_name, node_name, dep_key)`:
    #cppname: PDG_GraphContext::addDependency

    Constructs an instance of the specified external dependency type and
    assigns it to the node.

::`addFileDependency(self, node_name, file_name)`:
    #cppname: PDG_GraphContext::addFileDependency

    Constructs a file dependency on the specified file name and assigns it to
    the node.

::`addNode(self, type_name, node_name="")` -> [Py:pdg.Node]:
    #cppname: PDG_GraphContext::addNode

    Constructs a node of the specified type and adds it to the graph. If the
    `node_name` argument is not specified, the node's name will be derived from
    the type name.

::`addScheduler(self, type_name, scheduler_name="")` -> [Py:pdg.SchedulerBase]:
    #cppname: PDG_GraphContext::addScheduler

    Constructs a scheduler of the specified type and adds it to the graph. If
    the `scheduler_name` argument is not specified, the scheduler's name will be
    derived from the type name.

::`addEventHandler(self, handle, filter=pdg.EventType.All)` -> [Py:pdg.EventHandler]:
    #cppname: PYPDG_GraphContext::addEventHandler

    Adds an event handle to the node, optional with a filter for the type of
    events to receive.

::`addParameter(self, node_name, port_name, port_label, port_tag, data_type, port_size)`
    #cppname: PYPDG_GraphContext::addParameter

    Adds a custom parameter to a node. The `tags` argument can be either a
    single `str` value or a `list` of `str` values and `data_type` should be a
    [Py:pdg.dataType]. All other arguments should be strings.

::`cancelCook(self)`:
    #cppname: PDG_GraphContext::cancelCook

    Cancels the current cook.

::`cleanTempDir(self, scheduler_name)`:
    #cppname: PDG_GraphContext::cleanTempDir

    Cleans the temp file directory for the specified scheduler.

::`cook(self, cook_options)`:
    #cppname: PDG_GraphContext::cook

    Cooks the graph context using the specified [Py:pdg.CookOptions].

::`cook(self, block, mode=pdg.cookType.Full, name="", ids=pdg.Filter())`:
    #cppname: PDG_GraphContext::cook

    Cooks the graph using individually specified cook parameters.

::`connect(self, src_node_name, src_port_name, dst_node_name, dst_port_name)`:
    #cppname: PDG_GraphContext::connect

    Connects a output port on the source node to an input port on the destination
    node.

::`connect(self, src_name, dst_name)`:
    #cppname: PDG_GraphContext::connect

    Connects a output port on the source node to an input port on the destination
    node. Ports are specified using the `nodename.portname` syntax.

::`delete(self, node_name)`:
    #cppname: PDG_GraphContext::delete

    Deletes a node from the graph.

::`deserializeWorkItemFromJSON(self, json_text)` -> [Py:pdg.WorkItem]:
    #cppname: PDG_GraphContext::deserializeWorkItemFromJSON

    Loads a work item from the standard PDG JSON format.

::`disconnect(self, src_node_name, src_port_name, dst_node_name, dst_port_name)`:
    #cppname: PDG_GraphContext::disconnect

    Disconnects a output port on the source node from an input port on the
    destination node.

::`disconnect(self, src_name, dst_name)`:
    #cppname: PDG_GraphContext::disconnect

    Disconnects a output port on the source node from an input port on the
    destination node. Ports are specified using the `nodename.portname` syntax.

::`pauseCook(self)`:
    #cppname: PDG_GraphContext::pauseCook

    Pauses the cook. Processes that have begun cooking will continue to cook,
    but no new jobs will be sent to schedulers. Work items and nodes can
    be dirtied during this time, and on the next cook the graph will resume
    with the changes made.

    NOTE:
	This is currently only supported using the Local Scheduler.

::`removeDependency(self, node_name, dep_name)`:
    #cppname: PDG_GraphContext::removeDependency

    Removes an external dependency from a node.

::`removeEventHandle(self, handler)`:
    #cppname: PDG_GraphContext::removeEventHandler

    Removes an event handler from the node.

::`renameNode(self, old_name, new_name)`:
    #cppname: PDG_GraphContext::renameNode

    Renames an node from `old_name` to `new_name`.

::`schedulerForName(self, scheduler_name)` -> [Py:pdg.SchedulerBase]:
    #cppname: PDG_GraphContext::schedulerForName

    Looks up a scheduler by name.

::`serializeWorkItemToJSON(self, work_item)` -> `str`:
    #cppname: PDG_GraphContext::serializeWorkItemToJSON

    Serializes the specified work item, its data and its inputs to a .json
    file.

::`setDefaultScheduler(self, scheduler_name)`:
    #cppname: PDG_GraphContext::setDefaultScheduler

    Sets the graph context's default scheduler

::`setExpression(self, node_name, port_name, expression, index)`:
    #cppname: PDG_GraphContext::setExpression

    Sets a Python expression on a node's parameter.

::`setExpressions(self, node-name, dict)`:
    #cppname: PDG_GraphContext:setExpressions

    Batch sets multiple port_name:expression pairs on the specified node.

::`setScheduler(self, node_name, scheduler_name)`:
    #cppname: PDG_GraphContext::setScheduler

    Sets a node's scheduler

::`setValue(self, node_name, port_name, expression, index)`:
    #cppname: PDG_GraphContext::setValue

    Sets a constant value on a node's parameter.

::`setValues(self, node-name, dict)`:
    #cppname: PDG_GraphContext:setValues

    Batch sets multiple port_name:value pairs on the specified node.

::`canceling` : `bool`:
    #cppname: PDG_GraphContext::canceling

    Set to `True` when the current cook is being canceled.

::`cookSet` : `list` of [Py:pdg.Node]:
    #cppname: PDG_GraphContext::cookSet

    The nodes involved in the current cook.

::`cooking` : `bool`:
    #cppname: PDG_GraphContext::cooking

    Set to `True` when the graph context is cooking.

::`defaultScheduler` : [Py:pdg.SchedulerBase]:
    #cppname: PDG_GraphContext::defaultScheduler

    The default scheduler for the graph context.

::`graph` : [Py:pdg.Graph]:
    #cppname: PDG_GraphContext::graph

    The node graph owned by the graph context.

::`name` : `str`:
    #cppname: PDG_GraphContext::name

    The name of the context.

::`schedulers` : `list` of [Py:pdg.SchedulerBase]:
    #cppname: PDG_GraphContext::schedulers

    The list of schedulers available in the context.



