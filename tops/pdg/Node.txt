= pdg.Node =
#type: pyclass
#cppname: PDG_Node
#superclass: NodeInterface
#group: nodes

"""Base class for dependency graph nodes."""

Note that this refers to _dependency graph nodes_, not Houdini network nodes.

Node objects have methods for accessing work items, dirtying and running the node,
and traversing the graph.


@methods

::`addEventHandler(self, handle, filter=pdg.EventType.All)` -> [Py:pdg.EventHandler]:
    #cppname: PYPDG_Node::addEventHandler

    Adds an event handler to the node, optionally with a filter for the type of
    events to receive.  The `filter` argument is a bitmask that should be the logical
    OR of the event types you wish to handle.  The `handler` should be a callable that
    accepts one argument of type [Py:pdg.Event].

::`cook(self, block)` -> `bool`:
    #cppname: PYPDG_Node::cook

    Cooks the node. Block determines if the cook should block the caller or
    if the cook should be async. Returns `True` on success.

::`cookError(self, message)`:
    #cppname: PDG_Node::cookError

    Issues a cook error on this node.

::`cookWarning(self, message)`:
    #cppname: PDG_Node::cookWarning

    Issues a cook warning on this node.

::`depthOfAncestor(self, other_node)` -> `int`:
    #cppname: PDG_Node::depthOfAncestor

    Returns the number of nodes between this node and another node, or -1 if
    they're not in the same tree.

::`dirty(self, remove_outputs)`:
    #cppname: PDG_Node::dirty

    Dirties the node and deletes all of its work items. If `remove_outputs` is
    `True`, the output files for the work items are deleted on disk.

::`injectStaticItems(self)` -> [Py:pdg.InjectBlock]:
    #cppname: PYPDG_Node::injectStaticItems

    Returns a context manager block for injecting static items. Used in a
    Python `with` statement.

::`removeEventHandler(self, handler)`:
    #cppname: PYPDG_Node::removeEventHandler

    Removes an event handler from the node.

::`removeAllEventHandlers(self)`:
    #cppname: PDG_EventEmitter::removeAllEventHandlers

    Removes all event handlers from the node.

::`resultData(self, localize)` -> `list` of `tuple`:
    #cppname: PDG_Node::resultData

    Returns the aggregate result data list for all items in the node, which
    consists of tuples of the form `(file, tag, checksum)`.

::`context` : [Py:pdg.GraphContext]:
    #cppname: PDG_Node::context

    The graph context that contains the node.

::`customId` : `int`:
    #cppname: PDG_Node::customId

    An application specific custom id. When used with TOPs, this is set to the
    Houdini node id of the TOP that owns this PDG node.

::`dependencies` : `list` of [Py:pdg.Dependency]:
    #cppname: PDG_Node::dependencies

    The list of  dependencies this node depends on.

::`depth` : `int`:
    #cppname: PDG_Node::depth

    The depth of the node in the graph.

::`isCooked` : `bool`:
    #cppname: PDG_Node::isCooked

    Set to `True` if the node is cooked.

::`loopDepth` : `int`:
    #cppname: PDG_Node::loopDepth

    The nested loop depth if this node is in a loop block, else -1.

::`name` : `str`:
    #cppname: PDG_Node::name

    The unique name for the node, within the [Py:pdg.Graph] that contains it.

::`nodeType` : [Py:pdg.nodeType]:
    #cppname: PDG_Node::nodeType

    The primary type of the node.

::`partitions` : `list` of [Py:pdg.WorkItem]:
    #cppname: PDG_Node::partitions

    The list of partitions stored on the node, if it is a partitioner.

::`scheduler` : [Py:pdg.SchedulerBase]:
    #cppname: PDG_Node::scheduler

    The node's custom scheduler, or the [Py:pdg.GraphContext]'s default
    scheduler if the node has no custom scheduler.

::`staticWrappers` : `list` of [Py:pdg.WorkItem]:
    #cppname: PDG_Node::staticWrappers

    The list of static wrappers on this node, which are a special internal item
    used for control flow.

::`type` : [Py:pdg.NodeCallbackType]:
    #cppname: PDG_Node::type

    The type object used to create the node.

::`workItems` : `list` of [Py:pdg.WorkItem]:
    #cppname: PDG_Node::allWorkItems

    The list of all regular work items on this node, both static and dynamic.
