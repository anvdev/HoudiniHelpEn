= pdg.TypeRegistry =
#type: pyclass
#class: PDG_TypeRegistry
#group: types
#tags: internal

"""Object containing registry of all custom node, work item, and scheduler types"""

To get the global registry, use:

{{{
#!python
reg = pdg.TypeRegistry.types()
}}}


@methods

== Static methods ==

::`types()` -> [Py:pdg.TypeRegistry]:
    #cppname: PDG_TypeRegistry::types
    #mode: static

    Returns the global type registry instance


== Instance methods ==

::`addExtensionTag(self, extension, tag)`:
    #cppname: PDG_TypeRegistry::addExtensionTag

    Adds a mapping from file extension to result data tag.

::`addParentTypes(self, type, type_names)`:
    #cppname: PDG_TypeRegistry::addParentTypes

    Marks the specified types as parents/convertible for the specified `type`.
    The `type` should be a [Py:pdg.BaseType] instance, and `type_names` is a
    `list` of `str` type names.

::`addTag(self, tag)`:
    #cppname: PDG_TypeRegistry::addTag

    Adds a tag without a corresponding file extension. The tag is added to the
    global list of result tags, but isn't added to any file extension -> tag
    mappings.

::`addTagViewer(self, tag, viewer)`:
    #cppname: PDG_TypeRegistry::addTagViewer

    Creates a mapping between the specified result data tag and the viewer
    application name, for example "mplay" or "gplay". The application will be
    used when opening results with the tag from the work item info panel.

::`extToTag(self, extension)` -> `str`:
    #cppname: PDG_TypeRegistry::extToTag

    Returns the result data tag for the specified file extension.

::`filteredTags(self, prefix)` -> `list` of `str`:
    #cppname: PDG_TypeRegistry::filteredTags

    Returns the list of tags with the specified prefix, for example "file/geo"
    or "file/image".

::`pathToTag(self, file_path)` -> `str`:
    #cppname: PDG_TypeRegistry::pathToTag

    Returns the result data tag for specified file path.

::`pathToViewer(self, file_path)` -> `str`:
    #cppname: PDG_TypeRegistry::pathToViewer

    Returns the viewer application name for the specified file path.

::`tagToViewer(self, tag)` -> `str`:
    #cppname: PDG_TypeRegistry::tagToViewer

    Returns the viewer application name for the specified result data tag.

::`registerModuleTypes(self, module, quiet=False)`:
    Registers custom types from the specified module.

::`registerDSOTypes(self, dso_path)`:
    #cppname: PDG_TypeRegistry::registerDSOTypes

    Loads C++ types from the specified shared library path.

::`registerNode(self, type_object, node_type, name=None, label=None, category=None, static_gen=False, sub_type=_pdg.nodeSubtype.Normal)` -> [Py:pdg.NodeCallbackType]:
    #cppname: PDG_TypeRegistery::registerNode

    Registers a custom node type. `type_object` should be a Python class object
    and `node_type` should be a [Py:pdg.nodeType].

    By default, the name and label will be set to the lower-cased Python class
    name and the category will be left empty. The `static_gen` flag indicates
    whether or not the node should prefer to generate static work items when
    it's work item generation parameter is set to `Automatic`.

::`registerPythonPath(self, path, update_tops)`:
    #cppname: PDG_TypeRegistry::registerPythonPath

    Loads registered types from a Python module at the specified path.

::`registerScheduler(self, type_object, name=None, label=None)` -> [Py:pdg.SchedulerType]:
    #cppname: PDG_TypeRegistry::registerScheduler

    Registers a custom scheduler type. `type_object` should be a Python class
    object. By default, the name and label will be set to the lower-cased Python
    class name.

::`registeredType(self, reg_type, name)` -> [Py:pdg.BaseType]:
    #cppname: PDG_TypeRegistry::registeredType

    Returns a PDG type object for the specified [Py:pdg.registeredType] and
    type name.

::`registerWorkItem(self, type_object, name=None, label=None)` -> [Py:pdg.WorkItemDataType]:
    #cppname: PDG_TypeRegistry::registerWorkItem

    Registers a custom work item type. `type_object` should be a Python class
    object. By default, the name and label will be set to the lower-cased Python
    class name.

::`setDefaultWorkItem(self, item_type)`:
    #cppname: PDG_TypeRegistery::setDefaultWorkItem

    Sets the default work item type to the specified [Py:pdg.WorkItemType]
    object.

::`tags` -> `list` of `str`:
    #cppname: PDG_TypeRegistry::tags

    The global list of all result data tag

::`typeNames(self, reg_type)` -> `list` of `str`:
    #cppname: PDG_TypeRegistery::typeNames

    The list of type names for the specified [Py:pdg.registeredType].
