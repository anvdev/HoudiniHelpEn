= pdg.TypeRegistry =
#type: pyclass
#class: PDG_TypeRegistry
#group: types
#tags: internal

"""Object containing registry of all custom node, work item, and scheduler types"""

To get the global registry, use:

{{{
#!python
reg = pdg.TypeRegistry.types()
}}}


@methods

== Static methods ==

::`types()` -> [Py:pdg.TypeRegistry]:
    #cppname: PDG_TypeRegistry::types
    #mode: static

    Returns the global type registry instance


== Instance methods ==

::`addExtensionTag(self, extension, tag)`:
    #cppname: PDG_TypeRegistry::addExtensionTag

    Adds a mapping from file extension to result data tag.

::`addParentTypes(self, type, type_names)`:
    #cppname: PDG_TypeRegistry::addParentTypes

    Marks the specified types as parents/convertible for the specified `type`.
    The `type` should be a [Py:pdg.BaseType] instance, and `type_names` is a
    `list` of `str` type names.

::`registerModuleTypes(self, module, quiet=False)`:
    Registers custom types from the specified module.

::`registerDSOTypes(self, dso_path)`:
    #cppname: PDG_TypeRegistry::registerDSOTypes

    Loads C++ types from the specified shared library path.

::`registerNode(self, type_object, node_type, name=None, label=None, category=None, static_gen=False, sub_type=_pdg.nodeSubtype.Normal)` -> [Py:pdg.NodeCallbackType]:
    #cppname: PDG_TypeRegistery::registerNode

    Registers a custom node type. `type_object` should be a Python class object
    and `node_type` should be a [Py:pdg.nodeType].

    By default, the name and label will be set to the lower-cased Python class
    name and the category will be left empty. The `static_gen` flag indicates
    whether or not the node should prefer to generate static work items when
    it's work item generation parameter is set to `Automatic`.

::`registerPythonPath(self, path, update_tops)`:
    #cppname: PDG_TypeRegistry::registerPythonPath

    Loads registered types from a Python module at the specified path.

::`registerScheduler(self, type_object, name=None, label=None)` -> [Py:pdg.SchedulerType]:
    #cppname: PDG_TypeRegistry::registerScheduler

    Registers a custom scheduler type. `type_object` should be a Python class
    object. By default, the name and label will be set to the lower-cased Python
    class name.

::`registeredType(self, reg_type, name)` -> [Py:pdg.BaseType]:
    #cppname: PDG_TypeRegistry::registeredType

    Returns a PDG type object for the specified [Py:pdg.registeredType] and
    type name.

::`registerWorkItem(self, type_object, name=None, label=None)` -> [Py:pdg.WorkItemDataType]:
    #cppname: PDG_TypeRegistry::registerWorkItem

    Registers a custom work item type. `type_object` should be a Python class
    object. By default, the name and label will be set to the lower-cased Python
    class name.

::`setDefaultWorkItem(self, item_type)`:
    #cppname: PDG_TypeRegistery::setDefaultWorkItem

    Sets the default work item type to the specified [Py:pdg.WorkItemType]
    object.

::`typeNames(self, reg_type)` -> `list` of `str`:
    #cppname: PDG_TypeRegistery::typeNames

    The list of type names for the specified [Py:pdg.registeredType].
