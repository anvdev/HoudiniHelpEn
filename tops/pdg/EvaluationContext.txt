= pdg.EvaluationContext =
#type: pymodule
#cppname: PDG_EvaluationContext
#group: expressions

"""A module with global functions that operate on the thread-local evaluation context"""


@functions

::`evaluateCode(code, multiline)` -> `object`:
    #cppname: PDG_EvaluationContext::evaluateCodeString

    Evaluates a snippet of Python code in the thread local context. If `multiline`
    is set to `True`, the code is interpreted as Python statements instead of a
    single-line expression.

::`get()` -> `pdg.EvaluationContext`:
    #cppname: PDG_EvaluationContext::get
    Returns the thread-local evaluation context object.

::`localDict()` -> `dict`:
    #cppname: PDG_EvaluationContext::localDict
    Returns the thread-local Python variable dictionary.

::`setDict(vars)`:
    #cppname: PDG_EvaluationContext::setDict
    Sets the thread local variable dictionary for Python expressions.

::`setGlobalWorkItem(work_item)`:
    #cppname: PDG_EvaluationContext::setGlobalWorkItem
    Sets the global work item across all threads.

::`workItem()` -> [Py:pdg.WorkItem]:
    #cppname: PDG_EvaluationContext::activeWorkItem
    Returns the thread local active work item.

::`workItemDep()` -> [Py:pdg.WorkItem]:
    #cppname: PDG_EvaluationContext::activeWorkItem
    Returns the thread local active work item, and creates a channel dependency
    on the work item if this function is called from a Houdini channel.
