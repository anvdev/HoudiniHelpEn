= pdg.Graph =
#type: pyclass
#cppname: PDG_Graph
#group: nodes

"""Represents the dependency graph within the GraphContext object."""

You can use the methods on this object to query the graph structure and find work items.


@methods

::`dependencyForKey(self, key)` -> [Py:pdg.Dependency]:
    #cppname: PDG_Graph::dependencyForKey

    Returns an external dependency object for the specified key.

::`dependencyGraph(self, expand_partitions)` -> `tuple` of `dict`:
    #cppname: PDG_Graph::dependencyGraph

    Returns the entire static dependency graph, represented as a tuple containing
    a map of work item->dependencies, work item->dependents and a list of items
    currently ready to cook.

    The `expand_partitions` argument configures whether partitions should be
    expanded into a flat dependency graph containing only regular work items, or
    kept in the tuple.

::`node(self, name)` -> [Py:pdg.Node]:
    #cppname: PDG_Graph::node

    Looks up a node by name.

::`nodeGlobal(self, id)` -> [Py:pdg.Node]:
    #cppname: PDG_Graph::nodeGlobal

    Looks up a node using it's custom id.

::`nodePort(self, node_name, port_name)` -> [Py:pdg.Port]:
    #cppname: PDG_Graph::nodePort

    Looks up a port object using a node and port name.

::`nodePort(self, full_name)` -> [Py:pdg.Port]:
    #cppname: PDG_Graph::nodePort

    Loops up a port object using the concatenated node port name, with a dot
    separator. For example, `processor.command`.

::`nodes(self)` -> `list` of [Py:pdg.Node]:
    #cppname: PDG_Graph::nodes

    Returns the list of all nodes in the graph.

::`workItemById(self, id)` -> [Py:pdg.WorkItem]:
    #cppname: PDG_Graph::workItemById

    Returns the work item with the specified unique id, or `None` if no item
    exists with that id.

::`workItemByName(self, name)` -> [Py:pdg.WorkItem]:
    #cppname: PDG_Graph::workItemByName

    Returns the work item with the specified unique name, or `None` if no item
    exists with that name.
