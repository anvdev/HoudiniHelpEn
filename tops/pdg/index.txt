= pdg =

#type: pypackage
#py_anchor: pdg

"""The classes and functions in the Python pdg package for working with dependency graphs."""


@functions Package-level functions
#filtered: no

The following top-level attribute functions are designed to be used in Python expressions. You can use `pdg.workItem()` to get the current work item object in a Python expression. The top-level function `floatData(work_item, "foo", 0)` is equivalent to `work_item.data.floatData("foo", 0)`, which is equivalent to the HScript expression `@foo`.


== Floats ==
#display: pull left

::`floatData(work_item, attribute_name, index=0)` -> `float`:
    Returns the <<index>>th float value under the attribute name on the given [Py:pdg.WorkItem] object.

::`floatDataArray(work_item, attribute_name)` -> `list` of `float`:
    Returns the full list of float values under the attribute name on the given [Py:pdg.WorkItem] object.

::`hasFloatData(work_item, attribute_name)` -> `bool`:
    Returns True if the [Py:pdg.WorkItem] object has a float attribute with the given name.

== Integers ==
#display: pull left

::`intData(work_item, attribute_name, index=0)` -> `int`:
    Same as `floatData()` for integer attributes.

::`intDataArray(work_item, attribute_name)` -> `list` of `int`:
    Same as `floatDataArray()` for integer attributes.

::`hasIntData(work_item, attribute_name)` -> `bool`:
    Same as `hasFloatData()` for integer attributes.

== Strings ==
#display: pull left

::`strData(work_item, attribute_name, index=0)` -> `str`:
    Same as `floatData()` for string attributes.

::`strDataArray(work_item, attribute_name)` -> `list` of `str`:
    Same as `floatDataArray()` for string attributes.

::`hasStrData(work_item, attribute_name)` -> `bool`:
    Same as `hasFloatData()` for string attributes.

== Utilities ==
#display: pull left

::`input(index=None, tag=None, localize=False)` -> `list` or `str`:
    Returns the _input_ files of the current work item.

    This is intended to be used in Python expressions. The HScript expression equivalent is `@pdg_input`.

    The return type depends on the `index` keyword argument. If `index=None`, the function returns a list of input files. Otherwise, it returns the <<index>>th input file path.

::`resultData(work_item, tag, localized=False, as_list=False)` -> `list` or `str`:
    Returns output file(s) that have the given `tag` on the [Py:pdg.WorkItem] object.

    If `localized=True` then `__PDG_DIR__` tokens in the path will be localized to the current machine.

    The return type depends on the `as_list` keyword argument. If `as_list=False`, the function returns the file paths in a space-separated string. Otherwise it returns a list of path strings.

::`resultDataIndex(work_item, tag, index, localized=False)` -> `str`:
    Returns the <<index>>th output file that has the given `tag` on the [Py:pdg.WorkItem] object.

    If `localized=True` then `__PDG_DIR__` tokens in the path will be localized to the current machine.

::`hasResultData(work_item, tag)` -> `bool`:
    Returns `True` if the [Py:pdg.WorkItem] has any output files with the given `tag`.

== Expression functions ==
#display: pull left

::`workItem()` -> [Py:pdg.WorkItem]:
    This is intended to be used in Python expressions. Returns the current work item object.

::`kwargs(key=None)` -> `obj` or `dict`:
    This is intended to be used in Python expressions. Looks up a local variable from the expression evaluation context.

    The return type depends on the `key` keyword argument. If `key=None`, the function returns all local variables as a `dict`. Otherwise, it returns the value for the given `key`.


@subtopics API

:list:
    #query: (type:pyclass OR type:pyfunction OR type:pymodule) ANDNOT tags:internal
    #sortedby: title
    #groupedby: group
    #filter: type

