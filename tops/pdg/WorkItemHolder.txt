= pdg.WorkItemHolder =
#type: pyclass
#cppname: PDG_WorkItemHolder
#group: workitems

"""Container object for work items."""

A container object for construct new PDG work items, by passing a [Py:pdg.WorkItemOptions]
object or a key/value arguments to the `addWorkItem` method

@methods

::`addWorkItem(self, options=None, **kwargs)` -> [Py:pdg.WorkItem]:
    #cppname: PDG_WorkItemHolder::addWorkItem

    Constructs a new work item and adds it to the holder. This function can
    either take a [Py:pdg.WorkItemOptions] object, or a keyword arguments
    matching the supported values in the work item options object.

    For example:

    {{{
    #!python
    # Using keyword arguments
    item_holder.addWorkItem(name="example", index=5)

    # Using an options object
    options = pdg.WorkItemOptions()
    options.name = "otherexample"
    options.cloneResultData = True
    item_holder.addWorkItem(options)

    # Combination
    item_holder.addWorkItem(options, name='overridename')
    }}}

::`addDependency(self, child, parent)`:
    #cppname: PDG_WorkItemHolder::addDependency

    Used when this object is passed to a mapping callback on a node.
    Makes the `child` [Py:pdg.WorkItem] object depend on the `parent` work item object.

    TIP:
        The order of the arguments only matters when you're creating a dependency
        between two work items in the same node. Otherwise, the code will notice
        if you try to make an upstream item dependent on a downstream item, and
        flip the order for you.

::`isEmpty` : `bool`:
    #cppnname: PDG_WorkItemHolder::isEmpty

    `True` if the holder is empty, else `False`.

::`workItems` : `list` of [Py:pdg.WorkItem]:
    #cppname: PDG_WorkItemHolder::workItems

    The array of work items currently in the holder.
