= pdg.WorkItem =
#type: pyclass
#class: PDG_WorkItem
#group: workitems

"""A work item in the PDG graph"""

This class exposes ways to access information about a work item in PDG. Work
items can be looked up by name using the [Py:pdg.Graph#workItemByName]
method, or by id using the [Py:pdg.Graph#workItemById] method.

[Py:pdg.Node] objects also provide methods to access the work items owned by that
node.


@methods

::`addEnvironmentVar(self, str)`:
    #cppname: PDG_WorkItem::addEnvironmentVar

    Adds an environment variable to the work item's environment

::`addExpectedResultData(self, result, tag, own=True)`:
    #cppname: PDG_WorkItem::addExpectedResultData

    Adds an expected result file for the work item, with the specified tag. The
    optional `own` parameter indicates whether the work item owns the file,
    which is used when PDG deletes output files from disk.

::`addResultData(self, result, tag, checksum, own=True)`:
    #cppname: PDG_WorkItem::addResultData

    Adds an result file for the work item, with the specified tag and file
    checksum value. The optional `own` parameter indicates whether the work item
    owns the file, which is used when PDG deletes output files from disk.

::`clearEnvironment(self)`:
    #cppname: PDG_WorkItem::clearEnvironment

    Clears the work item's environment and stops it from inheriting variables
    from the parnet work item.

::`clearResultData(self)`:
    #cppname: PDG_WorkItem::clearResultData

    Clears all result files on the work item.

::`dirty(self, delete, remove_outputs)`:
    #cppname: PDG_WorkItem::dirty

    Dirties the work item, or deletes it if `delete` is set to `True`.
    If `remove_outputs` is `True`, then it will also delete the file results
    on disk generated by this work item.

::`envLookup(self, key)` -> `int`, `float`, or `str`:
    #cppname: PDG_WorkItem::envLookup

    Returns the value of an environment variable on the work item.

::`firstResultDataForTag(self, tag)` -> `str`:
    #cppname: PDG_WorkItem::firstResultDataForTag

    Returns the file path to the result for the specified tag.

::`hasDependency(self, work_item)` -> `bool`:
    #cppname: PDG_WorkItem::hasDependency

    Returns true if this work item depends on the other work item.

::`loopBegin(self, int)` -> [Py:pdg.WorkItem]:
    #cppname: PDG_WorkItem::loopBegin

    Returns the loop begin parent item at the given loop depth, or `None` if
    this item is not in a loop or the depth is out of bounds.

::`numericAttribute(self, str)` -> `int` or `float`:
    #cppname: PDG_WorkItem::numericAttribute

    Returns a attribute value for a given attribute string. This can be
    either an attribute name like `foo`, or a name and a component suffix like
    `foo.x` or `foo.2`.

::`resultDataForTag(self, tag)` -> `array` of `tuple`:
    #cppname: PDG_WorkItem::resultDataForTag

    Returns the result data entries for a specified tag. The results are
    returned as a `tuple` in the form `(file, tag, checksum)`.

::`serializeData(self)` -> `str`:
    #cppname: PDG_WorkItem::serializeData

    Serializes the work item's data to a string.

::`serializeDataToFile(self, filepath)`:
    #cppname: PDG_WorkItem::serializeDataToFile

    Serializes the work item's data to a file.

::`setCommand(self, command)`:
    #cppname: PDG_WorkItem::setCommand

    Sets the work item's command value to specified command string.

::`setFrame(self, frame, step=1.0)`:
    #cppname: PDG_WorkItem::setFrame

    Sets the frame, and optional the frame step size, for the work item.

::`stringAttribute(self, name)` -> `str`:
    #cppname: PDG_WorkItem::stringAttribute

    Looks up a string attribute value on the work item. This can be either a
    plain attribute name like `foo`, or a name and component suffix like
    `foo.x`.

::`updateResultData(self, index, file, tag, checksum, own)`:
    #cppname: PDG_WorkItem::updateResultData

    Updates the result data a given index.

::`baseName` : `str`:
    #cppname: PDG_WorkItem::baseName

    The base name of the work item, not necessarily unique

::`batchParent` : [Py:pdg.BatchWorkItem]:
    #cppname: PDG_WorkItem::batchParent

    The batch parent if this work item is in a batch, else `None`.

::`command` : `str`:
    #cppname: PDG_WorkItem::command

    The command string for the work item

::`cookDuration` : `int`:
    #cppname: PDG_WorkItem::cookDuration

    The cook duration performance stat for the work item, if it has cooked.

::`data` : [Py:pdg.WorkItemData]:
    #cppname: PDG_WorkItem::data

    The data object for the work item, which contains it attribute values.

::`dependencies` : `list` of [Py:pdg.WorkItem]:
    #cppname: PDG_WorkItem::dependencies

    The list of work items that this work item depends on.

::`dependents` : `list` of [Py:pdg.WorkItem]:
    #cppname: PDG_WorkItem::dependents

    The list of work items that depend on this work item.

::`environment` : `dict` of `int`, `float`, and `str`:
    #cppname: PDG_WorkItem::environment

    A dictionary mapping variable names to values in the work item's environment.

::`expectedResultData` : `list` of `tuple`:
    #cppname: PDG_WorkItem::expectedResultData

    The list of expected results for the work item, which are stored a tuple
    in the form `(file, tag, checksum)`.

::`frame` : `float`:
    #cppname: PDG_WorkItem::frame

    The frame value associated with the work item.

::`frameStep` : `float`:
    #cppname: PDG_WorkItem::frameStep

    The frame step size associated with the work item.

::`hasFrame` : `bool`:
    #cppname: PDG_WorkItem::hasFrame

    Set to `True` if the work item has a frame, else `False`.

::`id` : `int`:
    #cppname: PDG_WorkItem::id

    The id of the work item, unique within the [Py:pdg.GraphContext] that
    contains the item.

::`index` : `index`:
    #cppname: PDG_WorkItem::index

    The sort/ordering index for the work item.

::`inputResultData` : `list` of `tuple`
    #cppname: PDG_WorkItem::inputResultData

    The list of input results for this work item,  collected from all
    dependencies. The list contains tuples in the form `(file, tag, checksum)`.

::`isControl` : `bool`:
    #cppname: PDG_WorkItem::isControl

    Set to `True` if this work item is an internal control item, else `False`.

::`isNoGenerate` : `bool`:
    #cppname: PDG_WorkItem::isNoGenerate

    Set to `True` if this work item will not generate child items in downstream
    nodes.

::`isPartition` : `bool`:
    #cppname: PDG_WorkItem::isPartition

    Set to `True` is this work item is a Static or Dynamic partition.

::`isStatic` : `bool`:
    #cppname: PDG_WorkItem::isStatic

    Set to `True` if the work item is a static, Regular work item.

::`name` : `str`:
    #cppname: PDG_WorkItem::name

    The unique name for the work item. Only unique within the [Py:pdg.GraphContext].

::`node` : [Py:pdg.Node]:
    #cppname: PDG_WorkItem::node

    The node that owns the work item.

::`parent` : [Py:pdg.WorkItem]:
    #cppname: PDG_WorkItem::parent

    The upstream work item from which this work item was generated.

::`partitionItems` : `list` of [Py:pdg.WorkItem]:
    #cppname: PDG_WorkItem::partitionItems

    If the work item is a partition, this list contains the work items that the
    partition depends on. Otherwise, the list is empty.

::`priorty` : `int`:
    #cppname: PDG_WorkItem::priority

    The priority of the work item, with 0 being the highest priority.

::`resultData` : `list` of `tuple`:
    #cppname: PDG_WorkItem::resultData

    The list of result data for the work item, containing tuples of the form
    `(file, tag, checksum)`.

::`state` : [Py:pdg.workItemState]:
    #cppname: PDG_WorkItem::state

    The current state of the work item.

::`staticAncestors` : `list` of [Py:pdg.WorkItem]:
    #cppname: PDG_WorkItem::staticAncestors

    The static ancestors of the work item, which are nearest upstream static
    items if this is a dynamic item, or the item itself if the item is static.

::`type` : [Py:pdg.workItemType]:
    #cppname: PDG_WorkItem::typeObject

    The type object that constructed the work item.
