= Pose Library =

== Pose Library Interface ==

[Image:/images/poselibrary/library_interface.png]

The Pose Library interface consists of several components. 

# The [Icon:BUTTONS/edit] __Edit__ mode button allows you to toggle between controls for capturing poses and clips and controls for applying the selected pose or clip to a character rig. 

# The __Capture Poses__ / __Apply Poses__ controls are used to specify the character rig to operate on as well as options for capturing or applying poses. The Capture Pose Controls can be shown or hidden using the [Icon:BUTTONS/plus] and [Icon:BUTTONS/minus] button next to the control title. By default the controls are visible.

# The treeview sidebar displays the folder hierarchy in the current library. You can right-click in the tree view and select __View > Show Folders and Items__ to see a hierarchical view of both folders and items in the current library. Selecting a folder in the treeview shows the poses and clips in the selected folder in the current folder view.

# The current folder view displays poses and clips in the currently selected folder of the treeview. You can switch between a grid view and a list view of the poses and clips by right-clicking an item or empty space in the current folder view and selecting the desired option from the __View__ menu.

    Right-clicking in the current folder view shows a context menu containing the __View__ menu for the current folder view. This menu lists options for configuring how the poses and clips are displayed in the current folder view. The __Zoom In__, __Zoom Out__, and __Default Zoom__ menu items can be selected to set the zoom factor.

== Starting a new Pose Library setup ==

:task: Create a new pose library:
    # Click the __New Pose Library__ button when the pose library is first opened or use __File > New__ to create a new pose library. 
    
    # Select where to store the pose library and enter a name for the new library. 
    
    NOTE:
        You can store the pose library in a directory or as part of a Houdini Digital Asset.

:task: Open an existing pose library:
    Click __File > Open From__ and choose a menu option to select the pose library to open. 
    
    Alternatively, you can open a recently opened pose library by selecting one of the __File > Open Recent Library__ menu options.
    
:task: Access controls for capturing poses and clips:
    Turn on Edit mode by clicking the [Icon:BUTTONS/edit] Edit button or press ((E)) to toggle Edit mode. For more information, see [Capturing Poses and Clips|#capture].
    
:task: Access controls for applying the selected pose or clip to a character rig.
    Turn off Edit mode by clicking the [Icon:BUTTONS/edit] Edit button or press ((E)) to toggle Edit mode.

:task: Select the character rig to operate on:
    Click the [Icon:BUTTONS/chooser_node] chooser beside the __Capture From__ or __Apply To__ field. 
    
    Alternatively, you can type the node name into the character text field, or drag it in from the Network Editor. 
    
    NOTE:
        A history of the selected characters is maintained in the drop down menu next to the character text field.

== Capturing Poses and Clips ==(capture)

Before capturing a pose or clip, ensure that __Edit__ mode is enabled and the character to capture from is specified in the __Capture From__ field.

:task: Capture a pose:
    # Enter a name in the __Pose Name__ field.
        If the __Pose Name__ field is set to the __<default_name>__ placeholder, a unique name will be generated for the captured pose or clip.

    # Press the __Capture Pose__ button.

:task: Capture a sequence of frames:
    # Enter a name in the __Pose Name__ field.
        If the __Pose Name__ field is set to the __<default_name>__ placeholder, a unique name will be generated for the captured pose or clip.

    # Specify the start and end frame by entering values in the __Start/End__ fields or using any of the __Frame Range__ menu options.
    
        Playback range:
            Set the Start/End frame range to the start and end frame range in the [playbar|/anim/playbar].
            
        Timeline range:
            Set the Start/End frame range to the start and end frame range specified in the [Global Animation Options|/ref/windows/global_anim_opts]. You can open this dialog by clicking [Icon:BUTTONS/chooser] in the bottom right corner of the playbar.
            
        Selected Range:
            Set the Start/End frame range to the selected frame range in the [playbar|/anim/playbar]. You can select a frame range by holding ((Shift)) and ((LMB)) dragging on the playbar when you have scoped channels.
            
        Current Frame as Start:
            Set the start frame as the current frame in the playbar.
            
        Current Frame as End:
            Set the end frame as the current frame in the playbar.

    # Press the __Capture Clip__ button.

    NOTE:
        If the frame values are the same, a pose will be captured at the specified frame.
:task: Capture all parameters

    In the [Icon:BUTTONS/gear] gear menu for either __Capture Pose__ or __Capture Clip__, make sure the __Capture all parameters__ checkbox is turned on before capturing.

    By default, the pose library only saves the scoped parameters within the specified frame range. By checking this box, you may choose to instead capture all of the parameters on the selected character.

:task: Create a thumbnail for your captured pose or clip:

    Make sure the __Create Thumbnail__ checkbox is turned on in the [Icon:BUTTONS/gear] gear menu beside the __Capture Pose__/__Capture Clip__ button before capturing.
    
    By default, the thumbnails will only show the selected character. You can optionally create thumbnails that show all objects visible in the viewport by turning on the __Include All Objects in Thumbnail__ checkbox before capturing the pose or clip.

    TIP:
        You can optionally store an animated thumbnail with the captured clip by turning on the __Animate Thumbnail__ checkbox.  The animated thumbnail will play back the clip when the mouse is hovered over it. Otherwise, a still image will be used.
        
:task: Bake keyframes to a clip file:

    Turn on the __Bake Clip__ checkbox in the [Icon:BUTTONS/gear] gear menu beside the __Capture Clip__ button before capturing.

    If the __Binary__ checkbox is on, the clip will be saved as a binary clip file (`.bclip` file). If it is off, the clip will be saved as a plain-text (ASCII) clip file (`.clip` file)

    If the __Blosc compression__ checkbox is on, the clip will be saved using blosc compression (`.bclip.sc` file). __Blosc compression__ can only be enabled if the __Binary__ checkbox is on.
    
    You can also enter a __Sample frequency__ to determine how often a keyframe is created. A value of 1.0 will bake a keyframe every frame, whereas a value of 2.0 will bake a keyframe every other frame.

    WARNING:
        Baking out keyframes to a clip file does not preserve keyframe information. 
        When baking out keyframes, the parameters for the character are evaluated once every frame (or a different interval depending on the __Sample frequency__ setting).
        On the other hand, when __Bake Clip__ is off, keyframes are preserved on the character, which allows for easy editing at a later time. 
        
    TIP:
        As a general rule, you should leave __Bake Clip__ off while you are creating and editing the animation, and you should bake out to clip when the animation is ready.

    A benefit of baking out keyframes is that it can save on disk space usage and library loading times since saving to a `.bclip` file or a `.bclip.sc` file results in a smaller file size. 

NOTE:
    If the animation is driven by CHOPs, set the __Channel__ > __Channel Range__ parameter to __Use Full Animation Range__ for each node in the CHOP network.  This will guarantee that the full animation is captured. Only a single frame may be captured if the parameter is set to __Use Current Frame__.

    Not all CHOP nodes have the __Channel Range__ parameter.

When capturing, the pose library will first check the selected character for scoped parameters by default. If any are found, the captured pose will only contain values for the scoped parameters within the specified frame range. If no parameters are scoped all of the auto-scoped parameters will be captured instead. However, if the __Capture all Parameters__ checkbox is checked, the pose library will capture all parameters on the selected character.

For a pose, the pose library will check for keyframe definitions at the current frame. If a parameter does not have a keyframe, the parameter is evaluated at the frame and the floating point result is stored as part of the pose. If a keyframe is found for a given parameter, the entire keyframe is stored in the pose.

For clips, the pose library performs the pose process at both the start frame and end frame values. Additionally, any keyframes that lie between the start and end frame values are also included in the clip.

NOTE:
    For clips, if the __Bake Clip__ option is enabled in the [Icon:BUTTONS/gear] gear menu beside the __Capture Clip__ button and there are no scoped parameters, then only the auto-scoped parameters that have animation will be captured in the clip. If none of the auto-scoped parameters have animation, the clip will not be captured.


== Editing and Deleting Poses, Clips, and Folders ==
To edit poses and clips, __Edit__ mode must be turned on.

:task: Rename an item or folder:
     Double-click the item or folder name.  You can alternatively right-click on the item and choose __Rename__.

:task: Reorder items and folders:
    # Right-click in the treeview and select __View > Show Folders and Items__ so that you can see both folders and items in the sidebar.
    
    # Drag and drop items within the treeview sidebar.

:task: Add a folder:
    Right-click an item in the treeview sidebar and choose __New Folder__ to 
    create a new folder. 
    
    If the selected item is a pose or clip, the new folder is added to the same folder as the selected item. If the selected item is a folder, the new folder is added as a sub folder of the selected folder.

:task: Delete an item:
    Right-click the item you want to delete and choose __Delete__.

    Deleting a folder deletes all poses, clips, and sub folders in the folder.

:task: Copy/Cut an item:
     Right-click the item and choose __Copy__/__Cut__. 

:task: Paste an item:
    In the treeview sidebar, right-click the folder you want to paste the 
    copied item in and choose __Paste__. To paste in the root folder, right-click the empty space at the bottom of the treeview sidebar and choose __Paste__.
    
    Alternatively, to paste in the currently selected folder, you can right-click empty space in the current folder view and choose __Paste__.

    NOTE:
        You cannot copy an item from one library and paste it into another 
        library. To copy an item between libraries, export the item from the 
        source library, and import it into the destination library.

:task: Change the pose thumbnail with an image file:
    Right-click on the pose and choose __Change Thumbnail > From File...__

    Supported image file formats:
    - tiff
    - jpeg
    - png
    - bmp
    - gif (animated and still image)

    NOTE:
	    The image file resolution should be 250x250.  If it is not, the image will be scaled to 250x250.  If the image doesn't have a square resolution, the image will be cropped from the center.

:task: Change the pose thumbnail with an image from the viewport:
    # Right-click on the pose and choose __Change Thumbnail > From Viewport...__ 
    
    # Specify the start and end frame by entering values in the __Start/End__ fields or using any of the __Frame Range__ menu options. These options are explained in the [Capturing Poses and Clips|#capture] section.  
    
    # Click the __Create__ button to create the new thumbnail.

    TIP:
	    By default, the new thumbnail will only show the selected character. You can optionally create a thumbnail that shows all objects visible in the viewport by turning on the __Include All Objects in Thumbnail__ checkbox before capturing the viewport.


== Applying a Pose ==

[Image:/images/poselibrary/kick.png]
[Image:/images/poselibrary/yoga.png]

Make sure __Edit__ mode is turned off and click a pose or clip to apply it to the selected character. If the clicked item is a pose, the parameters in the character rig will be set to match the stored values in the pose at the current playbar frame. If the clicked item is a clip, it will be applied starting at the current frame and ending at current frame + (`clip_end` - `clip_start`). Pressing ((Ctrl + Z)) after applying a pose will undo the pose.

What happens when applying a pose depends on both the character rig and the way the pose was captured. If the captured pose defines a keyframe for a parameter, when the pose is applied that keyframe and its associated value will always be applied to the rig at the target frame. If the pose only contains a floating point value for a parameter and the character does not have any keyframes defined for the parameter, the parameter will simply be set to the floating point value and no keyframe will be created. If the pose contains a floating point parameter value and the rig does have a keyframe set on the parameter, the value will be committed to the existing keyframe.

If the __Bake Clip__ option was off (in the [Icon:BUTTONS/gear] gear menu beside the __Capture Clip__ button) when the clip was captured and the captured clip data was from a CHOP network, the behavior of applying the clip depends on the __Preserve CHOP Data__ parameter.  

When the parameter is checked, a new CHOP node is created to store the original CHOP sample data. The target parameter is then configured to load animation from the CHOP node. You can specify where the CHOP node is created by editing the __CHOP Path__ parameter.  If __Preserve CHOP Data__ is unchecked, the sample data is converted into keyframes which are applied to the target parameter.  

If the captured clip data was not from a CHOP network or the __Bake Clip__ option was on when the clip was captured, the __Preserve CHOP Data__ parameter is ignored and the clip is loaded as keyframes.

NOTE:
    You can apply poses to characters whose node types do not match those of the character from which the poses were captured. The pose library will skip any missing or invalid parameters when applying the pose.

        
== Blending a Pose ==

In addition to applying a pose, you can also blend a pose with the character rig's current state. This is done by ((Ctrl + MMB)) clicking and dragging on a pose in the library. When the blend slider is at 0%, the character rig retains its existing pose. When the slider reaches 100%, the character rig's pose is set to the selected pose. For any value in between, the character rig and selected pose are linearly blended. The resulting blend of poses is shown in the viewport and applied when ((Ctrl + MMB)) is released. 

TIP:
    Pressing ((Ctrl + Z)) after releasing ((Ctrl + MMB)) will undo the blending operation.
    
NOTE:
    Currently, rotation parameters in the pose are not converted to quaternions and thus are not blended with `slerp()`. Rotations are treated in the same way as all other floating point parameters and blended linearly based on component values. This limitation may be improved in the future.

== Saving and Loading ==

To save the state of the pose library, use __File > Save__. To save the pose library to a different location use __File > Save As__. Poses can be stored in a directory containing pose library `.json` files and pose data or as part of a Houdini Digital Asset. Both methods will preserve the state of the pose tabs, icons, and ordering. The __Save__ menu option will save the poses to whichever directory or HDA they were originally loaded from.

Like saving, poses can also be loaded from either a directory containing pose library `.json` files and pose data or an HDA. Select an option from the __File > Open From__ menu to load poses. The pose library will prompt to save any unsaved changes in the current library before loading poses from the selected library and clearing the current library.

== Exporting and Importing ==

To export a pose or clip, right-click on the item and select one of the __Export__ menu options. Individual poses can be exported as `.json` files or as part of a Houdini Digital Asset. Additionally, clips can be exported to a clip file in any of the supported clip formats (`.clip`, `.bclip`, `.bclip.sc`) by changing the file extension of the destination file in the __Export to Clip File__ dialog.
If the selected file exists, or if the selected HDA already has a pose library, you will be asked to confirm whether you wish to overwrite the existing file or pose library.

To import poses into the current library, select __File > Import__. Poses can be imported from `.json` files, any of the supported clip formats, or from Houdini Digital Assets.

NOTE:
    Importing poses will add the loaded poses into the currently selected folder (the folder shown in the folder view).


