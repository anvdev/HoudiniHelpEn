= Autorigs =

This pane allows you to build rigged HDAs. You can create simple single control rigs for layout assets such as houses/props or more complex character rigs with the use of a series of modules. The modules are added to the interface by clicking their icon, loading from file, loading from an existing HDA, or from a preset. 

Autorig System contains various modules for biped, quadruped, and facial rigging. Each the these modules contains a set of guide objects that you can position within your mesh to determine the location of the final rig elements. Additionally, each module has various options and settings to determine the features of the final rig.

== Using the Autorigs panel ==

# Click ((+)) to add a __New Pane Type__ and select __Autorigs__.

# Click the __New Autorig Asset__ button to open the __Create New Autorig Asset__ popup.

# In the __Create New Autorig Asset__ popup:
    * Give your asset a name and a type.
    * Select your __Rig Geometry Source__. This can be __None__, __Operator__, __File__, or __Standin__. Selecting __Standin__ will create a box.
    * Choose the __Autorig Type__. This can be a __Blank Rig__, __Biped__, or __Quadruped__.
    * Determine if the file path will be embedded in the `.hip` file or saved to disc.
    * Choose how you'd like your geometry to be captured. By default, this is [Biharmonic|Node:sop/bonecapturebiharmonic].
    * Decide if you'd like to display the deform SOP. This if off by default, since it will be very slow if you have a heavy mesh for Biharmonic capturing.
    * Choose a custom icon for your asset.

# Click __Create__ when finished. 
    NOTE:
        These settings can be changed later.

    This will create an HDA in the chosen location with the chosen name. Currently the __Operator Type__ will use the asset name. For example, if your asset name is `char0001`, the HDA Type will be defined by `char0001.hda`. Within this HDA there will be: `master_node_guide`, `stand_in`, and `geo_skin` nodes, which are internal placeholders (not interactive).
        
    A new tab will be created, containing the settings for the current asset. All assets will contain a master module. In its options, you can set a custom label which will appear within the circle. You can also change the size, color, and position of the master node.
    
    TIP:
        To review or edit the HDA settings, you can click the [Icon:BUTTONS/gear] gear menu at the top of the asset tab.

# Use the __Biped__, __Quadruped__, or __Import Preset__ options on the __Presets__ tab, or build your own rig using the biped or quadruped modules. For this example, we will build a rig using the modules on the __Biped Modules__ tab.

    Clicking on the [Icon:OBJ/autorig_spine] __Spine__ button will add this module to your asset in the viewport. You will see a series of guide objects which can be moved into place to define the shape of the spine.

    [Image:/images/autorigs/spine.png]

# Continue for each module. [Icon:OBJ/autorig_head] [Icon:OBJ/autorig_arm] [Icon:OBJ/autorig_leg] [Icon:OBJ/autorig_hand] [Icon:OBJ/autorig_foot]\

    TIP:
        Turn on [Icon:TOOLS/snap_curve] __Interior Snapping__ in the viewport which will snap to the center of the geometry under the cursor. This is especially useful when setting up the fingers in the hand module.

    Each of the modules have tabs for __Options__, __Parameters__ and __Proxy Parameters__. You will need to select a parent for each of the modules using the dropdown menu. For example, the parent for the spine should be the `master_node_guide`, the parent for the head should be the `SPINE_TOP_HOOK`, the parent for the legs should be the `SPINE_BASE_HOOK`, etc.
    
    NOTE:
        The __Arm__, __Leg__, __Hand__, and __Foot__ modules have options for mirroring. This will display a mirror copy of the current module's guide objects. They are not selectable or editable as their positions are determined by the main guide objects.
        
        [Image:/images/autorigs/mirror.png]
    
    NOTE:
        The __Hand__ and __Foot__ modules have options to choose between a __Glove__/__Boot__ type and a __Fingers__/__Toes__ type. The __Fingers__ and __Toes__ types allow you to choose the number of fingers or toes you rig will have and if you want a thumb or big toe.
        
        [Image:/images/autorigs/fingers.png]
        
    WARNING:
        There is a hard limit of up to 99 fingers or toes. However, building an asset with this many fingers/toes is not recommended.
        
        
# Click __File__ > __Save__ and save the settings into the HDA, file on disk, or a different HDA.
        
    TIP:
        You can save individual modules to reuse on other characters by clicking ((RMB)) -> __Export__.
        
# Click __Generate Rig__ to build the asset. 

    Building the rig will do the following:
        * The current settings will be saved with the HDA.
        * If a custom name has been added to the master node, it will be saved as a geometry section into the HDA.
        * The specified geometry will be added to a geometry node according to the settings.
        * Each module will build the rig elements needed for that part. 
        * The asset will be saved and locked.
        * The assets tab will be removed from the interface.
        
    [Image:/images/autorigs/rig.png]


== Facial autorig == (face)

The Face Modules tab lets you add a facial rig to your autorig.


=== Create and position the rig ===

* The `BasicFace` module lets you open and close the jaw and direct the eyes.

* The `AdvancedFace` module gives you _much_ more control over eyes, jaw, lips, eyelids, and face deformation.

    The following documentation details the `AdvancedFace` module.

These facial rigs are opinionated. They demonstrate a particular approach to facial rigging, and how to implement a facial rig in Houdini. Even if you prefer a different facial rigging style, they probably contain ways of implementing facial rigging in Houdini that you may find interesting or instructive.

# In the Autorigs pane, click the __Face modules__ tab.

# Click the __Advanced Face__ button to add the advanced face module to your rig.

# The face appears in the scene at a relatively arbitary position. Select the main positioning jack at the tip of the nose, switch to the Translate tool, and move the face mask close to your character's face.

    [Image:/images/char/autoface_initial_position.jpg]

    * You should position the mask in front of the face, but it should not touch/intersect the face. The module will ray the mask onto the face, so there should be a small gap.

    * You can scale the face guide using controls on the __Guide parameters__ tab.

# In the Autorigs panel, you can start filling out the fields on the __AdvancedFace options__ tab.

# If you already added a Head module to the rig, the face will parent itself to the head bone. Otherwise, you can select the parent bone using the __Parent__ menu.

# If the head geometry is not in the same object as the overall character skin, turn on __Use separate geometry__, click the [Icon:BUTTONS/chooser] chooser button and select the object containing the head geometry.

# If the character skin geometry has a primitive group for the head, enter the group name in the __Head group__ field.

# The __Visibility__ controls let you turn different guides on or off. You can use these controls as you work on the rest of the options.


=== Project rig onto face ===

# When you have the face guide positioned near but not touching the face, click __Generate cage guides__.

    This generates a polygonal face cage, with markers at each point, and projects it onto the face geometry.

    [Image:/images/char/autoface_cage_markers.jpg]

# Move the box markers to position the different areas of the generic mask on your character's face. (With a marker selected, you can drag the center of the handle to move it "freely" in screen space, or drag one of the arrows to move along an axis.)

    [Image:/images/char/autoface_good_polycage.jpg]

    * Make sure to circle the eyes and the lips.

    * The tool projects from the marker onto the face along the geometry normal, so the closer you have the marker to the face, the more accurate the projection will be.

    * You can scroll down and turn on __Secondary guides__ to get finer detail markers between the primary markers. These normally follow the primary markers but you can show and position them manually.

        [Image:/images/char/autoface_secondary_markers.jpg]

    * As you work, you can click __Snap cage guides to face geo__ to snap the markers back down onto the face geometry.

# When you have the polygonal cage positioned properly on the face, click __Generate character mask__.

    This generates a NURBS control surface the autorig will use to deform the face.

    [Image:/images/char/autoface_nurbs_mask.jpg]

    * The tool may be unable to generate a mask from the polygonal cage from the previous step. Unfortunately the tool cannot currently give any guidence about what went wrong. If you get this message, go back to the previous and look for problems with the polygon cage: overlap, crossed markers, markers very close together, and so on.


=== Create locators ===

If the tool can generate the NURBS mask, it automatically switches to the __Guide parameters__ tab. Next you will build locators on the mask. These locators deform the mask, which drives deformation of the face.

# On the __Guide parameters__ tab, click the __Locators__ sub-tab.

# Click __Presets__ and choose the initial number of loctators to create, 19 or 51, depending on how much fine control you need over facial movement.

    The tool sets up the preset locators distributed around the face.

    [Image:/images/char/autoface_locators.jpg]

# You can move, add, or delete locators.

    * To add a locator, go to the top of the __Locators__ tab. See the __Name__ to the locator name, turn on __Mirror__ if you want to create a mirror locator on the other side of the face. Set the __Parent type__ to None for no parent locator, or to a parent type. Click __Add locators__, then click a point on the face in the viewer to create a locator there.

    * To delete a locator, find the locator in the list and click the delete button above it.

    * To move a locator, find the locator in the list and click the __Place__ button next to it. Then click a point on the face in the viewer to move the locator there.

# You can give important locators "parents" that are larger and offset from the face to make them easier to select and manipulate.

    * To give a locator a parent, find the locator in the list and set its __Parent type__ to "NURBS".

    * To share a parent between multiple locators (so manipulating the parent drives all its children at once), go to the top of the __Locators__ tab. Set __Parent type__ to "Custom". Enter a meaningful name for the parent. Turn on __Mirror__ if you want to create a mirrored parent on the other side of the face. Click __Add parent__, then click a point on the face in the viewer to create the parent above that point.

        Then for each locator you want to be a child of the parent you created, find the locator in the list, set its __Parent type__ to "Custom", set the __Parent__ field to the parent's name, then click __Update__.


=== Build jaw, eyes, and lips ===

# In the Autorigs pane, click the __AdvancedFace options__ tab.

# You can turn off __PolyCage__, __Guides__, and __Mask__ to hide the mapping controls.

# If you don't need to set up the jaw, eyes, or lips, turn off the corresponding checkboxes under Components.

# Under Jaw Options:

    * Set the axis aroound which the jaw can rotate.

    * If you want to be able to move the jaw side-to-side (which is necessary for chewing motions and some expressions), turn on __Enable translate__.

    * If you turned on __Enable translate__, you can sepcify which axes the jaw can move in using the __Translate axis__ menu.

# Under Eye Options:
    * If the eyes are mirrored across the character's axis of symmetry, specify which eye the tool should use for selection, Left or Right.

    * The eyes are not mirrored, turn off __Mirror__. You will have to make selections for each eye independently.

    * The tool lets you pick a certain number of points along the eye lids, and turns these into control markers. Set __Lid controls__ to the number of points you want to use as controls, 5 or 9.

    * If you want to be able to make the top and bottom eyelids stick to each other, turn on __Sticky__. If you don't need this control, turn __Sticky__ off to simplify the character controls.

    * Click __Build left/right upper lid__. In the viewer, select 3 points along the bottom of the upper lid: the first point (where the lid hinges), a middle point along the length of the lid, and the end point (where the lid hinges on the other side).

        [Image:/images/char/autoface_eye_points.jpg]

        TIP:
            The three points should be along the same edge loop. You can visualize the edge loop by holding ((Shift + A)) as you move the mouse pointer over points (but remember to release ((Shift + A)) before you select a point).

            [Image:/images/char/autoface_eye_shift_a.jpg]

        When you have the 3 points selected, press ((Enter)).

        Repeat for the lower lid.

        If you turned off __Mirror__, repeat for the other eye.

    * If the character's eyeballs are in a separate object, turn on __Use separate geometry__ and choose the objects containing the __Left eye geometry__ and the __Right eye geometry__.

    * If the model has primitive groups for the eyes, enter the group names in the __Left eye group__ and __Right eye group__ fields.

# Under Lip Options:
    * The tool lets you pick a certain number of points along the lips, and turns these into control markers. Set __Lip controls__ to the number of points you want to use as controls, 5 or 9.

    * If you want to be able to make the top and bottom lips stick to each other, turn on __Sticky__. If you don't need this control, turn __Sticky__ off to simplify the character controls.

    * Click __Build upper lip__. In the viewer, select 3 points along the upper lip: the first point at the edge of the mouth (where the lip hinges), a middle point along the length of the lip, and the end point (where the lid hinges at the opposite side of the mouth).

        [Image:/images/char/autoface_lip_points.jpg]

        TIP:
            The three points should be along the same edge loop. You can visualize the edge loop by holding ((Shift + A)) as you move the mouse pointer over points (but remember to release ((Shift + A)) before you select a point).

            [Image:/images/char/autoface_lip_shift_a.jpg]

        When you have the points selected, press ((Enter)).

        Repeat for the lower lip.


=== Generate rig ===

After you've built the jaw, eyes, and lips, you can move on to other modules (arms, legs, and so on), or if the face is the final module, you can generate the rig.

The generated facial rig is useful on its own, but it also works as a starting point. You can add to it or edit it to suit your needs.

Keep in mind that after you've generated, the generated rig asset contains a JSON file containing all the autorig options. You can start a new autorig template from this JSON file (using __File > New from > HDA__ in the autorigs pane) if you need to go back and change settings and regenerate a new rig.

