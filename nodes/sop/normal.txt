= Normal =

#type: node
#context: sop
#internal: normal
#icon: SOP/normal

#tags: vertex
#bestbet: normals

"""Computes surface normal attribute."""

== Overview ==

This node computes point, vertex, primitive, or detail normals using a more accurate approach than the [Facet node|Node:sop/facet]
or the [Vertex node|Node:sop/vertex].

Unlike the [Vertex node|Node:sop/vertex], it supports computing vertex normals for polygon soup primitives
that were created with a [PolySoup node|Node:sop/polysoup] having the __Merge Identical Vertices__ option disabled.  Existing polygon soup
primitives can be passed through a [PolySoup node|Node:sop/polysoup] with __Merge Identical Vertices__ disabled to ensure that vertices are unmerged.

:vimeo:Edge smoothness
    #id: 116797433

@parameters

Group:
    #id: group

    The subset of geometry whose normal attribute, `N`, should be modified.

    This can be a point, vertex, primitive, or edge group.  If necessary, it will be expanded to a point, vertex, or primitive group, depending on the value of __Add Normals to__.
    If the input geometry doesn't have a normal attribute and __Add Normals to__ is set to __Vertices__, completely smooth vertex normals, as if Cusp Angle were 180,
    will be computed over all vertices first, and then normals will be computed for the group as specified.  If the input geometry doesn't have a normal attribute and
    __Add Normals to__ is set to anything else, this group will be ignored and normals will be computed for all relevant geometry elements.

Group Type:
    #id: grouptype

    The type of group that __Group__ specifies.

    If __Guess from Group__ is specified and the group type is ambiguous, the guess is made that __Group__ specifies a primitive group.

Override Normal:
    #id: normalattrib

    The name of the normal attribute to create or modify.

Compute Normals:
    #id: docompute

    When enabled, a normal attribute will be created or modified based on __Add Normals to__, __Cusp Angle__, and __Weighting Method__ for the specified __Group__.
    
Add Normals to:
    #id: type

    The type of elements to which to add or modify the normal attribute, `N`.

    Points:
        Normals will be computed for each point.  This will be the average of the vertex normals around the point, weighted by the vertex angle for
        each polygon incident to the points, so that, for example, triangulating the surface won't change the result.

    Vertices:
        Normals will be computed for each vertex.  If normals of vertices around a single point are less than __Cusp Angle__ apart from each other, they will
        be averaged together, weighted by the vertex angle in each polygon.

    Primitives:
        Normals will be computed for each primitive.

    Detail:
        A single normal will be computed for the detail, being the average of the primitive normals, weighted by the primitive area.

Cusp Angle:
    #id: cuspangle

    When computing vertex normals, if normals of vertices around a single point are less than or equal to this angle (in degrees) apart from each other, they will
    be averaged together, weighted by the vertex angle in each polygon.

Weighting Method:
    #id: method

    When set to __By Vertex Angle__, care is taken when computing normals to try to avoid issues introduced by sliver polygons and to weight contributions to normals by angle, so that triangulation won't change normals significantly.
    When set to __Each Vertex Equally__, a faster, but less accurate, approach similar to the approach used by the [Facet SOP|Node:sop/facet], is used to compute normals, where each vertex is given equal weight around a point, and less checks are done for ensuring stability.
    When set to __By Face Area__, the behavior is similar to __Each Vertex Equally_, except that vertices on faces with more area will be given more weight when computing point normals.  This is often used to fake the appearance of a smooth bevel for geometry with only a simple chamfer.

Make Normals Unit Length:
    #id: normalize

    When enabled, existing normals in the specified __Group__ will be normalized, i.e. each scaled to have length `1`.  This is disabled when __Compute Normals__ is on, because computed normals are already normalized.

Reverse Normals:
    #id: reverse

    When enabled, normals in the specified __Group__ will have their directions reversed, i.e. the normals will be multiplied by `-1`.

@related

- [Node:sop/facet]
- [Node:sop/vertex]

