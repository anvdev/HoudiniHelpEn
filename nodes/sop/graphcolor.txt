#type:     node
#context:  sop
#internal: graphcolor
#icon:     SOP/graphcolor

= Graph Color =

"""Assigns a unique integer attribute to non-touching components."""

The Graph Color SOP assigns an integer value to each point or primitive.  The
coloring is built so that points or primitives that are directly connected will
not have the same color.

NOTE:
    Graph coloring is a hard problem, so this does not attempt an exact solution. 

Graph colorings can be very useful for OpenCL algorithms as they can
split the polygons and points into non-overlapping groups that
can be operated on in parallel.


@parameters

Color Attribute:
    #id: attrib

    The integer attribute to create, if missing, and initialize to
    the color value.
    
    
Connectivity:
    #id: type

    How to determine if two points or two primitives are connected.  This
    also implicitly determines if the attribute is a point or primitive 
    attribute.
    
    Primitive:
	Two primitives are connected if they have any point in common.  A primitive attribute is created.
        
    Point:
	Two points are connected if they both belong to the same primitive.  A point attribute is created.
        
    Polygon Edge:
	Two primitives are connected if they have a shared edge.  This applies only for closed polygons.   A primitive attribute is created.

	Note that the "map coloring" problem corresponds to this mode.
        
    
Sort Output by Color:
    #id: sortoutput

    Sort the geometry so contiguous blocks have the same graph color.
    
    
Create Workset Attributes:
    #id: createworksets

    Create a pair of detail attributes suitable for the OpenCL SOP to run over the groups in multiple passes using the workset mode.
    
    
Worksets Begin Attr.:
    #id: worksets_begin

    This array attribute stores the index of the start of each unique color in the graph.
    
Worksets Length Attr.:
    #id: worksets_length

    This array attrib7ute stores the number of each unique color in the graph.
    
Max Iterations:
    #id: maxiterations
    
    The greedy graph coloring algorithm usually terminates will before
    this number of iterations, so this acts mostly as an upper bound
    in case something goes wrong.
