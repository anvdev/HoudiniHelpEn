#type: node
#context: dop
#icon: SHELF/whitewater
#internal: whitewatersolver::2.0

= Whitewater Solver =

""" Sets and configures a Whitewater Solver. """

The Whitewater Solver simulates whitewater particles from a source liquid
simulation. This solver can be used to enhance the look of the underlying
simulation by adding dynamic foam, spray, and bubble particles to it. These
particles are influenced by the liquid's motion and interact with each other,
exhibiting controllably-realistic fluid-like behavior.

== Setup ==

To operate, the solver needs an emission volume, as well as the liquid's
velocity and signed distance fields. The velocity field can be either a vector
VDB (`vel`) or a triplet of separated volumes (`vel.x`, `vel.y`, `vel.z`). The
signed distance field must be called `surface` (if this volume is dense and not
a sparse VDB, then the checkbox by __Maximum Half-Width__ must be unchecked).
To facilitate birthing of whitewater particles, an emission volume (`emit`)
must also be provided. A [Whitewater Source|Node:sop/whitewatersource] node can
be used to extract this data from a FLIP simulation. 

NOTE:
    An external [Whitewater Emitter|Node:dop/whitewateremitter] is no longer
    required, but can be hooked in to manually inject particles into the
    simulation. However, the recommended route to additional sourcing is by
    modifying the `emit` volume; this can be accomplished, for example, by
    providing a second input to [Whitewater Source|Node:sop/whitewatersource]
    and enabling its __Add Extra Sources__ option.

@inputs

Objects to Solve:
    A [Whitewater Object|Node:dop/whitewaterobject] to contain the particle
    geometry.

Particle Forces:
    Additional forces to apply to the particles; at this point, the various
    force components have been calculated, but not yet combined.

Extra Sources:
    Additional whitewater particles to add to the geometry; at this point,
    internal emission has been taken care of, and newly birthed particles are
    put into the `justborn` group.

Post-Solve:
    Solvers that act after the Whitewater Solver performs its stepping.

@parameters

Volume Source:
    #id: source
    The path of the SOP node providing the source volumes (liquid's velocity
    and signed distance fields) for the solver.

Import Volumes:
    #id: importvolumes
    Enabling this option will copy the liquid volumes into the whitewater
    object, allowing for visualization as well as easy access.

Whitewater Scale:
    #id: scale
    Controls the separation between nearby whitewater particles. Reducing this
    parameter increases the number of particles in the simulation (with cubic
    scaling).

Voxel Size:
    #id: voxelsize
    Voxel size for the density volume. The volume is used for emission limiting,
    foam erosion, as well as repellant seeding when __Density Threshold__ is
    enabled. __Voxel Size__ should be at least twice as large as __Whitewater
    Scale__.

Foam Location:
    #id: goaldepth
    Location of foam with respect to the liquid surface. Note that all depth
    ranges respect this parameter; that is __Foam Location__ can be changed to
    raise or lower the foam layer without having to modify other parameters.

Depth Range:
    #id: depthrange
    This parameter controls the interval around the foam layer in which the
    forces and aging rates are interpolated. Horizontal axes of __Buoyancy by
    Depth__, __Advection by Depth__, __Multiplier by Depth__, and __Repulsion
    by Depth__ span a distance of twice this __Depth Range__ around 0.

Add State Attributes:
    #id: addstatevars
    When enabled, whitewater particles will acquire `bubble`, `foam`, and
    `spray` point attributes. Values for these attributes lie in the 0-1 range,
    signalling how "strongly" each particle is of the respective state.

== Emission == (emission)

Emission Source:
    #id: soppath
    The path of the SOP node containing the emission VDB (`emit`).

Limit Emission:
    #id: limitemission
    Turning this option on reduces emission rates in already whitewater-dense
    areas.

Emission Amount:
    #id: emissionamount
    A multiplier for the amount of emitted whitewater.

Velocity Offset:
    #id: veloffset
    The location along a source point's velocity vector where the whitewater
    particles will be created (in world units).

Velocity Multiplier:
    #id: velocitymultiplier
    A multiplier applied to a source point's velocity before its whitewater
    particles inherit it.

Maximum Initial Speed:
    #id: maxspeed
    Speed of a newly-birthed whitewater particle is not allowed to exceed this
    value.

Lifespan:
    #id: lifespan
    Average lifespan of a whitewater particle (in seconds).

Seed:
    #id: seed
    Seed that controls all of the random aspects of particle emission and
    death.

Bubbles Aging Rate:
    #id: bubblesagingrate
    Aging rate for bubbles. Can be used to extend or reduce the lifetime of
    bubble particles.

    NOTE:
        This parameter augments a particle's death chance; the `age` attribute
        still contains its real age.

Foam Aging Rate:
    #id: foamagingrate
    Aging rate for foam. Can be used to extend or reduce the lifetime of foam
    particles.

    NOTE:
        This parameter augments a particle's death chance; the `age` attribute
        still contains its real age.

Spray Aging Rate:
    #id: sprayagingrate
    Aging rate for spray. Can be used to extend or reduce the lifetime of spray
    particles.

    NOTE:
        This parameter augments a particle's death chance; the `age` attribute
        still contains its real age.

Add Noise:
    #id: addnoise
    Enabling this option adds velocity noise to newly birthed particles. See
    help for [Turbulent Noise|Node:vop/turbnoise] for more information on noise
    control.

== Limits == (limitbehavior)

Collision SOP:
    #id: collisionpresent
    The path of the SOP node containing a signed distance field for static
    collision geometry. This field should be provided if foam is expected to
    peel away from the liquid surface and settle atop solids (for example, on
    a beach).

SDF Name:
    #id: collisionsdf
    Name of the signed distance VDB or volume in __Collision SOP__.

Closed Boundaries:
    #id: closedends
    These parameters select which boundaries are closed. Particles bounce off
    of closed boundaries, while those venturing beyond open boundaries are
    killed.

Limit Size:
    #id: limitsize
    Size of the whitewater domain.

Limit Center:
    #id: limitt
    Center of the whitewater domain.

Visualize Limits:
    #id: vislimit
    Display the guide showing limits of the whitewater domain.

== Forces == (forces)

Gravity:
    #id: gravity
    Acceleration due to gravity.

Buoyancy:
    #id: buoyancy
    Base acceleration due to buoyancy.

Buoyancy by Depth:
    #id: buoyancycurve
    A multiplier applied to the buoyancy force.

Base Advection Strength:
    #id: resistance
    Strength of the advective force that carries whitewater along the liquid's
    velocity field.

Advection by Depth:
    #id: advectioncurve
    A multiplier applied to the advection strength.

Base Velocity Multiplier:
    #id: multiplier
    A multiplier applied to the liquid's velocity field before advection.

Multiplier by Depth:
    #id: multipliercurve
    An extra multiplier applied to the liquid's velocity field.

== Foam == (foam)

=== Clumping === (clumping)

Enable Density Control:
    #id: enabledensitycontrol
    Enables density control for whitewater particles.

Depth Range:
    #id: pbfdepthrange
    Particles in this range will be subjected to density control. 

    NOTE: 
        If an endpoint of __Stiffness by Depth__ does not evaluate to 0 (when
        __Variable Stiffness__ is enabled), then all particles beyond that
        point will also have density control enabled.

Constraint Stiffness:
    #id: defstiffness
    Stiffness of the density constraints, controlling how harshly deviations
    from target density are penalized.

Variable Stiffness:
    #id: enablexpbdstiffness
    Enable variable enforcement of the density constraints at different liquid
    depths.

    NOTE:
        The solver will interpret constraints to have a variable stiffness if
        the `pbfstiffness` point attribute is present, even when __Variable
        Stiffness__ is disabled.

Stiffness by Depth:
    #id: stiffnesscurve
    Controls the stiffness of density constraints at different liquid depths.
    Note that if an endpoint of this ramp evaluates to a non-zero value, then
    all particles beyond that end will also be subjected to density control.

Neighborhood Size:
    #id: desiredneighbors
    Desired number of points in each particle's neighborhood.

Adaptive Range:
    #id: adaptivekernelradius
    Range of allowed kernel radii, as multiples of a global radius.

Maximum Neighbors:
    #id: maxneighbors
    The number of points in a whitewater particle's neighborhood is not allowed
    to exceed this value.

Inclusion Chance:
    #id: pbfinclusion
    This fraction of all particles that are eligible for density control will
    actually be used. Reducing __Inclusion Chance__ will decrease running times,
    but may degrade quality.

    NOTE:
        All eligible whitewater particles are collected into the
        `controldensity_candidate` group; particles that are actually used for
        density control are put into the `controldensity` group.

Constraint Iterations:
    #id: constraintiterations
    Number of times to repeat constraint projection for each particle.

Maximum Acceleration:
    #id: maxacceleration
    The maximum acceleration that can be applied to a particle by constraints.

Tensile Radius:
    #id: tensileq
    Particles apply repulsive forces on their neighbors to prevent clustering.
    This parameter determines the distance (as a fraction of the particle's
    kernel radius) at which this force is equal to __Tensile Strength__.

Tensile Strength:
    #id: tensilek
    Magnitude of the repulsive forces between nearby particles.

Viscosity:
    #id: enableviscosity
    Enabling viscosity causes velocity diffusion, resulting in more coherent
    motion among nearby whitewater particles.

Vorticity:
    #id: enablevorticityconfinement
    Counteracts energy dissipation by maintaining vortices.

=== Erosion === (erosion)

Enable Erosion:
    #id: enableerosion
    Enabling this feature preserves foam in denser areas and erodes it in
    sparser regions.

Depth Range:
    #id: erosionrange
    Particles within this distance of the liquid surface will be subjected to
    erosion.

Erosion Strength:
    #id: erosionstrength
    Strength of erosion in less dense foam areas. Higher values for this
    parameter will result in more rapid disappearance of foam.

Preservation Strength:
    #id: preservationstrength
    Controls the density range at which whitewater is protected from erosion.

=== Repellants === (repellants)

Enable Repellants:
    #id: enablerepellants
    Create and maintain repellant particles that push whitewater away and give
    rise to a cellular foam structure. These particles are contained in the
    object's `Repellants` geometry.

Feature Size Range:
    #id: repfeatsizerange
    Range of repellant sizes (stored in the `radius` point attribute).

Strength Range:
    #id: repmagrange
    Range of repellant strengths (stored in the `magnitude` point attribute).

Noise Range:
    #id: repnoiserange
    Range of values for the repellants' `noise` point attribute. This attribute
    controls the shape of each repellant, with 0 being perfectly circular and 1
    being maximally "noisy".

Pulse Frequency Range:
    #id: reppulserange
    Range of values for the repellants' `pulse` point attribute. This attribute
    controls how fast the shape of a "noisy" repellant evolves.

Life Range:
    #id: repliferange
    When enabled, repellants will age and die once their life is up. The
    lifespan for a repellant is randomly selected from the provided range.

Density Threshold:
    #id: repdensitythreshold
    Enabling this option limits seeding of repellants to areas that already
    contain whitewater. A region is considered eligible for seeding if relative
    whitewater density is above the specified threshold.

Seed:
    #id: repellantseed
    Seed that controls random repellant seeding.

Match Radius Distribution:
    #id: raddistribution
    When this option is enabled, distribution of repellant sizes matches the
    given __Radius Distribution__; otherwise, size distribution is uniform.

Strength by Speed:
    #id: attenuatebyspeed
    When enabled, repellant strengths are attenuated based on liquid's speed.
    With default settings, for example, repellants will be active only in slow
    regions.

Speed Range:
    #id: repspeedrange
    Horizontal axis of __Repulsion by Speed__ corresponds to this range.

Repulsion by Speed:
    #id: strengthramp
    A multiplier applied to the repellant strengths based on the underlying
    liquid's speed.

Strength by Acceleration:
    #id: attenuatebyaccel
    When enabled, repellant strengths are attenuated based on liquid's
    acceleration. With default settings, for example, repellants will be
    inactive in regions that are rapidly accelerating.

Acceleration Range:
    #id: repaccelrange
    Horizontal axis of __Repulsion by Acceleration__ corresponds to this range.

Repulsion by Acceleration:
    #id: accelerationramp
    A multiplier applied to the repellant strengths based on the underlying
    liquid's acceleration.

Repulsion by Depth:
    #id: repulsioncurve
    A multiplier applied to the repulsion force based on whitewater particle's
    depth.

=== Adhesion === (adhesion)

Enable Depth Control:
    #id: enabledepthcontrol
    Enable a depth control mechanism to keep foam attached to the fluid surface.

Upper Surface Only:
    #id: depthcontrolgrav
    When this option is enabled, adhesion is only applied to particles on the
    liquid's upper surface, as determined by the direction of gravity. Turning
    this feature on reduces foam sticking to the bottom or sides of the domain.

Control Range:
    #id: depthcontrolrange
    Particles within this distance of the liquid surface will be subjected to
    depth control.

Off Within Collision:
    #id: withincollision
    Depth control is disabled for particles that are within this distance of the
    collision geometry. To use this feature, the __Collision SOP__ must be
    specified.

Off Velocity Angle:
    #id: velangle
    Depth control is disabled for particles if the angle between their velocity
    vector and surface normal is no larger than this value.

Maximum Acceleration:
    #id: dcmaxacceleration
    The maximum acceleration that can be applied to particles in an effort to
    keep them attached to the surface.

Stiffness by Depth:
    #id: adhesionstiffnesscurve
    Controls how strictly depth control will be enforced at different depths.
    Lower stiffness values give rise to thicker foam.

== Advanced == (advanced)

Maximum Half-Width:
    #id: sdfactivate
    The liquid's (as well as collision geometry's if __Collision SOP__ is
    specified) signed distance VDB will automatically be activated beyond its
    zero-crossing to enable accurate distance evaluations. The __Maximum
    Half-Width__ parameter can be used to limit the number of voxels that get
    activated, preventing exhaustion of computing resources. Note that this
    option should be disabled for dense SDF's.

Time Scale:
    #id: timescale
    An overall scale applied to the actual timestep.

Delete Attributes:
    #id: delattribs
    List of internal attributes used by the solver that should be deleted to
    save memory and storage.

Use OpenCL:
    #id: useopencl
    Use the OpenCL device to accelerate computations for density control.

@related
    - [Whitewater Object|Node:dop/whitewaterobject]
    - [Whitewater Source|Node:sop/whitewatersource]

