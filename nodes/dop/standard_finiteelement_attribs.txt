#type: include

The finite element solver will recognize and use [attributes|/model/attributes] on the simulated geometry. In the DOP network, this simulation geometry is attached to the simulated object as a sim-data with name `Geometry`. When an object is created, then the geometry and all the corresponding attributes are read from the __Initial Geometry__. This includes the standard position and velocity point attributes `P` and `v`.

The finite element solve supports input attributes and output attributes.
Some attributes, such as the simulation state, are both input and output attributes.
The input attributes include multiplier attributes for material properties,
fracture attributes, and attributes for controlling target positions and corresponding hard/soft constraints.
The output attributes include optional attributes for tet quality, energy densities, FEM node forces, collision info attributes and fracture info attributes.

== Material Property Multiplier Attributes ==

Each of the material properties of a simulated object can be locally modified using multiplier point attributes. As a rule, each of the material properties in the __Model__ tab of an object can be affected by a multiplier attribute. As a rule, the name of the parameter is the name of the attribute. The name of the attribute is the name that is displayed after "Parameter:" when you hover over a parameter with your mouse cursor.

You can locally change the material properties of the object using point attributes.
For example, you can make some polygons resists stretching and bending more than other polygons.
These attributes work as multipliers for the parameters in the __Model__ tab:
The stiffness multiplier is a convenient way to modify the local stiffness for all object types that are recognized by the finite element solver:

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `stiffness`
        td>> Point
        td>> Float
        td>> Multiplier for all types of stiffnesses.
    tr>>
        td>> `dampingratio`
        td>> Point
        td>> Float
        td>> Multiplier for all damping ratios.
    tr>>
        td>> `massdensity`
        td>> Point
        td>> Float
        td>> Multiplier for all mass densities.

For solid objects, the following multiplier point attributes can be used to modify the local behavior:

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `solidstiffness`
        td>> Point
        td>> Float
        td>> Multiplier for both the shape stiffness and the volume stiffness of a Solid Object.
    tr>>
        td>> `solidshapestiffness`
        td>> Point
        td>> Float
        td>> Multiplier for the shape stiffness of a Solid Object.
    tr>>
        td>> `solidvolumestiffness`
        td>> Point
        td>> Float
        td>> Multiplier for the volume stiffness of a Solid Object.
    tr>>
        td>> `solidmassdensity`
        td>> Point
        td>> Float
        td>> Multiplier for the mass density of a Solid Object.

== Collision Control Attributes ==

The FEM solver looks at collision identifiers to decide which primitive pairs are allowed to collide.
The rule is that a pair of primitives may collide if they have the same collision identifier.
(This mechanism may possibly be extended in a future release, allowing the user to specify exactly which collision identifier pairs may collide.)
Collisions can be suppressed altogether for certain primitives by setting the special value -1.
A collision id may be specified separately for the interior and the exterior side of each polygon and tetrahedron.
The exterior side of a polygon is decided using the winding order convention, just like the normal direction.
If interiorcollisionid is not specified, then the default collision id of 0 is used for triangles, but interior collisions are disabled for tets.
If exteriorcollisionid is not specified, then the default collision id of 0 is used for both tets and triangles.

Consider, as an example, an FEM muscle simulation, we may want the muscles to collide only with the interior side of the skin polygons, so the exteriorcollisionid for those polygons may be set to -1 (disable).

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `exteriorcollisionid`
        td>> Primitive
        td>> Integer
        td>> Collision identifier for the exterior side of a polygon or tet surface
    tr>>
        td>> `interiorcollisionid`
        td>> Primitive
        td>> Integer
        td>> Collision identifier for the interior side of a polygon or tet surface

== Material Space Attributes ==

The attribute `materialP` can be thought of as the positions of the simulated object in the material space.
`materialP` is the undeformed configuration relative to which the current position `P` determines the deformation of a simulated object. 
`materialP` must stay the same throughout the entire simulation.
The finite element solver relies on assumption that the `materialP` attribute remains unchanged from frame to frame; it should never be modified externally (e.g., through a SOP solver) otherwise bad simulation results will be produced.

In the case where no __Rest Shape__ is specified and nor `restP` attribute is provided, `materialP` can be thought of as a permanent rest position.
If no animation of the rest position is required in a sim, only `materialP` should be specified (no `restP`).
At any stage in the simulation, it is the mapping from `materialP` to the current `P` that determines the deformation of tets in simulated objects.
The deformation in turn defines the energy stored inside the object.

To help determine the anisotropic behavior of solids, including fiber contraction, the solver can makes use of local UVW frames. These UVW frames may be specified directly using the vertex/point attributes `materialU`, `materialV`, and `materialW`. Alternatively, they may be inferred from UVW positions that may be specified by a vertex/point position attribute `materialuvw`. The FEM solver embeds the UVW directions within the material space that may be specified by the attribute `materialP`. To get the correct idea of how this works, UVW directions that are fed into the FEM solver should be visualized relative to the material position `materialP`.

For FEM muscle simulations, the easiest way to specify the muscle fiber direction is through vertex/point attribute `materialW`. It is fine if no `materialU` and `materialV` directions are specified in this case, as the solver will infer arbitrary `materialU` and `materialV` directions from `materialW` in that case.

The attribute `materialuvw` can be used to specify a UVW parametrization of the material space.
The U, V and W directions that are implied by `materialuvw` matter if the anisotropic controls are used or when the fiber controls are used on a simulated object.
For the FEM muscle simulation use case, the fiber controls are an important tool for controlling muscle contraction.

Similar to `materialuvw`, the `materialuv` attribute can be used to specify UV directions for cloth. This attribute is essential for triangle meshes, in particular, to define the warped and weft directions for cloth.

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `materialP`
        td>> Point or Vertex
        td>> Vector
        td>> Material position of each point, defining the material space
    tr>>
        td>> `materialU`
        td>> Point or Vertex
        td>> Vector
        td>> The U direction within the material space
    tr>>
        td>> `materialV`
        td>> Point or Vertex
        td>> Vector
        td>> The V direction within the material space
    tr>>
        td>> `materialW`
        td>> Point or Vertex
        td>> Vector
        td>> The W direction within the material space
    tr>>
        td>> `materialuvw`
        td>> Point or Vertex
        td>> Vector
        td>> Local material uvw coordinates for each point or vertex of a tet.
    tr>>
        td>> `materialuv`
        td>> Point or Vertex
        td>> Vector
        td>> Local material uvw coordinates for each point or vertex of a polygon or polysoup.

== Material Property Multiplier Attributes ==

table>>
    tr>>
        td>> `fracturepart`
        td>> Primitive
        td>> Integer
        td>> Partitions the object into unbreakable parts. Must be either -1 (no part) or a nonnegative number that indicates a part.
    tr>>
        td>> `enablefracturing`
        td>> Point/Vertex
        td>> Integer
        td>> Locally enable/disable fracturing for points or vertices.
    tr>>
        td>> `fracturethreshold`
        td>> Point/Vertex
        td>> Float
        td>> Multiplier for the object's __Fracture Threshold__.

== Fracturing Control Attributes ==

When you create a simulation with fracturing, it is recommended to specify chunks of tetrahedrons that you want to stay together. Otherwise, the fracturing process may create a very large amount of separate pieces, many of which may consist of single tetrahedrons. For this purpose, you can assign a nonnegative integer to each chunk using the `fracturepart` attribute. In areas where you don't want to specify parts, you can set `fracturepart` to -1, which means that each primitive in that region will become its own part. Real-life materials tend not to be equally strong everywhere. For realistic results, it is recommended to vary the __Fracture Threshold__ locally using the vertex attribute `fracturethreshold`.

table>>
    tr>>
        td>> `fracturepart`
        td>> Primitive
        td>> Integer
        td>> Partitions the object into unbreakable parts. Must be either -1 (no part) or a nonnegative number that indicates a part.
    tr>>
        td>> `enablefracturing`
        td>> Point/Vertex
        td>> Integer
        td>> Locally enable/disable fracturing for points or vertices.
    tr>>
        td>> `fracturethreshold`
        td>> Point/Vertex
        td>> Float
        td>> Multiplier for the object's __Fracture Threshold__.

== Drag Force Control Attributes ==

The behavior of the drag force can be modified locally using the following attributes:

table>>
    tr>>
        td>> `normaldrag`
        td>> Primitive
        td>> Float
        td>> Multiplier for the object's __Normal Drag__.
    tr>>
        td>> `tangentdrag`
        td>> Primitive
        td>> Float
        td>> Multiplier for the object's __Tangent Drag__.
               
== Reference Attributes ==

The attribute `baseP` can be used to specify a generic base position for all the object points. This attribute's values must not be changed during a simulation. When the user does not specify `baseP`, the solver creates this point attribute based on the point positions on the creation frame. This attribute is used as a fallback; whenever the user does not specify `materialP`, the attribute `baseP` is read instead. In the same way, `baseP` is used as a fallback for when no `restP` or `targetP` attributes are provided. Finally, `baseP` is used to bind the simulated and the embedded geometry, in the embedded workflow (e.g., a T-pose). This embedded binding looks at the `baseP` position attribute on both the simulated geometry and the embedded geometry. If no `baseP` attribute is provided by the user on the embedded geometry, the solver creates the `baseP` attribute on the embedded geometry based on the position `P` at the creation frame.  
    tr>>
        td>> `baseP`
        td>> Point
        td>> Vector
        td>> base position of each point

The attribute `restP` can be used to specify an animated rest position for all the object points. For example, at each frame `restP` may be modified in a SOP Solver before the finite element solver. Among other things this makes it possible to create plastic deformation kinds of effects. When the rest should stay the same during an entire simulation the attribute `restP` should not be used. In that case, it is sufficient to specify only an attribute `materialP`, which would act as a permanent, unchanged rest position. If no attribute `materialP` is specified, the solver falls back to the `baseP` attribute that gets automatically created at the creation frame.
table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `restP`
        td>> Point
        td>> Vector
        td>> Rest position of each point.
	

The attribute `initialpid` stores the initial point index for each point. This is the point index at the creation time of the object. This attribute is created only when fracturing is enabled on both the object and the solver. The finite element solver uses this attribute for the options __Import Rest Geometry__ and __Import Target Geometry__ to transfer animated positions and velocities in SOPs to the current fractured topology in the simulated object.
 
table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `initialpid`
        td>> Point
        td>> Integer
        td>> Initial point index for each point.
		
== Target Attributes ==

Target attributes can be used to make a simulated object partially follow a target animation. The attribute `targetP` can be used to specify a target position for each object point. When you use the __Import Target Geometry__ option on the simulated object, the `targetP` will be set automatically every frame. Alternatively, you can create and modify these attributes yourself, using a [Multi Solver|Node:dop/multisolver] and a [SOP Solver|Node:dop/sopsolver]. The target positions and velocities allow the user to mix animation and simulation in a very stable way (assuming the __Target Strength__ and __Target Damping__ parameters have been set on the object). You can set the __Target Strength__ and __Target Damping__ parameters on the object to express how strongly the object should match the target position and velocity, respectively. This is a way to create soft constraints. You can use the `pintoanimation` to create hard constraints that make the simulated points follow `targetP` exactly.
        
table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `targetP`
        td>> Point or Vertex
        td>> Vector
        td>> Target position of each point.
    tr>>
        td>> `targetstrength`
        td>> Point
        td>> Float
        td>> Multiplier for the object's __Target Strength__. If this attribute is missing, a multiplier of 1 is used at all points.
    tr>>
        td>> `targetdamping`
        td>> Point
        td>> Float
        td>> Multiplier for the object's __Target Damping__. If this attribute is missing, a multiplier of 1 is used at all points.
    tr>>
        td>> `pintoanimation`
        td>> Point
        td>> Int
        td>> When 1, the point is hard constrained to the target animation (e.g., `targetP`). When zero, the point is unconstrained.

== Fiber Attributes ==

The `fiberscale` point attribute acts as a multiplier for the rest strain in the fiber direction.
The fiber direction itself can be specified using the `materialW` vertex/point attribute.
Among other things, this is useful for FEM muscle simulations.
If the `fiberscale` is changed from 1 to 0.5, then the muscle wants to be half as long as before in the direction of the fiber.
If you animate the `fiberscale` in a SOP Solver such that it decreases from 1 to a smaller value, you will cause a muscle contraction in the sim.

The `fiberstiffness` point attribute acts as a multiplier for the stiffness along the fiber direction.
The fiber direction of the material is determined by the W axis of the `materialuvw` coordinates.
`fiberstiffness` works as a multiplier on top of all the other material property multipliers, including the anisotropic multipliers.
If the `fiberstiffness` changed from 1 to 10, then the stiffness along the fiber direction becomes 10 stronger than before.
This can be used to control how strong and how quick the effect of muscle flexing using the `fiberscale` attribute takes effect. 

For `fiberscale`/`fiberstiffness` to have the desired effect, it is important that UVW directions are specified.
A material-space UVWs for FEM muscles can be specified using the `materialuvw` point/vertex attribute.
By providing `materialuvw` as a vertex attribute, you are able to provide a local UVW space for each individual tet, which gives you to option of providing a separate UVW frame to each tet.

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `fiberstiffness`
        td>> Point
        td>> Float
        td>> Multiplier for stiffness along the fiber direction, the W direction implied by `materialuvw`.
    tr>>
        td>> `fiberscale`
        td>> Point
        td>> Float
        td>> Multiplier for the rest strain along the fiber direction, the W direction implied by `materialuvw`.

== State Attributes ==

Below is a list of attributes that are maintained internally by the solver. Each of these attributes is written to at the end of each solve and read from at the start of the next solve. You should not modify any of these attributes yourself. When you do, the solver is likely to become unstable and you will get bad results. However, you can inspect the values in these attributes in your network for visualization or for the creation of secondary effects.

At each frame, the finite element solver computes a new physical state for each simulated object. The physical state of the object is represented by the point attributes `P` and `v`, representing the position and velocity, respectively. The solver's integration scheme maintains additional attributes `a` for acceleration and `j` for jerk.

The point attributes `P`, `v`, `a`, and `j` store the current integration state of the object. These attributes should not be modified during the simulation because the finite element solver will become unstable and produce low-quality results.

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `P`
        td>> Point
        td>> Vector
        td>> Do not modify! Current position of each object point.
    tr>>
        td>> `v`
        td>> Point
        td>> Vector
        td>> Do not modify! Current velocity of each object point.
   tr>>
        td>> `accel`
        td>> Point
        td>> Vector
        td>> Do not modify! Current acceleration of each object point.
   tr>>
        td>> `jerk`
        td>> Point
        td>> Vector
        td>> Do not modify! Current jerk of each object point.

== Embedded Geometry Attributes ==

These attributes are created on the Embedded Geometry of the Solid Object.
The `parent` attribute is maintained by the embedding code itself, and
should not be modified.
The `baseP` point attribute can be provided on the Embedded Geometry by the user to control the binding between the simulated geometry and the embedded geometry.
If no `baseP` is provided, it will be copied from the point positions stored in `P` at the creation frame.
The alignment happens relative to the `baseP` point attribute on the simulated geometry. If the simulated geometry has a `materialP` vertex or point attribute, then this attribute takes precedence, allowing control per vertex, rather than per point, if necessary.
When you want to ensure that embedded geometry ends up on the desired side of a fracture between simulated geometry, you can use the combination of vertex attributes `baseP` on the embedded geometry and `restP` on the simulated geometry.
This allows you to line up the embedded geometry with the separate parts in the simulated geometry, for example using the [Exploded View SOP|Node:sop/explodedview].
The `fracturepart` attribute allows you to make sure that the embedded geometry follows the right parts when it gets fractured. When both the simulated and the embedded geometry have the `fracturepart` attribute, the finite element solver will parent embedded geometry to simulated geometry that has the same fracture part.

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `parent`
        td>> Primitive
        td>> Float
        td>> The index of a parent primitive in the simulated geometry.
    tr>>
        td>> `baseP`
        td>> Point
        td>> Float
        td>> Base positions used for alignment with simulated mesh.
    tr>>
        td>> `fracturepart`
        td>> Point or Vertex
        td>> Float
        td>> Optional user-specified fracture part ID.
    tr>>
        td>> `P`
        td>> Point
        td>> Float
        td>> Positions that correspond to the deformed state.
    tr>>
        td>> `v`
        td>> Point
        td>> Float
        td>> Velocities that correspond to the deformed state.
    tr>>
        td>> `N`
        td>> Point or Vertex
        td>> Float
        td>> Normals that correspond to the deformed state.

== Optional Output Attributes ==

These are attributes that are optionally generated by the solver, when the generation is enabled on the simulated object. These attributes can be useful for visualization, for example, using the Finite Element Visualization SOP. Additionally, these attributes may be used to create secondary effects, for example, particles flying off in regions where fracturing occurs. The optional output attributes are also expected by the Finite Element Visualization SOP.

The following attribute is generated when __Create Quality Attributes__ is turned on:

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `quality`
        td>> Primitive
        td>> Float
        td>> A quality metric between 0 (worst) and 1 (best)

Finite element simulation tends to be sensitive to the quality of the incoming primitives. Low quality primitives may slow down, destabilize or lock a finite element simulation. Low quality primitives are best avoided by using the Solid Embed as a tool to create your tet mesh. Although various quality metrics exist for tetrahedra, the one that's generated by the solver in this attribute is the one that best matches Houdini's finite element solution.

The solver generates energy-density attributes for each object that has __Create Energy Attributes__ turned on. The material property settings in the Model tab and the corresponding multiplier attributes result in potential energy, energy dissipation and kinetic energy.
For each of these three contributions, local densities are computed within the solver. These densities and quantities derived from them are used to determine the motion and behavior of the objects that are solved by the finite element solver.

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `potentialdensity`
        td>> Point
        td>> Float
        td>> The local density of deformation energy
    tr>>
        td>> `dissipationdensity`
        td>> Point
        td>> Float
        td>> The local density of the rate of energy loss
    tr>>
        td>> `kineticdensity`
        td>> Point
        td>> Float
        td>> The local density of the kinetic energy

The `potentialdensity` attribute is directly affected by the stiffness parameters in the Model tab. The `kineticdensity` is proportional to the mass density that is specified for the object. The `dissipationdensity` is related to the damping settings.

If __Create Fracture Attributes__ is enabled on the simulated object, then the `fracturecount` point attribute is created.
The point attribute `fracturecount` maintains for each point, the number of times that the point has been involved in a fracture. So any point with a nonzero value of `fracturecount` has been involved fracturing.

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `fracturecount`
        td>> Point
        td>> Integer
        td>> The number of times a point was fractured during the simulation

== Legacy Attributes ==

In most situations where you want to influence a finite-element simulation, you will want to use soft constraints to achieve this, for example, target constraints, region constraints, or the target strength/damping settings on the object. These are first-class solver features that work in a stable way with the solver and should produce high quality results when used correctly. Purely for backwards compatibility, a force force attribute is still supported. Because the force force attribute lacks essential information that the solver needs, this attribute cannot be relied on when stability and quality are important. When setting up a new sim, alternatives such as soft targeting, region constraints and animated rest positions should be considered instead of the force force attribute.
 
table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `fexternal`
        td>> Force
        td>> Vector
        td>> External force density
    tr>>
        td>> `force`
        td>> Force
        td>> Vector
        td>> Another name for external force density
 



 








    
 
