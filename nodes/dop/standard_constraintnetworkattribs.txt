#type: include

=== Constraint Attributes ===

You can [create attributes|/model/attributes] on the geometry to customize each constraint's behavior and type.
If a primitive attribute with the same name as a constraint property (such as `damping`) is present, the attribute value will be multiplied with the value from the constraint sub-data.

The following attributes can be used to control the type of constraint described by each primitive.

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `constraint_name`
        td>> Primitive
        td>> String
        td>>
            Specifies the __Data Name__ of the constraint to create. If this
            attribute is not present or the name is invalid, no constraint will
            be created from the primitive. This attribute can be modified in a
            [SOP Solver|Node:dop/sopsolver] to change the constraint's type
            during the simulation.
    tr>>
        td>> `constraint_type`
        td>> Primitive
        td>> String
        td>>
            Specifies whether the constraint affects `position`, `rotation` or
            `all` degrees of freedom. If this attribute is not present or has
            an invalid value, the default value will be `position`.
    tr>>
        td>> `next_constraint_name`
        td>> Primitive
        td>> String
        td>>
            Specifies a new value for the `constraint_name` attribute to switch to if the constraint is broken by the solver.
            This is simpler than using a [Node:dop/sopsolver] and allows the transition to take place at the instant the constraint breaks.
            Currently, only [glue constraints|Node:dop/glueconrel] may be broken during the timestep by the [Node:dop/bulletrbdsolver].
    tr>>
        td>> `next_constraint_type`
        td>> Primitive
        td>> String
        td>>
            Specifies a new value for the `constraint_type` attribute to switch to if the constraint is broken by the solver and the `next_constraint_name` attribute is valid.
    tr>>
        td>> `propagate_iteration`
        td>> Detail
        td>> Integer
        td>>
            Specifies the number of impact propagations for all [glue bonds|Node:dop/glueconrel] in the constraint network.

            NOTE:
                In Houdini 17, the number of propagation iterations can instead be varied per glue constraint with the __Propagation Iterations__ parameter, so this detail attribute is deprecated.

=== Feedback Attributes ===

The following attributes are created by the solver to provide information about how the constraints behaved during the previous timestep.
These attributes can be used to control when [constraints are broken|Node:dop/constraintnetwork#breaking].

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `angle`
        td>> Primitive
        td>> Float
        td>> The current angle (in radians) between the two anchors.
    tr>>
        td>> `distance`
        td>> Primitive
        td>> Float
        td>> The current distance between the two anchors.
    tr>>
        td>> `force`
        td>> Primitive
        td>> Float
        td>> This attribute stores the magnitude of the force that was applied to satisfy the constraint during the previous timestep.
    tr>>
        td>> `impact`
        td>> Primitive
        td>> Float
        td>> For [glue constraints|Node:dop/glueconrel], this attribute is updated by the solver with the accumulated impulses for the glue bond, as impacts occur and propagate through the network.
    tr>>
        td>> `torque`
        td>> Primitive
        td>> Float
        td>> This attribute stores the magnitude of the torque that was applied to satisfy the constraint during the previous timestep.

=== Anchor Attributes ===

The following attributes can be used to control how the anchor points are [attached to objects|Node:dop/constraintnetwork#anchortypes].

table>>
    tr>>
        th>> Name
        th>> Class
        th>> Type
        th>> Description
    tr>>
        td>> `anchor_id`
        td>> Point
        td>> Integer
        td>>
            If this attribute is defined and refers to a valid point (or vertex depending
            on the value of `anchor_type`), then this anchor's position will be bound to
            the specified point (or vertex) on the simulated geometry specified by the
            `name` attribute.

            If the value is set to `-1`, then the anchor is treated as a relative offset
            from the object specified by the `name` attribute (where the `P` attribute
            defines the offset). If the value does not refer to a valid point (or vertex),
            then the constraint is not created.
    tr>>
        td>> `anchor_type`
        td>> Point
        td>> Integer
        td>>
            Specifies if the anchor is attached to a `point`, `vertex` or `agent` transform.
            If no `anchor_id` attribute is defined and the anchor type is `point` or `vertex`, then this
            attribute has no effect.
            If this attribute is not defined, then `anchor_id` will refer to a point.
    tr>>
        td>> `condir`
        td>> Point
        td>> Vector
        td>>
            If the number of constrained degrees of freedom is 1, this value
            defines the normal of a plane that the object can move along or
            rotate about any axis in. If the number of constrained degrees of
            freedom is 2, this value defines an axis that the object can move
            or rotate about.
    tr>>
        td>> `condof`
        td>> Point
        td>> Integer
        td>>
            Identifies the number of constrained degrees of freedom for an
            anchor (0 to 3).
    tr>>
        td>> `local_orient`
        td>> Point
        td>> Quaternion
        td>>
            If the `anchor_type` is `agent`, specifies the anchor's orientation in the local space of the transform referenced by the `name`.
    tr>>
        td>> `local_P`
        td>> Point
        td>> Vector
        td>>
            If the `anchor_type` is `agent`, specifies the anchor's position in the local space of the transform referenced by the `name`.
    tr>>
        td>> `name`
        td>> Point
        td>> String
        td>>
            Identifies the object to which the constraint is attached.
            An empty name indicates that the constraint is attached to a world space position.

            For [RBD Packed Objects|Node:dop/rbdpackedobject], the `name` point attribute from the DOP object's geometry is used to identify which object to attach the constraint to.
            This can be prefixed by the DOP Object name (e.g. `object2/piece3`) to uniquely identify the object.
            For agent primitives, a transform name can be appended to the anchor name (e.g. `agent2/head`) to attach the constraint to a specific transform in the agent's rig.
            For all other types of objects, the DOP object name is used.
    tr>>
        td>> `orient`
        td>> Point
        td>> Quaternion
        td>>
            Identifies the initial world space orientation of the anchor. If
            the `r` point attribute also exists on the geometry, this attribute
            will take precedence.
    tr>>
        td>> `P`
        td>> Point
        td>> Vector
        td>> Identifies the initial world space position of the anchor.
    tr>>
        td>> `r`
        td>> Point
        td>> Vector
        td>>
            Identifies the initial world space orientation of the anchor as
            Euler angles.
    tr>>
        td>> `v`
        td>> Point
        td>> Vector
        td>> Identifies the velocity of the world space position to which the constraint is attached.
    tr>>
        td>> `w`
        td>> Point
        td>> Vector
        td>>
            Identifies the angular velocity of the world space position to
            which the constraint is attached.
