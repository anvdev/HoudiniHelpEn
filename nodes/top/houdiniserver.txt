#type:     node
#context:  top
#internal: houdiniserver
#icon:     TOP/commandserver

= Houdini Server Begin =

"""Starts a persistent Houdini command server"""

This node is a specialized version of the generic [Command Server|Node:top/commandserver]
node that can be used to create Houdini Server work items. Session work items in
this node are associated with a long running Houdini process, and can be used to
run HOM Python code using the [Command Send|Node:top/sendcommand] node.

See [command servers|/tops/servers] for additional details on the use of command
chains.

@top_attributes
::`sharedserver`:
    #type: str

    The sharedserver attribute specifies the name of the shared Houdini isntance
    associated with the work item. In the case of the begin item, it's the name
    of the server that the work item will eventually create.

::`loopiter`:
    #type: [int]

    This attribute is inherited from the [Feedback Begin|Node:top/feedbackbegin]
    node.

    The loop iteration number, within the set of work items associated with
    the loop. This attribute can be an array of values when using nested feedback
    loops, since the iteration number at each level is preserved. The loop
    iteration value for the outer most loop is stored in `loopiter[0]`, the next
    level is stored in `loopiter[1]`, and so on.

::`loopnum`:
    #type: int

    This attribute is inherited from the [Feedback Begin|Node:top/feedbackbegin]
    node.

    Tracks which loop the work item is associated with. This attribute is
    relevant when generating multiple independent loops in the same feedback
    begin node, for example by driving the feedback begin node with a
    [Wedge|Node:top/wedge] node.

::`loopsize`:
    #type: int

    This attribute is inherited from the [Feedback Begin|Node:top/feedbackbegin]
    node.

    The total number of iterations in the loop.

@parameters

[Include:processor_common#pdg_workitemgeneration]

Session Count from Upstream Items:
    #id: iterationsfromupstream

    When this toggle is enabled, the node will create a single server work item
    and a session with the server for each upstream work item. Otherwise, a
    server item will be created for each upstream work item.

Number of Sessions:
    #id: iterations

    The number of sessions to create with the server. Each session work item
    will cook in serial with other sessions using the same server. The chain of
    work items starting from this sesison item down to the Command Server End
    node will cook to completition before starting the next session.

Copy Inputs For:
    #id: copyinputsfor

    Determines how input files should be copied onto loop items. By default, upstream files are copied onto all input files, however it's also possible to only copy input files onto the first iteration or none of the loop iterations.

    No Iterations:
	Upstream input files are not copied to the outputs of any loop iteration items

    First Iteration:
	Upstream input files are copied to the output file list only for the first loop iteration

    All Iterations:
	Upstream input files are copied to the output file list of all iterations.

Server Name:
    #id: sharedservername

    The name of the shared server, which is used to access it with
    [Command Send|Node:top/sendcommand] nodes using the server. This name must be
    unique, which can be achieved by enabling the __Suffix with Index__ parm.

Append Index to Server Name:
    #id: autosuffixname

    Appends the work item index to the end of the __Shared Server Name__ when
    registering the server. This is useful when generating multiple shared
    server work items in this node.

Server Port:
    #id: commandport

    The TCP port number the server should bind to (when __Connect to existing server__ if off), _or_ the port to use to connect to an existing server (when __Connect to existing server__ is on). The default value `0` tells the system to dynamically choose an unused port, which is usually what you want. If you want to keep the ports in a certain range (and can guarantee the port numbers will be available), you can use an expression here such as `9000 + @pdg_index`.

Connect to Existing Server:
    #id: externalserver

    When this toggle is enabled, the work item will connect to an existing server
    rather than spawning a new one.

Server Address:
    #id: externalhost

    The existing server address, when __Connect to Existing Server__ is enabled.

Load Timeout:
    #id: timeout

    The timeout used when performing an initial verification that the shared
    server instance can be reached. When this timeout passes without a successful
    communication, the work item for that server will be marked as failed

Hython Executable:
    #id: serverbinary

    The path to the `hython` executable that should be started.  The default value is `__PDG_HYTHON__`, which should be set to the hython executable in the `$HFS` of the machine executing the task.  For the local scheduler this corresponds to the `$HFS` of the currently running Houdini session.

~~~~ Loop Attribute Names ~~~~

These parameters can be used to customize the names of the work item attributes
created by this node.

Iteration:
    #id: iterattribute

    The name of the attribute that stores the work item's iteration number.

Number of Iterations:
    #id: sizeattribute

    The name of the attribute that stores the total iteration count.

Loop Number:
    #id: numattribute

    The name of the attribute that stores the loop number.

@related
- [Node:top/commandserver]
- [Node:top/commandserverend]
- [Node:top/mayaserver]
- [Node:top/sendcommand]
