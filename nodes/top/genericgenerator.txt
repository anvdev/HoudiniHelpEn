= Generic Generator =

#type:     node
#context:  top
#internal: genericgenerator
#icon:     TOP/genericgenerator

"""Generates work items with no attributes that run a command line."""

You can use this to generate work items with a command line generated by an expression. It can also sometimes be useful when starting a network to simply generate a certain number of work items that don't do anything (leave the command line blank), so you can add attributes to them and use them to drive downstream nodes.

If you want more advanced functionality, use a [Python Processor|Node:top/pythonprocessor] instead.

This node will generate __Item Count__ work items when it has no inputs, otherwise
it will generate __Item Count__ work items for each upstream work item.


@parameters

[Include:processor_common#pdg_workitemgeneration]

Sequential:
    #id: sequential

    Makes each generated work item will depend on the previous one, so they run in sequence instead of simultaneously.

Item Count:
    #id: itemcount

    The number of outgoing work items to generate for each incoming work item. If there are no incoming work items, the node generates this number of outgoing work items.

Index:
    #id: index

    By default, the node gives the generated work items sequential `index` attributes starting at `0`. If you want to generate custom `index` values from an expression, turn this on and enter the expression in the text field.

Frame:
    #id: frame

    By default, the generated work items inherit the `frame` attribute from the corresponding incoming work item. If you want to generate custom `frame` values from an expression, turn this on and enter the expression in the text field.

Priority:
    #id: priority

    By default work items will be assigned a priority of `0`. If you want to set a custom priority, turn this on and enter a number or expression in the text field. Items with high priority values run before items with low priority values.

Delay Time:
    #id: delay

    Turn this on to have each work item wait for a certain number of seconds *instead of running the command line* (when this is on, the __Command__ parameter is disabled). This is sometimes useful for simulating a slow workload to see how it affects the rest of the network, for example to check whether nodes correctly [wait for results|/tops/wait] before proceeding.

[Include:processor_common#pdg_command]


@related

- [Node:top/pythonprocessor]
