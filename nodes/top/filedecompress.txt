= File Decompress =

#type:      node
#context:   top
#internal:  filedecompress
#icon:      TOP/filedecompress

"""Decompresses archive files specified by incoming work items into individual files."""

This node looks in the `output` attribute on each incoming work items for file paths [tagged|/tops/filetags] `file/archive`. If the file name's extension is supported (`.zip` or `.tar.gz`), the node extracts the files inside the archive into a given directory.

(Nodes that produce file results (for example, [File Pattern|Node:top/filepattern] or [File Compress|Node:top/filecompress]) should automatically tag archive files as `file/archive` based on the extension.)

If you just want to extract files from one or more pre-existing archive files, do the following:

# Create a [File Pattern node|Node:top/filepattern].

    * Set the __Pattern__ to match the archive(s) you want to extract. For example, `$PDG_DIR/sources/*.zip`.

    * Make sure __Split results into separate items__ is on.

    The node will generate work items for each archive, with its `output` attribute set to the archive path. The path should automatically be tagged `file/archive` based on the extension.

# Connect a File Decompress node. Turn on __Output file__ and set it to the directory you want to extract files into.

WARNING:
    The File Decompress node sets each work item's `output` to the path of the directory it extracted into, not to the list of extracted files, as you might expect.


@top_attributes

::`input_archives`
    #type: string

    A list of input archives that will be decompressed.

::`output_dirs`
    #type: string

    A list of directories where archives will be extracted into.


@parameters

Output Folder:
    #id: extractpath

    Turn this on and set it to the path to the directory you want to extract files into. The node will create the directory if it does not exist.


@related

- [Node:top/filecompress]
