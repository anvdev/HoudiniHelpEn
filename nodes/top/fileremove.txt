= File Remove =

#type:      node
#context:   top
#internal:  fileremove
#icon:      TOP/fileremove

"""Deletes a file at a specified path."""

TIP:
    You may want to avoid using destructive file operations such as move/rename and remove. They can make files appear to be missing, triggering the dependency system to do extra work. They can also make it harder to debug the network after it runs if intermediate files are not where they were.


@parameters

Mode:
    How do decide what file(s) to delete:

    Single File Path:
        Set the path to the file to delete in the __File path__ parameter.

    Single Task Data:
        ???

    All Result Data for Tag:
        Delete any file paths in the `output` attributes of incoming work items if they have the given [file tag|/tops/filetags].

File Path:
    #id: filepath

    When __Mode__ is "Single file path", the path to the file to delete.

Tag:
    #id: sourcetag

    When __Mode__ is "All result data for tag", delete paths in the `output` attributes of incoming work items if they have this [file tag|/tops/filetags].

Add Deleted Files as Result Data:
    #id: addresultdata

    Set the deleted file paths as the `output` of the outgoing work items.

Override Item Index:
    #id: useitemindex

    If you want to change the `index` attribute of the outgoing work items, turn this on and enter an expression in the text box.

Ignore Errors:
    #id: ignoreerrors

    If this is off (the default), the node continues even if trying to remove a file causes an error (for example, if the file path does not exist). If this is on, if trying to remove a file causes an error, the node will error.

Dry Run:
    #id: dryrun

    Turn this on to prevent the node from actually deleting any files. This is useful for testing what will be deleted. Turn on __Add deleted files as result data__ so you can see the files that would have been deleted in the `output` attributes of the outgoing work items.

