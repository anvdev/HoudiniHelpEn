#type:     node
#context:  top
#internal: pythonpartitioner
#icon:     MISC/python

= Python Partitioner =

"""Partitions work items using a Python script"""

This node can be used to write custom partitioner logic using the Python API.

For use cases that can expressed as a single line Python or HScript expression,
the [Partition by Expression|Node:top/partitionbyexpression] is a simpler
alternative.

@parameters

[Include:python_common#savenodescript]

[Include:python_common#savenodehda]

[Include:partitioner_common#pdg_dynamicpartition]

[Include:partitioner_common#pdg_partitionmerge]

onPartition Callback:
    #id: generate

    This script is run in order to partition the upstream items.
    
    If this is a static partitioner it is run once during the static cook
    with the full list of upstream static items as input. If this is a
    dynamic partitioner it is run once during the cook based on the value
    of the __Partition When__ parameter. 

    Several variables are available in the script:

    `self`:
	Refers to the underlying PDG node associated with the TOP node. Note
	that this is different than TOP node itself, which is a standard Houdini
	operator.

	Spare parameters added to the TOP node's parameter interface will
	automatically be added to the PDG node.

    `partition_holder`:
	The partition holder used to add work items to partitions. Partitions
	will be committed to the node once the script completes. If there are
	any errors during the script, the contents of the partition holder is
	discarded.

    `work_items`:
	The list of work items to partition.

== Advanced ==

These are advanced parameters that provide finer control over the behavior of
the partitioner.

[Include:partitioner_common#pdg_removestale]

[Include:partitioner_common#pdg_alwaysevaluate]

[Include:partitioner_common#pdg_dirtymode]

[Include:partitioner_common#pdg_partitionwhen]

[Include:partitioner_common#pdg_partitiontarget]

@related
- [Node:top/partitionbyexpression]
