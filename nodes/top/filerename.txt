= File Rename =
#type:      node
#context:   top
#internal:  filerename
#icon:      MISC/rename

"""Renames or moves a file."""

TIP:
    You may want to avoid using destructive file operations such as move/rename and remove. They can make files appear to be missing, triggering the dependency system to do extra work. They can also make it harder to debug the network after it runs if intermediate files are not where they were.

This node can work in two different ways:

Do the rename(s) whenever the node generates work items (__Async rename__ off):
    The node tries to rename the files synchronously when it generates work items (including when you choose __TOPs > Generate Static Work Items__), blocking until the renaming is done. This can lead to the node working once and then erroring because the "source" file has been moved/renamed.

Do the rename(s) inside work items (__Async rename__ on):
    The node performs the renames asynchronously at runtime.


@top_attributes

::`directory`
    #type: string

    The directory where the source file will be moved

::`extension`
    #type: string

    The extension of the destination file

::`filename`
    #type: filename

    The filename of the destination file


@parameters

Original File Path:
    #id: originalpath

    The path to the file to move/rename.

New File Path:
    #id: newpath

    The new path of the file. This is used as the `output` of the work item(s).

Result Data Tag:
    #id: resultdatatag

    The [file tag|/tops/filetags] to assign to the `output` filename.

Async Rename:
    #id: asyncrename

    When this is off, the node tries to rename the files synchronously when it generates work items (including when you choose __TOPs > Generate Static Work Items__), blocking until the renaming is done. This can lead to the node working once and then erroring because the "source" file has been moved/renamed. When this is on, the renames are performed asynchronously at runtime (potentially on a render farm).

