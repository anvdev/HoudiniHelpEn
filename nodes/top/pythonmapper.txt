#type:     node
#context:  top
#internal: pythonmapper
#icon:     MISC/python

= Python Mapper =

"""Maps work items using a Python script"""

This node can be used to write custom mapper logic using the Python API.

For use cases that can expressed as a single line Python or HScript expression,
the [Map by Expression|Node:top/mapbyexpression] is a simpler
alternative.

@parameters

[Include:python_common#savenodescript]

[Include:python_common#savenodehda]

[Include:mapper_common#pdg_dynamicmap]

onMapStatic Callback:
    #id: mapstatic

    This script is run in order to map upstream static items to downstream
    static items. It is always run once during the static cook step.
    
    Several variables are available in the script:

    `self`:
	Refers to the underlying PDG node associated with the TOP node. Note
	that this is different than TOP node itself, which is a standard Houdini
	operator.

	Spare parameters added to the TOP node's parameter interface will
	automatically be added to the PDG node.

    `upstream_items`:
	The list of upstream static work items - these are the items that can
	be added as dependencies on the downstream items.

    `downstream_items`:
	The list of downstream static work items - these are the items below
	the mapper that will be made to depend on some of the upstream static
	items.

    `dependency_holder`:
	The object used to construct dependencies. For example, to add a 
	dependency between the first upstream item and downstream item, one
	could write `dependency_holder.addDepdendency(upstream_items[0], downstream_items[0])`.
	The order the dependent/dependency are specified does not matter, as PDG
	will be able to determine which is which on its own.

onMapDynamic Callback:
    #id: mapdynamic

    This script is run in order to map upstream dynamic items to downstream
    static items. It is run multiple times during the cook when dynamic work
    items are generated about the mapper node.

    The dynamic work items passed in are pre-filtered by the results of the
    __onMapStatic__ script, such that only dynamic items that descend from the
    static items selected in that script will be considered.
    
    Several variables are available in the script:

    `self`:
	Refers to the underlying PDG node associated with the TOP node. Note
	that this is different than TOP node itself, which is a standard Houdini
	operator.

	Spare parameters added to the TOP node's parameter interface will
	automatically be added to the PDG node.

    `upstream_items`:
	The list of upstream dynamic work items - these are the items that can
	be added as dependencies on the downstream items.

    `downstream_items`:
	The list of downstream static work items - these are the items below
	the mapper that will be made to depend on some of the upstream dynamic
	items.

    `dependency_holder`:
	The object used to construct dependencies. For example, to add a 
	dependency between the first upstream item and downstream item, one
	could write `dependency_holder.addDepdendency(upstream_items[0], downstream_items[0])`.
	The order the dependent/dependency are specified does not matter, as PDG
	will be able to determine which is which on its own.


@related
- [Node:top/mapbyexpression]
- [Node:top/pythonpartitioner]
