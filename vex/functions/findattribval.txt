= findattribval =

#type: vex
#context: all
#tags: attrib, search
#group: attrib

"""Finds a primitive/point/vertex that has a certain attribute value."""

:usage: `int findattribval( <geometry>, string attribclass, string attribute_name, int|string value, int which=0)`

[Include:_common#geometry]

[Include:_common#attribclassnogroup]

[Include:_common#attribnamenogroup]
 
:arg:value:
    The value to look for in the attribute.

:arg:which:
    If multiple elements have the given value in the attribute, the controls which match to return.
    
    If you're searching for multiple elements with the same attribute value, you can use [Vex:findattribvalcount] to get the total number of matches and then iterate through them by increasing the `which` argument to this function in a loop. See the examples below.

:returns:
    The number of the first point/primitive/vertex where the named attribute matches the given `value`. Returns `-1` if no element has the given attribute value.

TIP:
    The most common use cases (finding an point/primitive by its `name` or `id` attribute) have easier-to-use dedicated wrapper functions: [Vex:nametopoint], [Vex:nametoprim], [Vex:idtopoint], and [Vex:idtoprim].

* You can only search for integer or string values.


@examples

:box:Find the primitive with `@id` == 10
    {{{
    #!vex
    int prim_num = findattribval(0, "prim", "id", 10);
    // Note: you can use idtoprim(0, 10) instead
    }}}

:box:Find all points with `@age` == 10
    {{{
    #!vex
    int count = findattribvalcount(0, "point", "age", 10);
    int point_num;
    for (int i = 0; i < count; i++) {
        point_num = findattribval(0, "point", "age", 10, i);
        // ...do something with the point...
    }
    }}}


@related

- [Vex:nametopoint]
- [Vex:nametoprim]
- [Vex:idtopoint]
- [Vex:idtoprim]
- [Vex:findattribvalcount]
