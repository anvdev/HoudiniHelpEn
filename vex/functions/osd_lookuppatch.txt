= osd_lookuppatch =

#type: vex
#context: all
#tags: subd
#group: subd

"""Outputs the OSD patch and UV coordinates corresponding to the given coordinates on a Houdini polygon face."""

:usage: `int osd_lookuppatch(<geometry>, int face_id, float face_u, float face_v, int &patch_id, float &patch_u, float &patch_v)`

    If you don't specify a texture attribute, the function uses intrinsic polygon interpolants.

:usage: `int osd_lookuppatch(<geometry>, int face_id, float face_u, float face_v, int &patch_id, float &patch_u, float &patch_v, string attribute)`

    If you specify a texture attribute, the function uses the UVs in that attribute to translate the face coordinates onto the OSD patch.

Given the `face_id` and texture coordinates for a point inside the face (`face_u` and`face_v`), this function will return the corresponding `patch_id` (Catmull-Clark subdivision face) and the patch interpolants (`patch_u` and `patch_v`). The reverse function to map from patch to face is [Vex:osd_lookupface].

[Include:_common#geometry]

:arg:`face_id`:
    The primitive number of the Houdini polygon face.

:arg:`face_u`, `face_v`:
    The coordinates in the subdivision patch to map onto a Houdini primitive.
    These should have values in the range 0 to 1. Not all values are valid for triangles.
    The texture coordinates should be specified according to the attribute passed in.
    If you pass invalid coordinates, the function will fail and return `0`.

:arg:`&patch_id`:
    The function overwrites this variable with the corresponding OSD patch number.
    This is also the same integer value used to identify the face when performing PTex texture mapping.

:arg:`&patch_u`, `&patch_v`:
    The function overwrites these variables with the corresponding U/V coordinates on the OSD patch.

:returns:
    `1` on success or `0` on an error.


@examples

{{{
#!vex

// This function can be used to move points generated by a scatter SOP to the
// subdivision limit surface.  The scatter SOP needs to store the "sourceprim"
// (the Output Attributes tab).  Texture coordinates also need to be
// transferred from the source geometry.
void
movePointToLimitSurface(string file; vector P, uv; int sourceprim)
{
    int	patch_id = -1;
    float patch_u, patch_v;
    if (osd_lookuppatch(file, sourceprim, uv.x, uv.y,
	    patch_id, patch_u, patch_v, "uv"))
    {
	vector	tmpP;
	if (osd_limitsurface(file, "P", patch_id, patch_u, patch_v, tmpP))
	    P = tmpP;
    }
}

}}}


@related

- [Vex:osd_lookupface]
- [Vex:osd_patchcount]
- [Vex:osd_facecount]
- [Vex:osd_firstpatch]
- [Vex:osd_limitsurface]
