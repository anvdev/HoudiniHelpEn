#type: include

:arg:`<geometry>`:
    #id: geometry
    
    When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from.
    
    Alternatively, the argument can be a string specifying a geometry file (for example, a `.bgeo`) to read from. When running inside Houdini, this can be an `op:/path/to/sop` reference.

:arg:opinput:
    #id: opinput_arg
    
    The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on.

:arg:opinput:
    #id: chop_opinput_arg
    
    The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on.
    
    If you specify `-1`, the function uses the current CHOP node or input `0` if it is connected.

:arg:geometry:
    #id: geometry_output
    
    A string specifying a geometry file (for example, a `.bgeo`) to read from. When running inside Houdini, this can be an `op:/path/to/sop` reference.

:arg:geohandle:
    #id: geohandle_arg
    
    A handle to the geometry to write to. Currently the only valid value is `0` or [Vex:geoself], which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)

:arg:attribclass:
    #id: attribclassnogroup
    
    One of `"detail"` (or `"global"`), `"point"`, `"prim"`, or `"vertex"`.

:arg:attribclass:
    #id: attribclass
    
    One of `"detail"` (or `"global"`), `"point"`, `"prim"`, or `"vertex"`.
    
    You can also use `"primgroup"`, `"pointgroup"` or `"vertexgroup"` to [read from groups|/vex/groups].

:arg:attribute_name:
    #id: attribnamenogroup
    
    The name of the attribute to read.

:arg:attribute_name:
    #id: attribname
    
    The name of the attribute (or intrinsic) to read.

:arg:elemnum:
    #id: elemnum
    
    The point/primitive/vertex number to read the attribute value from. For detail attributes, use `0` here (the argument is ignored for detail attributes).
    
    To get the linear vertex number given a primitive number and the vertex number on the primitive, use the [Vex:primvertex] function.

:arg:intrinsic_name:
    #id: intrinsicname
    
    The name of the intrinsic to read. For example, `"pointattributes"`, `"pointcount"`, or `"bounds"`.

:null:
    #id: attrib_typeinfo_values
    
    `"none"` |
        Don't transform.
    `"point"` |
        Apply scales, rotations, and transformations.
    `"hpoint"` |
        Apply scales, rotations, and transformations to this vector4.
    `"vector"` |
        Apply scales and rotations, but not transformations.
    `"normal"` |
        Apply rotations, apply scales with inverse-transpose.
    `"color"` |
        Don't transform.
    `"matrix"` |
        Apply scales, rotations, and transformations to this matrix.
    `"quaternion"` |
        Apply rotations.
    `"indexpair"` |
        Don't transform.
    `"integer"` |
        Do not blend this value when points are averaged.
    `"integer-blend"` |
        Integer values that blend when points are averaged.
    `"texturecoord"` |
        Don't transform, and try to preserve seams when interpolating.
        Attributes with this type will show up in the UV viewport menu.

:null:
    #id: set_attrib_info
    
    Returns the value of `geohandle` on success or `-1` on failure.
    
    NOTE:
        If the attribute does not exist, this function *creates the attribute* with a default value of zero, empty string, or an empty array.
        If you want to control the default value of a numeric attribute, use [Vex:addattrib] before setting the attribute.

:arg:mode:
    #id: set_attrib_mode
    
    (Optional) if given, this controls how the function modifies any existing value in the attribute.

    `"set"` |
        Overwrite the attribute with the given value.
    `"add"` |
        Add to the attribute the value.
    `"min"`, `"minimum"` |
        Set the attribute to the minimum of itself and the value.
    `"max"`, `"maximum"` |
        Set the attribute to the maximum of itself and the value.
    `"mult"`, `"multiply"` |
        Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise.
    `"toggle"` |
        Toggles the attribute, independent of the source value.  Useful for toggling group membership.
    `"append"` |
        Valid for string and array attributes.  Appends the source value to the end of the original value.

:arg:linearvertex:
    #id: linearvertex
    
    The linear index of a vertex.
    If you have a point number and point vertex number, you can use [Vex:vertexindex] to convert them to a linear index.

:null:
    #id: noiselinks

    - [/vex/random]
    - [Vex:anoise]
    - [Vex:curlnoise]
    - [Vex:flownoise]
    - [Vex:noise]
    - [Vex:onoise]
    - [Vex:pnoise]
    - [Vex:snoise]
    - [Vex:vnoise]
    - [Vex:wnoise]
    - [Vex:xnoise]
