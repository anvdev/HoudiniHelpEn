== Ray options ==

TIP:
    When you specify a texture, such as with the `"environment"` keyword,
    you can also use the image filtering keyword arguments. See [Vex:environment]
    for a listing of the image filter keyword arguments.

:varg:scope:
    #type: string

    A list of objects which can be hit by the rays.  When specified, `scope` overrides the default scope that would have been selected for the given `raystyle`.  The `"scope:default"` value will cause the `scope` argument to use the default scope for the current context - as if the argument were not specified.
    
    Allows an override of the [scope|/vex/contexts/shading_contexts#scope] for ray-intersections.
    A special scope argument, `scope:self`, will match the currently 
    shading object.

:varg:currentobject:
    #type: material

    Used to specify what the current shading object is. For example, when used with the scope argument, `scope:self` will match the object passed in by this argument.

:varg:maxdist:
    #type: float
    #default: -1
    
    The maximum distance to search for objects. This can be used to limit the search of objects to nearby objects only. If the `maxdist` given is negative, then it will act as if there is no maximum distance.
    
    Allows an override of the maximum distance the ray can
    travel when testing for intersections. Some functions (such as
    [Vex:fastshadow]) have the maximum distance implicitly defined (by
    the length of the ray) and should probably avoid using this
    option. However, this option can be used effectively when
    computing reflections, global illumination, refraction etc.

:varg:variancevar:
    #id: varianceva
    #type: string
    
    The name of a VEX export variable to use for variance anti-aliasing. The renderer compares the value with adjacent micropolygons in micropolygon rendering to decide what shading points need additional samples (using `vm_variance` [property|/props/] as a threshold). If more samples are required, the algorithm takes samples up to the specified maximum ray samples.

    This variable must be imported from the hit surface, so it must be in the list of imported names (see "importing information back from the ray" below). If the named variable is not imported, this option will be ignored.

    Variance antialiasing puts more samples in areas of the image with high variance, for example a sharp shadow edge. It is only used when `vm_dorayvariance` is enabled. Otherwise, only the min ray samples (or an explicitly supplied `"samples"` value) are used for antialiasing of the gather loop.
    
    Overrides the global variance control (mantra's -v option)
    which is used to determine anti-aliasing quality of ray tracing.
    For more information please refer to the documentation on
    mantra.

:varg:angle:
    #type: float
    #default: 0
    
    The distribution angle (specified in radians). For gather(), rays will be distributed over this angle. For trace(), the angle is used to indicate the rate at which the filter width should increase with increasing intersection distance. Larger angles will cause farther hit surfaces to use larger derivatives, leading to improved texturing and displacement performance.
    
    To be effective, the samples parameter should also be specified.

:varg:samples:
    #type: int|float
    #default: 1
    
    How many samples should be sent out to filter rays. For the
    irradiance and occlusion functions, specifying a samples
    parameter will override the default irradiance sampling.

:varg:environment:
    #type: string
    
    If the ray sent out to the scene misses everything, then
    it's possible to specify an environment map to evaluate.

    Using the ray's direction, the environment map specified
    will be evaluated and the resulting color will be returned.
    Most likely, it will be necessary to specify a transform
    space for the environment map evaluations.

    In the case of refractlight and trace the Of and Af
    variables will be set to 0 regardless of the background
    color specified. the resulting color.

    When an environment map is specified, the filtering options
    from texture() are also supported.
    
    See [how to create an environment/reflection map|/render/envmaps].

:varg:envobject:
    #type: string
    
    If an environment map is used, the orientation of the
    environment map can be specified by transforming the ray
    into the space of another object, light or fog object in the
    scene. In Houdini, null objects can be used to specify the
    orientation. For example:
    
    {{{
    #!vex
    Cf = R*reflectlight(bias, max(R), "environment", "map.rat", "envobject", "null_object_name");
    }}}

:varg:envlight:
    #type: string
    
    If an environment map is used, the orientation of the
    environment map can be specified by transforming the ray
    into the space of a light in the scene.
    
:varg:envtint:
    #type: vector
    
    If an environment map is used, tint it with this color.

:varg:background:
    #type: vector
    
    If a ray misses all objects, use this as the
    background color of the scene. In the case of refractlight and
    trace the Of and Af variables will be set to 0 regardless of the
    background color specified.
    

:varg:distribution:
    #type: string
    
    *Functions*: [Vex:irradiance], [Vex:occlusion]
    
    Distribution for computing irradiance. The default is to use
    a cosine distribution (diffuse illumination). The possible
    values for the style are `"nonweighted"` for uniform sampling
    or `"cosine"` for cosine weighted sampling.
    
