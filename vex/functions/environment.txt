= environment =

#type: vex
#context: all
#tags: shading, color, map, file, texture
#group: texture

"""Returns the color of the environment texture."""

:usage: `vector environment(string texture_filename, vector reflect_dir, ...)`
:usage: `vector4 environment(string texture_filename, vector reflect_dir, ...)`
:usage: `vector environment(string texture_filename, vector reflect_dir0, vector reflect_dir1, vector reflect_dir2, vector reflect_dir3, ...)`
:usage: `vector4 environment(string texture_filename, vector reflect_dir0, vector reflect_dir1, vector reflect_dir2, vector reflect_dir3, ...)`
:usage: `vector environment(string texture_filename, vector reflect_dir, float filter_angle, ...)`
:usage: `vector4 environment(string texture_filename, vector reflect_dir, float filter_angle, ...)`

Returns the color of the environment texture in the direction given by the `reflect_dir` argument. The signatures that specify four vectors filter the map pixels found within the cone defined by the vectors.  Rather than specifying a filtering cone by providing four vectors, it is also possible to indicate an angle to filter over using the filter_angle argument with a single reflection direction.

The environment function can also be used to look up intensity values in an IES photometric light map, with the correct angular mapping applied.

NOTE:
    To perform environment map lookups in object space, you'll need to first transform the direction vector using the vtransform() function.

[Include:_imagefilter_variadic]


@examples

{{{
#!Vex
vector dir = vtransform("space:current", "space:object", {0, 1, 0});
vector clr = environment("sky.rat", dir);
}}}



@related

- [isixpack|/ref/utils/isixpack]
