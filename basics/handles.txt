= Using handles =

== Overview ==

:fig:[Image:/images/ui/handle_example.jpg]
    Each tool and node in Houdini can have one or more _handles_ that let you change parameters visually in the viewer by dragging the handle. (In Maya, these are called _manipulators_.)

    For example, the _move handle_ lets you move something by dragging its arrows.

The [Icon:TOOLS/move] Move ((T)), [Icon:TOOLS/rotate] Rotate ((R)), and [Icon:TOOLS/scale] Scale ((E)) tools have handles for manipulating the selected object.

The [Icon:TOOLS/handles] *Handles tool* ((Enter)) shows the handles specific to the selected node.

See also [HUD sliders|hud_sliders] and the [value ladder|ladder].

=== Example ===

# In the shelf, click the __Create__ tab and ((Ctrl))-click the [Icon:SOP/grid] Grid tool to create a new plane at the origin.

    Houdini switches to the [Icon:TOOLS/handles] Handles tool. Since a geometry object is selected, it shows the generic object transform handle.

# In the network editor, double-click the `grid_object1` container to go down to the [geometry level|objects].

# Select the `grid1` geometry node (if it's not already selected). The Handles tool shows a custom handle for setting up the grid that lets you move the grid and resize it from the corners and edges.

# Switch to the [Icon:TOOLS/select_component] Select tool ((S)) and set the selection mode to [Icon:TOOLS/select_faces] Primitives ((4)).

# Select one of the polygons in the plane.

# In the shelf, click the __Polygon__ tab, then click [Icon:SOP/polyextrude] Poly Extrude.

# Houdini adds a Poly Extrude geometry node and selects the [Icon:TOOLS/handles] Handles tools, showing an extrude handle that lets you move and rotate the extrusion.

    Try dragging the up (Y) handle to extrude the selected polygon up from the plane.

== Switching handles ==

:fig:
[Image:/images/ui/camera_orient_handle.png]
[Image:/images/ui/camera_focus_handle.png]
[Image:/images/ui/camera_frustrum_handle.png]
    Some nodes have more than one handle. For example, the *Camera* has three handles: an *orientation handle* to set the camera's position and direction, a *focus handle* to control the focal length, and a *frustrum handle* to visually edit the camera's viewing region.

    Right-click the handle and choose the handle mode from the menu.
    
    ~~~ or ~~~

    Press ((Y)) in the view to cycle between available handles for the selected node.

== Basic handles ==

=== Move === (move)

:fig:[Image:/images/ui/handle_move_anno.png]
    * Drag the point at the center to move the box.
    * Drag an arrow to move along an axis.
    * Drag a translate plane to move across that plane.
    * Move the mouse pointer to the center to show a widget in the center. Drag it to move across the construction plane.

=== Rotate === (rotate)

:fig:[Image:/images/ui/handle_rotate_anno.png]
    * Drag a ring to rotate around an axis.
    * Drag between the rings to rotate freely.
    * Drag the outer ring to rotate around the viewing angle.

=== Scale === (scale)

:fig:[Image:/images/model/scale_handle.jpg]
    * Drag an arrow to scale proportionally in all axes.
    * Drag the line behind an arrow to scale in one axis.
    * Drag a ring to scale proportionally in two axes.

=== Squash and stretch === (squash)

:fig:[Image:/images/model/squash_stretch_handle.jpg]
    
    You can switch the Scale handle to "squash and stretch" mode. In this mode decreasing one axis will increase the other two proportionally, and increasing one axis will decrease the other two.

    Right-click the Scale handle and turn on __Squash and stretch__.

=== Combined === (combined)

:fig:[Image:/images/ui/handle_combined_anno.png]
    This handle combines the rotate and move handles.
    
    * Drag the ball at an intersection of the rotate rings to rotate freely.
    * Drag a ring to rotate around an axis.
    * The move handle in the center is the same as the regular move handle (see above).

=== Box === (box)

:fig:[Image:/images/ui/boxhandle_face.png]
    * The move handle in the center is the same as the regular move handle (see above).
    * Drag a side to resize from that side.
    * Drag the arrow on a side to scale proportionally along that axis

:fig:[Image:/images/ui/boxhandle_corner.png]
    * Drag the small box on a corner to resize from that corner.
    * ((Shift))-drag the cornerto resize from the center.

:fig:[Image:/images/ui/boxhandle_facecorner.png]
    * Drag the corner of a face to scale in two directions.
    * ((Ctrl))-drag to scale proportionally.

== Persistent handles == (persist)

You can keep a node's handle on-screen while you work on other nodes. This can be useful when you want to change something in the node history and see its effects on the final result, or change something in one network and see its results in another network.

* To make a handle stay visible when the node is not selected, right-click the handle and turn on __Persistent__.
    
* To switch a handle back to only being visible when the node is selected, right-click the handle and turn off __Persistent__.

See also [HUD sliders|hud_sliders], which let you create persistent sliders in the viewer to control node parameters.

== Middle mouse button == (mmb)

When you're using a handle, you can often drag ((MMB)) anywhere in the viewer to affect the handle. This can be useful when it's hard to hit the handle widgets, or you've made the handle invisible.

Different handles map different effects to dragging ((MMB)). For example:

Handle ||
    ((MMB)) drag effect ||

[Icon:TOOLS/move] Move |
    Moves along the axis corresponding to your first movement.

[Icon:TOOLS/rotate] Rotate |
    Rotates freely.

[Icon:TOOLS/scale] Scale |
    Scales along the axis corresponding to your first movement.

Combined |
    Same as rotate.

Camera orientation |
    Moves the look-at target.

== Changing the pivot point == (pivot)

:task:Move an object/selection's pivot point:
    Right-click the handle and choose __Pivot mode__
    
    ~~~ or ~~~

    Press ((Ins)) or ((")) (double quote) to switch to the pivot handle.
    
    After you move the pivot point, turn off __Pivot mode__ or press ((Ins)) or ((")) again to return to the regular handle.

:task:Detach and move a handle from its default position:
    # Press ((')) (apostrophe) to detach the handle.

    # Use the transform handles to move the handle. For
      example, you can move the handle off to the side if it's
      obscuring the geometry you're working on.

    # Press ((')) again to return to the regular handle.
        
    This does _not_ move the object's pivot point permanently -- it changes the position of the handle, which scales and rotates are relative to. So it has the same effect as moving the pivot point, but is more transitory, for when you want to scale or rotate relative to a certain point, but don't want to mess with the actual pivot.

== How to ==

:task:Show the handle for the currently selected node:
    Click the [Icon:TOOLS/handles] Handles tool or press ((Enter)) in the viewer.

:task:Show a context menu of handle commands:
    Right-click the handle.

:task:Align the handles to world, object, camera, or parent space:
    Right-click the handle and choose an option from the __Align__
    submenu.

:task:Adjust handle values in small or large increments:
    * Press ((MMB)) on a handle part to adjust its value with a [value ladder|ladder].

:task:Key the handle parameters:
    Press ((K)).

== Handle appearance ==

:task:Make handles bigger or smaller:
    * Choose __Edit > Preferences > Handles__ and change __Handle Scale__.
    
    You can also use hotkeys in the viewer to quickly change the handle size:
    
    ((*)) |
        Bigger
    ((/)) |
        Smaller

:task:Hide a handle:
    Right-click the [Icon:TOOLS/handles] Handles tool in the toolbox to the left of the view to see a menu of all visible handles. Turn off the handle you want to hide.
    
    To make the handle visible again, select the node with the handle, right click the [Icon:TOOLS/handles] Handles tool and turn the handle on.

:task:Turn off axis coloring:
    This makes Houdini draw handles all red, instead of using red, green, and blue to color the different axes.
    
    # Choose __Edit > Preferences > Handles__.

    # Turn off __Color transform handles by axis__.
   
== Gimbal mode and fixing gimbal lock == (gimbal)

=== What is gimbal lock? ===

_Gimbal lock_ is when two rotation axes overlap, making it
impossible to rotate them independently. This can cause problems in
animation, where it can seem like rotations no longer have the
proper effect.

This happens because Houdini can't rotate all three axes at once,
but must apply rotations to one axis at a time (this is a fundamental
property of Euler angles). So, if the order is "X rotation, then Y
rotation, then Z rotation" (the default), Y and Z necessarily rotate
_independently of X_ (that is, rotating in Y does not change the X
rotation), and so you can make the axes overlap:

[Image:/images/gimbal_1.png] |
    #width: 100px
    A camera begins with rotations set to 0,0,0.

[Image:/images/gimbal_2.png] |
    Camera rotated -45 degrees around Y (the green ring). Because Y rotation is applied _after_ X, rotating around Y does not rotate X (the red ring).

[Image:/images/gimbal_3.png] |
    Camera rotated -90 degrees around Y (the green ring). The X axis (red ring) and Z axis (blue ring) now overlap.

    Since the axes overlap, changes to X and Y rotation values (in this example) do not rotate the camera around two axes... they rotate along the same axis (and may in fact cancel each other out).

=== Gimbal mode ===

Houdini's rotate handle has a "Gimbal mode" option to control how the rotation handles work.

* When *Gimbal mode is off*, Houdini does background work so you always see three rotation ring handles, and when you drag a ring, the other rings rotate with it, despite the order of rotations.

    The benefit is that it's impossible to gimbal lock the object by dragging the rotation handles. The downside is that in this mode Houdini will change all three rotation components, not just the one you're dragging. And doing rotations this way can lead to very bad animation curves.

* When *Gimbal mode is on*, Houdini displays the true position of the rotation handles, and dragging the rotation handles changes the rotation components directly, without Houdini trying to fix gimbal lock.

    The benefit is that you have direct, independent control over the three rotation components, and so you can use the handles to set up animation without worrying about Houdini changing the other components. The downside is the possibility of gimbal lock.

To turn Gimbal mode on or off, press ((RMB)) on a rotation handle and choose __Gimbal mode__.

=== How to avoid or get out of gimbal lock ===

Use the following strategies to avoid gimbal lock:

Change the rotation order:
    Changing the rotation order changes which axes affect the others. By selecting a different order of rotations, you may be able to do the same rotations without gimbal locking.

    Set the order of rotations for an object in the object's parameters.

Use a parented null to separate rotations:
    # Lock the object's __Rotate X__ and __Rotate Y__ parameters.

    # Create a [Null object|Node:obj/null], parent it to the object, and lock its __Rotate Z__ parameter.

    # Rotate the Null to control the object's X and Y rotation, and rotate the object to control its Z rotation.

    Because the rotations are on different objects, there is no chance for the axes to overlap, and so the object cannot gimbal lock.

    (If it is more convenient, you can also stack up X and Y nulls and control Z on the object, or stack up X, Y, and Z nulls and lock all rotation on the object.)

Turn off gimbal mode on the handle:
    (See above.) When Gimbal mode is off, Houdini will do extra math in the background to let you rotate the handles without worrying about gimbal lock, by changing all three rotation components.

Control rotation with look-at and up vector:
    Instead of controlling an object's rotation with the rotation handles, you can use a look-at object.

    # Create a [Null object|Node:obj/null] and set it in your object's __Look at__ parameter.

    # Transform the Null to control your object's rotation. Use your object's __Rotate Z__ or __Up vector__ parameters to roll the object.

    This lets you rotate the object without directly setting rotations, avoiding gimbal lock, and it doesn't require parenting. The downside is if your look-at Null passes through the exact position of your object, the object will flip across the axis.

Use `qlinear` expression function on the rotation channels:
    The [qlinear|Exp:qlinear] expression function on the [channels|/anim/channels]  does a quaternion, gimbal-free equivalent of the [linear|Exp:linear] function.

    `qlinear` must be on all rotation channels with names ending with `rx`, `ry`, and `rz`, and the keys must exist at the same frame.
