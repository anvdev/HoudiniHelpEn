= What was new |> in Houdini 16.5 =

"""New features and changes in Houdini 16.5."""

== User interface == (ui)

See also [Network editor|#network] and [Parameter editor|#parms].

:col:
    :new:
        The View tool now has options for [how to center tumbling, dollying, and zooming|/basics/view#pivot].

    :new:
        Rewritten [hotkey editor|/basics/hotkeys] makes it easier to customize hotkeys.
    
        [Image:/images/ui/hotkey_manager.png]

    :new:
        You can now [assign a radial menu to any key|/basics/hotkeys#radials].
    
    :improved:
        Pressing and holding ((S)) (Select tool) now switches to Select while you hold the key down, and goes back to the previous tool when you release the key. Tapping ((S)) will still switch you to the Select tool.

:col:
    :improved:
        Added a preference for the "close enough" distance (in pixels) when pointing at handles. Choose __Edit > Preferences > Handles__.

    :improved:
        Ladder controls on handles are now semi-transparent to make it easier to see the effect of changes.
    
    :improved:
        Dedicated game development tools shelf (ongoing).

    :changed:
        The view tool defaults are now to automatically set the tumble pivot on geometry under the mouse pointer when you start tumbling, and to dolly toward/away from the mouse pointer. You can [change the behavior|/basics/view#pivot] using controls in the View tool's operation toolbar or in the main preferences.


== 3D viewport == (view)

:col:
    :new:
        Fast, distance-adaptive instancing of packed primitives and Alembics in the 3D view. For example, the viewport can stream in geometry for close objects and replace far objects with bounding boxes. Distance culling controls are on the __Optimize__ tab of the Display Options window.
    
        [Image:images/distance_culling.jpg]
    
    :improved:
        Metallic map support at normal quality level.
    
    :improved:
        "Cutout" transparency quality setting hides anything with Alpha equal to 0, and shows everything else fully opaque. This is much faster because it doesn't require blending or extra display passes.
    
    :improved:
        Basic support for displaying OpenSubdiv 3.x surfaces.

    :improved:
        New option in display options sets an upper limit on the number of polygons produced by viewport subdivision (default is 10 million). If the viewport goes over the limit, it will iteratively restart at a lower subdivision level until it is under budget (this may result in no viewport subdivision at all).

:col:
    :new:
        __Lights and Cameras > Gamepad camera__ shelf tool creates a Gamepad CHOP setup to drive a camera. This is useful for flying through a scene, and as an example of using the Gamepad CHOP.
    
        [Image:images/gamepad_camera.jpg]
    
    :improved:
        The 3D view now supports instancing on points with an `instancefile` attribute (when the object has instancing turned on). Previously this only worked at render time.
    
    :fixed:
        Better near/far clipping settings when you switch from looking through a camera to the "unlocked" view.
    
    :fixed:
        You can now click buttons in the toolbars around the viewport while holding ((Space)) to enter the view tool.
    
    :changed:
        The hotkeys to turn subdivision on an object on or off (((-)) and ((=))) now require Shift (((Shift + -)) and ((Shift + =))) to prevent accidental activation.
    
    :changed:
        Houdini no longer draws a green tip on selected edges to indicate direction.


== Fluids == (fluids)

See also [what's new in dynamics|#dyno].

:col:
    :new:
        New [Adaptive narrow-band|Node:dop/flipsolver] FLIP simulations only simulates a thin top layer of a fluid.
        
        * Approximately â…“ memory usage, 3x faster.
        * Ideal for FLIP tanks.
        * OpenCL accelerated.
        
        [Image:images/narrow_band_flip.jpg]

:col:
    :new:
        Added low-cost, physically correct simulation of [bubbles and trapped air|/fluid/bubbles].
        
        * On the [FLIP solver node|Node:dop/flipsolver]'s __Volume motion > Air__ tab, turn on __Enforce air incompressibility__.
        * Works well with viscous fluids.
        * OpenCL accelerated.
        
        :video:
            #src: /videos/watercooler_trapped_air.mp4


== Hair and fur == (hair)

:col:
    :new:
        You can now partition a model into different areas with local grooms and then blend between them with the [Groom Merge|Node:obj/groommerge] object. The Guide Groom tool now supports selecting an entire object or groups of polygons. For more information, see [Fur Workflow|/fur/workflow].
        
        [Image:/images/hair/local_grooms.jpg]
    
    :new:
        [Adaptive Prune SOP|Node:sop/adaptiveprune] lets you prune hairs based on screen space.
    
    :new:
        [Groom Switch SOP|Node:sop/groomswitch] lets you switch between two grooms.
    
    :new:
        You can now groom animated and/or simulated guide hairs.

    :improved:
        Productivity and performance improvements.
        You can now input skin objects to Guide Groom and Guide Deform to set up source relationships.
        The Animate and Simulate now support selecting multiple objects.
        
        :box: Art courtesy of Andryi Belichenko
            :video:
                #src: /videos/chipmunk.mp4
                #loop: loop

:col:
    :new:
        Grow guides/hairs from curves (for example, eyelashes from an eyelid curve).

    :new:
        New [Groom Fetch SOP|Node:sop/groomfetch] for fetching data from a groom.

    :new:
        Support for variable segment count. Shorter hairs can have fewer line segments than longer hairs, keeping the hair geometry lighter.
    
    :new:
        You can now [generate hair without any guides|/fur/workflow].

    :new:
        The [Curve Advect tool|/shelf/sop_groom_curveadvect] lets you draw a few quick curves to set up large-scale groom directions.

    :new:
        Built-in guard-hair and [white hair|/shelf/sop_groom_whitehair] support for animal fur.
        
        [Image:/images/hair/guard_white_hair.jpg]

    :improved:
        Hair system is more efficient and time-independent.

    :improved:
        You can now groom animated and/or simulated guide hairs.

    :improved:
        Additional methods for interpolating between guide hairs.

    :improved:
        More flexible masking, for example by curve length or skin curvature.

    :improved:
        You can now paint on attributes to override simulation settings.

    :improved:
        The [Guide Process SOP|Node:sop/guideprocess] has many more options for controlling bending.
    
    :improved:
        The Hair Generate object now has an option to generate hair once in the rest position and deforming afterwards, using the updated Guide Deform.


== Geometry and modeling == (geo)

:col:
    :new:
        Completely rewritten [Poly Reduce node|Node:sop/polyreduce] does much better reduction much faster while retaining features and preserving quads.
    
        :box: 98% polygon reduction while retaining textures and features
            [Image:/images/nodes/sop/polyreduce_pooltoy.jpg]

    :new:
        The `abcpointcount` intrinsic attribute on packed Alembic primitives contains the number of points in the unpacked geometry.
    
    :new:
        [Edge Transport|Node:sop/edgetransport] is a highly technical SOP for generating attributes by "walking" along the edge graph formed by the input geometry.

    :improved:
        Enhanced [Topo Build|Node:sop/topobuild] interactive mode allows sliding edges, skinning polygonal "sleeves" around roughly cylindrical features such as a tail, and more accurate snapping. Topobuild can also now collapse edges and faces.
        
        :video:
            #src: /videos/topobuild_skinning.mp4

    :improved:
        Soft selection can now work by surface distance.
        
        [Image:/images/nodes/sop/surface_soft_selection.jpg]
        
    :improved:
        More geometry nodes are now [compile-able|/model/compile].
        
        // Attribute Mirror, Sequence Blend,
        
        The [Invoke SOP|Node:sop/invoke] lets you "apply" a compiled SOP block to an arbitrary input. This can be used to reduce duplication in a network, or to allow an asset to accept a reference to a block as a parameter and use the block to modify how the asset works.
        
        You can now set the `HOUDINI_SOP_DISABLE_COMPILENODE` environment variable to make compiled blocks run in non-compiled mode. This may be useful for testing.
    
    :improved:
        [Fast alignment|/model/aids#align] of handles and construction plane.

:col:
    :improved:
        [Move Center to Pivot|/shelf/movetopivot] shelf tool that translates an object's geometry to its local object origin. For consistency, the "Center Pivot" tool is now called [Move Pivot to Center|/shelf/centerpivot].

    :improved:
        Improvements to Alembic IO. Ogawa files now load in parallel. Animated Alembics can play back much faster. Caching allows multiple SOPs to reference the same Alembic with less cost.
        
    :improved:
        A display option in the 3D viewer lets you color *3D boundaries* (unshared edges) or *UV boundaries* differently to make them easier to see (pop-up menu on the __Markers__ tab under "Draw"). A new option "UV boundaries in UV only" lets you color UV boundaries only in a UV viewport (not in 3D).

    :improved:
        Objects and geometry nodes now have a separate Pivot Rotate parameter to rotate the geometry's local axes. Previously, it was only possible to translate the local axes. Rotating the local frame of reference can make it easier to animate along non-axis-aligned directions.
    
        The interactive pivot handle now allows rotation as well as translation. (Press ((Ins)) or ((')) to switch to the pivot handle.)

    :improved:
        Many improvements to Alembic loading and saving.
    
    :improved:
        New parameter on [Repack SOP|Node:sop/repack] lets you convert packed fragments to regular packed primitives.
    
    :improved:
        The grouping syntax now accepts `.r`/`.g`/`.b` and `.u`/`.v` in addition to `.x`/`.y`/`.z` for attribute component comparison. For example `@Cd.r>0.1`.
    
    :improved:
        The [Assemble SOP|Node:sop/assemble] now has controls to transfer groups as well as attributes.
    
    :improved:
        The [Sequence Blend|Node:sop/sblend] has been redesigned, is compile-able, and supports smooth attribute interpolation.

    :improved:
        The [Tube SOP|Node:sop/tube] now has an option to generate the minimal axis-aligned cylinder that contains all the points in the input geometry.

    :improved:
        In the [Add SOP|Node:sop/add], adding polygons "by attribute" is now faster.

    :changed:
        The [Subdivide SOP|Node:sop/subdivide] now uses OpenSubdiv 3.x, which is 2x faster. Changed some parameter names to better reflect how they work with the OpenSubdiv implementation.
    
    :changed:
        In geometry node [group fields|/model/groups#manual], `*` now means "match everything", and `!*` means "match nothing". Previously, `*` meant "match anything in a named group", which is now `?*`.
    
    :changed:
        The [File Cache|Node:sop/filecache] node's __Pack using expanded/absolute file paths__ parameter is now on by default to match the File SOP.
        
    :changed:
        Removed the For Each subnet.


== Volumes, height fields, and terrain == (volumes)

:col:
    :new:
        [Heightfield Patch|Node:sop/heightfield_patch] smoothly "pastes" a feature from one height field into another.
        
        [Image:/images/nodes/sop/terrain_patch.jpg]

    :improved:
        [Heightfield Blur|Node:sop/heightfield_blur] can now blend the edges when the blur is masked. This fixes any big discontinuities along the mask edges that might be created if the mask is not feathered.

:col:
    :new:
        [Volume Patch SOP|Node:sop/volumepatch] smoothly "pastes" a feature from one volume into another.

    :improved:
        Edge detection added to [Volume Analysis SOP|Node:sop/volumeanalysis]. This currently supports both Sobel and Prewitt edge detection.


== Textures and UVs == (uvs)

:col:
    :new:
        New features in the viewport and in texture SOPs to support arbitrary UV attributes.
        
        [Image:/images/ui/uvmenu.jpg]
        
        * In the UV viewport the "camera" menu on the right is now replaced with a UV menu containing texture-related functions.
        * You can now [specify an attribute as being meant for UVs|Node:sop/attribcreate#typeinfo]. This makes the attribute show up in various lists of UV attributes in the UI.
        * You can now view different UV attributes in the UV viewport.
        * Most UV-related SOPs have been updated with a parameter to let you choose which UV attribute to operate on.
        * When you work interactively in the viewport, UV operations automatically use the UV attribute of the previous node.
    
    :new:
        You can now choose the UV viewport background image from a list of associated textures/materials in the UV menu.
        
        The background image now works with UDIM and UVtile maps.
    
    :improved:
        Better UV generation on [Poly Extrude|Node:sop/polyextrude] and [Poly Bridge|Node:sop/polybridge] nodes. You can now automatically generate linear texture maps for bridges and extruded side polygons for every existing texture attribute, with control over island scale and shape.
    
    :improved:
        You can now select points when displaying vertex UVs in the UV viewport.
    
    :improved:
        The UV viewport only shows the current/selected object when you are at the object level.

:col:
    :improved:
        [UV Layout node|Node:sop/uvlayout] now has very fast optimal packing with support for packing inside holes and rotational fitting.
    
        [Image:/images/nodes/sop/uvlayout_after.jpg]
        [Image:/images/nodes/sop/uvlayout_detail.jpg]
    
    :improved:
        The file browser's __Show sequences as one entry__ option now works with UDIM and UVTile filenames.
    
    :improved:
        The [color visualizer|/visualizers/color] can now visualize "texture distortion" directly. This visualizer is now available in the UV viewport's UV menu.
        
        Previously the visualizer relied on the UV Flatten SOP generating a `distort` attribute. That attribute is no longer generated.

    :changed:
        With the new built-in support for multiple texture attributes, the Layer SOP is now deprecated. If you were using it to swap other attributes, use [Attribute Swap|Node:sop/attribswap] instead.
    

== Shading and rendering == (render)

:col:
    :new:
        New __Rounded edge__ parameter on [Principled shader|Node:vop/principledshader] and [Classic shader|Node:vop/classicshader], based on new [Rounded Edge VOP|Node:vop/roundededge] creates the appearance of rounding along a hard polygonal edge, with optional dirt masks.
        
        :box: Art courtesy of Magnus Larsson
            [Image:images/rounded_edge_rendering.jpg]
            //[Image:images/rounded_dirtmap_before.jpg]
            //[Image:images/rounded_dirtmap_after.jpg]

    :new:
        New options in the render view's bottom toolbar let you easily [save the image to a file, and/or auto-save|/ref/views/ipr#save] the image at intervals as it renders.
    
    :new:
        Cryptomatte support in rendering and [compositing|Node:cop2/cryptomatte].
    
    :improved:
        More refinement of new material workflow introduced in Houdini 16.
    
    :improved:
        Dramatically reduced indirect specular noise.
    
    :improved:
        Much faster rendering of nested procedurals and packed primitives.
    
    :improved:
        Improved sampling of PBR lights.
    
    :improved:
        Improved flipbooking.

        * Flipbook all viewports in the view as a single image.
        * Filter what object types appears in the flipbook.
        * Flipbook to MPlay and disk at the same time.
        * The frame range setting now has a menu with common presets.
        * Option to leave the playhead at the last frame when done flipbooking (to make it easier to concatenate different sequences into one flipbook).

:col:
    :new:
        New __Volume quality__ parameter on the [Mantra node|Node:out/ifd] to control indirect volume bounces.

    :new:
        [PBR Single Scatter VOP|Node:vop/pbrsingles] is a much faster but less accurate single-lobe sub-surface scattering (SSS). This is useful whenever speed is more important than the highest quality. Single scatter is now available as an option on the [Principled shader|Node:vop/principledshader] and [Classic shader|Node:vop/classicshader].
    
    :new:
        [Cmd:imgsave] command to allow saving to disk in MPlay and Houdini.
    
    :improved:
        The [Classic shader|Node:vop/classicshader] now has an option to use packed primitive alpha (`Alpha` attribute). Previously it always used point alpha, and this is still the default.

    :improved:
        Faster texture baking.
        
        // Fast baking by turning off all lighting on primary image plane

    :improved:
        Simplified the LUT/gamma/ICIO interface in the color correction toolbar.

    :improved:
        New `-t` option to render a specific tile in `mantra` makes it easy to distribute rendering of a single frame.

    :improved:
        PBR subsurface scattering is now evaluated during direct lighting. It no longer relies on indirect bounces.

    :improved:
        Updated to OpenSubdiv 3.1.

    :improved:
        The [Mantra:vm_cuspangle] detail property can now control the cusp angle for automatic vertex normals in geometry in Mantra. Previously this only worked in the 3D view.

    :changed:
        The Principled Shader now multiplies any alpha in the opacity texture with the color values, just like the Classic Shader.

    :changed:
        Houdini now ignores camera scaling by default when rendering. If you are actually using camera scaling, you can add the [Mantra:vm_removecamerascale] property and turn it off.

    :fixed:
        Mantra's default surface shader (the shader used when a surface has no explicit shader) now uses an `Alpha` attribute on the geometry if it exists. This matches how the 3D view works.


== Crowds == (crowds)

:col:
    :new:
        New Partial Ragdoll settings on the [Crowd State node|Node:dop/crowdstate] lets you specify a named group of joints to ragdoll (for example, only ragdoll from the waist up).
        
        [Image:images/partial_ragdoll.jpg]
    
    :new:
        [Agent Relationship SOP|Node:sop/agentrelationship] creates hierarchical relationships between agents (for example, rider parented to horse).
        
        [Image:/images/crowds/agent_hierarchy.jpg]
    
    :new:
        New "Motors" settings on the [Crowd State node|Node:dop/crowdstate] let a ragdoll character still put a certain amount of effort into moving its joints according to an animation clip.

    :improved:
        You can now set agents to partially rag-doll on the [Crowd State node|Node:dop/crowdstate]. You can set a named set of joints to rag-doll, and/or you can specify that joints try to follow their animation clip but also react to RBD collisions.
    
    :improved:
        New stiffness settings on [Crowd State node|Node:dop/crowdstate] prevent loosely swinging limbs on ragdolls.
    
    :improved:
        Agent FBX Import now creates extra channels in the animation clip for user-defined properties.

:col:
    :new:
        [Agent Arcing Clip Layer DOP|Node:dop/agentarcingcliplayer] blends between a set of clips based on the agent's turn rate and direction, for smarter quadruped terrain adaptation and banking.
        
        [Image:/images/crowds/agent_banking.jpg]
    
    :improved:
        The [Agent Clip Transition Graph SOP|Node:sop/agentcliptransitiongraph] has new options to automatically compute transition points between clips, making it much less work to set up smooth transitions between clips.
    
    :improved:
        You can now use [Agent Edit SOP|Node:sop/agentedit] interactively in the 3D view. Agent Edit can now adjust transforms in the agent's local space instead of world space. You can now adjust a joint's scale transform. Agent Edit can now use VEXpressions to vary the transform parameters for each agent.
    
    :improved:
        There is now an option on the [Agent Layer SOP|Node:sop/agentlayer] to filter which shape bindings to copy.
    
    :improved:
        The [Agent CHOP|Node:chop/agent] can now create a clip from an agent's transforms.

    :improved:
        [Agent Terrain Adaptation SOP|Node:sop/agentterrainadaptation] now has an option to disable adaptations that use an underling DOP simulation (such as foot locking and leaning). When this option is off, the node switches to a stateless implementation that allows fast preview and scrubbing.
    
    :fixed:
        If an agent "transitions" to the same clip (without a transition graph), the clip will now continue instead of resetting to the first frame.


== Character == (char)

:col:
    :new:
        New [Motion Path handle|/basics/motionpath] in the [pose tool|/character/pose_tool] lets you view and edit an object's path through space over time.
        
        [Image:/images/handles/motionpath_options.jpg]

    :new:
        Quadruped and Basic Head [autorigs|/pypanel/autorigs].
        
        [Image:/images/autorigs/quadruped.jpg]
        [Image:/images/autorigs/basichead.jpg]
    
    :new:
        Added a shelf tool and [object node|Node:obj/mcacclaim] for importing Acclaim motion capture data.
    
    :improved:
        Objects now have a separate Pivot Rotate parameter to rotate the geometry's local axes, for better animation control. Press ((Ins)) or ((')) to switch to the pivot handle.

:col:
    :improved:
        Enhanced X-ray display and better selection of X-ray objects.
    
        :video:
            #src: /videos/minotaur_xray.mp4
            #loop: loop

    :improved:
        Big improvements to the beta muscle and flesh system.
        
        * Comprehensive non-simulated and simulated workflows.
        * Advanced Muscle asset.
        * Muscles can be imported as deforming geometry or simulated with flesh system.
        * Density-based FEM constraint regions.
        * Anisotropic FEM fibre contraction.
    
    :improved:
        Improvements to [Pose Library|/pypanel/poselibrary] interface, including baking.
    
    :improved:
        Refinements to the CHOP-based animation constraint system introduced in Houdini 16.
    
    :improved:
        [Icon:TOOLS/pose] [Pose tool|/character/pose_tool] promoted to toolbox on left side of viewer pane.
    
    :improved:
        Improved [Align Capture Pose|/shelf/aligncapturepose] tool.
        
    :improved:
        You can now choose whether FBX export creates an extra root for the Export node's subnetwork.


== Network editor == (network)

:col:
    :new:
        You can now save you node type color and shape assignments as a theme, and switch between themes.

    :new:
        New node badges: "bone object has kinematics", "node has take data", and "node needs to cook".

    :new:
        New badge options.
        The comment and descriptive parameter are now treated as text badges.
        Text badges have more options such as to show full text for the selected nodes, but abbreviated text for unselected nodes.

    :improved:
        Smarter multi-wiring.
        During a wiring operation, you can Shift-click other inputs/outputs to add them to the operation.
        If you are wiring multiple inputs and Alt-click in space Houdini will create a dot. 
        If you are wiring multiple outputs and Alt-click in space, Houdini will create a Merge node and continue wiring the merged output.

    :improved:
        Hold ((Ctrl)) when minimizing/restoring a network box to move other nodes around the netbox to account for its new size.
    
    :improved:
        When a node inside a minimized netbox is selected, the netbox is highlighted and the name of the node is drawn next to it.
    
    :improved:
        Many improvements to the Find dialog.
        Improved performance.
        Pin the dialog to have multiple Find dialogs open.
        Optional recursive search of child nodes.
        You can now search by the raw textual contents of parameters (for example, you can search for uses of specific variables or expression functions).

:col:
    :improved:
        Nodes with required inputs now have a red triangle drawn above the input as a visual hint.

    :improved:
        You can now hold ((S)) to enter a "select-only" mode. While you hold the key down, clicking and dragging will only select. This makes it easy to select nodes without worrying about moving the node or accidentally clicking wires, flags, or other UI.

    :improved:
        You can now ((Ctrl + Shift + LMB)) click nodes to toggle selected/unselected, as you can with items in the 3D view.

    :improved:
        The network editor toolbar now has a button to show or hide the node palette.

    :improved:
        Faster display of representative parameter text badges.

    :improved:
        You can now [set a custom descriptive parameter on a node|/network/badges#descriptive] using HOM.

    :improved:
        The labels in the top left and right corners of the network editor are now generated by a replaceable script (`PATH/python2.7libs/nodegraphtitle.py`)
    
    :improved:
        The network editor will now look for `PATH/python2.7libs/nodegraphhooks.py` and import it. This provides a standard place for expert users to hook into network editor events. See [extending the network editor|/hom/network] for more information.

    :changed:
        Quick marks are now saved with the scene file.
    
    :dev:
        Added HDK examples for providing custom icon or text badges in the `$HT/sampels/OPUI` directory.


== Parameter editor == (parms)

:col:
    :new:
        Click the [Icon:BUTTONS/search] search icon in the parameter editor to show the [filter and search toolbar|/network/parms#search].
        
        [Image:images/typed_filter.png]

    :new:
        You can now right-click a parameter and use items in the __Reference__ submenu to create references in the parameter to other parameters, local variables, or geometry transforms using a [chooser interface|/network/copying#data].
    
        [Image:images/data_chooser.png]

:col:
    :improved:
        Tabs that contain off-default parameters are now bolded.

    :improved:
        Tabs and multi-parms now have __Disable when__ and __Hide when__ options in the type properties editor, allowing an asset author to hide or disable them based on other parameter values.

    :improved:
        The parameter editor's gear menu is now in the customizable XML format (`$HFS/ParmGearMenu.xml`).

    :changed:
        ((Ctrl + Backspace)) in a text field now deletes the word before the cursor. ((Ctrl + Delete)) deletes the word after the cursor.


== Dynamics and effects == (dyno)

See also [what's new in fluids|#fluids].

:col:
    :new:
        New [Constrain Region tool|/shelf/feconstrainregion] on the __Solid__ shelf welds two solid (FEM) objects together where they overlap. This lets you union two shapes, or pull one solid by manipulating another solid constrained to it.

    :new:
        New [Visualize Finite Element tool|/shelf/fevisualize] on the __Solid__ shelf colors tets to visualize properties such as energy level or tetrahedron quality. It can also hide part of a solid object to allow you to see the tets inside.

    :new:
        [Volume Optical Flow SOP|Node:sop/volumeopticalflow] generates an advection field from the motion in a video source.
        
        [Image:/images/nodes/sop/optical_flow.jpg]
    
    :new:
        New, faster Bullet constraint solver.
        
        The __Use parallel constraint solver__ is replaced with a menu to choose the new replacement solver or the old default solver. The old solver works well in specific situations (for example ragdolls that aren't piled on each other) but ends up being essentially single-threaded in most scenarios like a building collapse.
    
    :improved:
        You can now attach constraint network geometry as subdata instead of as a relationship.
    
    :improved:
         Added a Solver Tolerance parameter to the Bullet solver to let the solver stop early if it is "close enough". The Bullet solver now always outputs `force`, `torque`, `distance`, and `angle` attributes.

:col:
    :new:
        New [Constraint Network Visualization DOP|Node:dop/constraintnetworkvisualization] draws guide geometry representing relationship or geometry subdata.

    :improved:
        The FEM solver now generates attributes containing information about forces and collisions.
    
    :improved:
        The Solid and Hybrid objects now display statistics about the computed material properties and distributed soft constraint coefficients. This can be useful when using multiplier attributes.

    :improved:
        Added new options for the Cone Twist constraint's guide geometry.

    :improved:
        The [Constraint Network DOP|Node:dop/constraintnetwork] now has an option to use geometry from the parent DOP network's inputs.

    :changed:
        Removed the ODE Solver and ODE Configure Object DOPs. ODE is now replaced by the Bullet solver.
    
        The Bake ODE SOP is now deprecated. To set up compound shapes, use the __Create Convex Hull Per Set Of Connected Primitives__ parameter on the RBD object node instead.
    
        Removed the deprecated Glue Network Constraint, Glue Network Relationship, Spring Network Constraint, and Spring Network Relationship nodes. Use [Constraint Network|Node:dop/constraintnetwork] instead.
        
        Removed the deprecated Glue Pieces SOP. Use [Connect Adjacent Pieces|Node:sop/connectadjacentpieces] instead.

    :changed:
        For constraint networks, the Bullet solver now skips constraints where the name point attribute is non-empty and does not specify a valid object.
        To constrain an object to a world space position, use an empty string (`@name=""`).


== CHOPs == (chops)

:new:
    [Gamepad CHOP|Node:chop/gamepad] translates game controller inputs into channel data.

:new:
    [Mouse3D CHOP|Node:chop/mouse3d] translates inputs from a 3D mouse (such as a SpaceMouse) device into channel data.

:new:
    [Device Transform CHOP|Node:chop/devicetransform] converts device channel data (such as from the Chamepad CHOP) into a transform.


== VEX and VOPs == (vex)

:col:
    :new:
        VEX now caches compiled function specializations to disk, improving compile times.
        
        You can use the new `vexcache` command line utility to manage this cache. Use `vexcache -h` to see its options.
    
    :new:
        VEX now does some just-in-time compilation of imported functions.
        
        You can disable this feature using the `$HOUDINI_VEX_JIT_OPTIMIZE` environment variable.

    :new:
        New OpenSubdiv VOPs: [Node:vop/osd_facecount], [Node:vop/osd_firstpatch], [Node:vop/osd_limitsurface], [Node:vop/osd_lookupface], [Node:vop/osd_lookuppatch], [Node:vop/osd_patchcount].
        
        New channel VOPs: [Node:vop/chattr], [Node:vop/chinputn], [Node:vop/chsetattr], [Node:vop/setchannels].
        
        Other new VOPs: [Node:vop/normalclamp], [Node:vop/promotelayerexport].
    
    :new:
        New functions: [Vex:agenttransformgroupweight], [Vex:agentfindtransformgroup], [Vex:chu], [Vex:ch2], [Vex:chexpr], [Vex:chexprf], [Vex:chexprt], [Vex:maketransform], [Vex:cracktransform], [Vex:ocio_activedisplays], [Vex:ocio_activeviews], [Vex:ocio_roles], [Vex:ocio_transform], [Vex:slerp].
    
    :improved:
        Fast compilation of Unified Noise.

:col:
    :new:
        New [Periodic Worley Noise|Node:vop/pworleynoise] VOP. See also [Vex:cwnoise], [Vex:mwnoise], [Vex:wnoise].

    :new:
        New Manhattan and Chebyshev noise distance metrics generate different looks.
        
        [Image:images/noise_distance_metrics.jpg]

    :improved:
        Houdini now loads VEX plugins from directories in the new `$HOUDINI_VEX_DSO_PATH` environment variable, if it exists. You no longer need to list VEX plugins in a separate index file.
    
    :changed:
        Limit surface evaluation in VEX will give slightly different values. OpenSubdiv 3.0 did not support limit surface evaluation of Houdini vertex attributes.
        
        Houdini will linearly interpolate vertex attributes across the ptex patch until we correct interpolation with the new OpenSubdiv 3.1 version. This may be addressed in a future nightly or production build.
    
    :changed:
        Removed `create_cdf` and `create_pdf` functions.
    
    :fixed:
        [Invert VOP|Node:vop/invert] now works on `vector2`.


== Miscellaneous == (misc)

:new:
    New "Directory" parameter type takes a path to a filesystem directory.

:new:
    You can now add callback scripts for events related to asset libraries and the HIP file. For assets see [Hom:hou.hda] and [Hom:hou.hdaEventType]. For the HIP file see [Hom:hou.hipFile] and [Hom:hou.hipFileEventType].

:new:
    New [Hom:hou.Parm#rawValue] method lets you get the actual textual content of a parameter, without evaluation or variable substitution.

:improved:
    XML menus are now more capable. You can generate an item's label and control whether it's disabled with Python snippets.

:improved:
    You can now use `sesictrl` to redeem entitlements on the command line without any interactive prompts. Specify your login information using the `-A` flag and the entitlements as extra arguments to `-L`. For example:
    
    {{{
    #!sh
    sesictrl -A "user@company.com" "secret" -L "Houdini FX" "5" "Houdini Core" "5"
    }}}

:improved:
    If a parameter menu contains only integers, you can now turn on an option to use the integer values as the menu item tokens instead of the indices.

:improved:
    You can now create string array attributes with a tuple size greater than 1.
    String attributes no longer distinguish between null and empty string. There is only empty string, which has string index -1.

:dev:
    Better HDK documentation and examples.

:dev:
    Complete insulation of HDK from Boost.






