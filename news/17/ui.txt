= What's new in Houdini 17 |> User interface, Scripting, General =


== Selection ==
:col:
    * "*Secure selection*" is now *on by default*. This means when you're in a state with handles that allows selection, you must use the ((S)) key to select.
    
        ((S)) is a _volatile hotkey_. You can tap ((S)) to temporarily enter the select state, perform the selection, and then tap ((S)) again to return to the previous state. *Or*, you can _hold_ ((S)), perform the selection, and then _release_ ((S)) to return to the previous state.
    
        For example, the [Icon:TOOLS/move] Move tool gives you translate handles for the selected object(s). With secure selection _off_, you can click freely to select other objects to translate. With secure selection _on_, you can only interact with the handles. To change the selection, you must use the ((S)) key.
    
        This is intended to prevent accidental selection changes due to mis-clicks when trying to use handles. You can turn secure selection off if you prefer (see below).

:col:
    * The Secure Selection setting for the session is now controlled by a button below the [Icon:TOOLS/select] Select tool in the toolbar to the left of the viewer. (Previously it was in a pop-up menu attached to the Select tool.)
    
    * To turn off Secure Selection by default, choose __Edit > Preferences > Objects and Geometry__, and turn off __Secure Selection On by Default__.
    
    * The scene viewer now shows an icon indicating whether secure selection is on or off next to the viewport menus.
    
        [Image:/images/ui/secure_selection_indicator.png]


== Network editor ==

:col:
    * New __Edit > Rename Nodes__ command lets you [mass rename nodes|/network/rename] using powerful pattern matching.
    
        [Image:/images/ui/rename_nodes.png]
    
    * More options in [node search|/network/find].

:col:
    * ((MMB)) info window now shows which attributes are added, deleted, or (optionally) changed by the node. You can click an attribute name in the info window to create a visualizer for the attribute.
    
        [Image:/images/ui/info_window_attrs.png]


== Parameter editor ==

:col:
    * More options in the parameter search and filter interface, including hidden and invisible paramters.

:col:
    * [Color editor|/ref/windows/coloreditor] now supports specifying colors using hex (for example `FF9900`).


== Python scripting (HOM) ==

:col:
    * New framework for scripting [custom viewer tool states|/hom/python_states]. You can create a state that takes over the viewer when the Handles tool is editing your asset, or even create a "nodeless" state, for example to inspect geometry.
    
        Currently you can only create SOP-level states.
    
        This exciting new feature was built as much as possible on existing code and functionality in Houdini. As such, the overall workflow can be quite low-level. We look forward to users making their own custom states and giving us feedback on how to improve the process.

:col:
    * [Hom:hou.Geometry] has new methods:
    
        * Accelerated [Hom:hou.Geometry#intersect] method.
    
        * `Geometry.prim(index)` and `Geometry.point(index)` methods to access [Hom:hou.Prim] and [Hom:hou.Point] objects in the geometry by number.
    
        * Methods for attribute capture regions and point normals.
~~

:col:
    * New `OnInstall` and `OnUninstall` asset event callbacks. These scripts run when the library file the asset is inside is installed or removed. Also, `OnUninstall` runs before an asset's definition is changed, and `OnInstall` runs after the definition is changed.
    
    * More support in HOM for crowds.
    
    * [Hom:hou.hmath#intersectPlane] finds the intersection between a ray and an arbitrary plane.
    
    * New methods on [Hom:hou.Node]:
    
        * You can now store "data blocks" on node instances. This is like user data but more efficiently stores large binary blobs.
    
        * [Hom:hou.Node#allSubChildren] and [Hom:hou.Node#globParms].
    
    * You can now specify the icon and label in the operation toolbar when you script asking for a selection with the [Hom:hou.SceneViewer] selection methods.
    
    * You can now pass arguments to the callback script in [Hom:hou.Parm#pressButton].
    
:col:
    
    * new `path_match` argument to [Hom:hou.patternMatch] allows `**` pattern for matching any number of nested directories.
    
    * New classes: [Hom:hou.AgentShapeDeformer], [Hom:hou.Drawable], [Hom:hou.GeometryDelta], [Hom:hou.ReferencePlane], plus more specifically related to [custom viewer tool states|/hom/python_states].
    
    * You can now script most viewer/viewport settings and camera linking. See [Hom:hou.GeometryViewport], [Hom:hou.GeometryViewportDisplaySet], and [Hom:hou.GeometryViewportSettings].
    
    * You can now get event callbacks from [Hom:hou.GeometryViewport]. Currently the only supported event is `CameraSwitched`.
    
    * The [Hom:hou.hotkeys] module was updated and improved. We intend to overhaul how hotkeys work in a future version of Houdini so this API may still change.


== Command line ==

:col:
    * New `-desktop` startup argument lets you specify which pane layout Houdini should start in. This is a one-time override that does _not_ change the saved desktop preference.
    
        {{{
        #!sh
        > houdini -desktop Animate
        }}}
:col:
    * New startup switches `-core`, and `-force-fx-license` let you specify what type of license Houdini should use.



