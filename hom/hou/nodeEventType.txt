= hou.nodeEventType =
#type: hommodule
#cppname: HOM_nodeEventType
#group: nodes

"""Enumeration of types of events that can happen to nodes."""

Node event callbacks let you run code when events occur on an individual node instance. See [Hom:hou.Node#addEventCallback].

For all event types, the callback is called with a `node` keyword argument (containing a [Hom:hou.Node] reference to the node) and an `event_type` argument (containing one of the values below, indicating the type of event that occured).

Some event types pass additional keyword arguments to the callback function, as noted below.


@values

:: `BeingDeleted`

    Runs before a node is deleted. You cannot cancel the deletion.

:: `NameChanged`

    Runs after a node was renamed. You can get the new name using [Hom:hou.Node#name].

:: `FlagChanged`

    Runs after one of the node's [flags|/network/flags] was turned on or off.

:: `AppearanceChanged`

    Runs after the an event occurs that changes what the node looks like in the network editor. This includes but is not limited to:
    
    * Color or shape changed
    * Error triggered or cleared
    * Selected or deselected
    * Asset locked or unlocked
    
    *Extra keyword argument*: `change_type` ([Hom:hou.appearanceChangeType])

:: `PositionChanged`

    Runs after the node is moved in the network editor. You can get the node's new position using [Hom:hou.Node#position].

:: `InputRewired`

    Runs after one of the node's inputs are connected or disconnected.
    
    *Extra keyword argument*: `input_index` (int) -- the input number (starting at 0) that changed.

:: `InputDataChanged`:
    The data on changed on a node this node depends on. For example, if this node references another node in an expression.
    Houdini _does not_ trigger this event when a parameter changes.

:: `ParmTupleChanged`
    Runs after a parameter value changes. You can get the new value using [Hom:hou.ParmTuple#eval].
    
    *Extra keyword argument*: `parm_tuple` ([Hom:hou.ParmTuple]).
    
    NOTE:
        If many/all parameters on the node change at the same time, instead of calling the handler for each one, Houdini will call the handler once with a `parm_tuple` argument of `None`. Your callback code should be handle this possibility.

:: `ChildCreated`

    For a subnet node (for example, a [Geometry object|Node:obj/geo]), runs after a new node is created inside.
    
    *Extra keyword argument*: `child_node` ([Hom:hou.Node])

:: `ChildDeleted`

    For a subnet node (for example, a [Geometry object|Node:obj/geo]), runs _before_ a node is deleted inside. You cannot cancel the deletion.
    
    *Extra keyword argument*: `child_node` ([Hom:hou.Node])

:: `ChildSwitched`

    For a subnet node (for example, a [Geometry object|Node:obj/geo]), runs after the current node, display flag, or render flag changes inside (meaning the 3D view will change).
    
    *Extra keyword argument*: `child_node` ([Hom:hou.Node]) -- the newly selected child node.

:: `ChildSelectionChanged`

    For a subnet node (for example, a [Geometry object|Node:obj/geo]), runs after the selection changes inside. You can get the new selection with [Hom:hou.Node#selectedChildren].

:: `SpareParmTemplatesChanged`
    Runs after a [spare parameter|/network/spare] is modified on, added to, or removed from the node.
    
    NOTE:
        If the node has spare parameters, this event triggers when _any_ parameter is modified, not just a spare parameter.

:: `SelectionChanged`
    Runs after the selection associated with a node changes. This only applies to the geometry selected on a SOP node, or the scene graph primitives selected in a LOP Network.

