= hou.PaneTab =
#type: homclass
#cppname: HOM_PaneTab
#group: ui

"""One of the tabs inside a desktop pane."""

Each pane type is of a particular type (e.g. scene viewer, network view,
parameters, etc.).  A pane may contain multiple tabs and displays the contents
of one tab at a time.

See [Hom:hou.Desktop] for more information about panes and pane tabs.

@methods

::`name(self)` -> `str`:
    #cppname: HOM_PaneTab::name
    #replaces: Cmd:pane
    Return the name of this tab.

::`setName(self, name)`:
    #cppname: HOM_PaneTab::setName
    #replaces: Cmd:pane
    Set the name of this pane tab.  A pane tab name may contain spaces.

    Note that this name is the internal name of the tab, and is different from
    the label displayed in the interface.

::`type(self)` -> [Hom:hou.paneTabType] enum value:
    #cppname: HOM_PaneTab::type
    Return the type of this tab (i.e. whether it is a scene viewer, parameter
    editor, network editor, etc.).

::`setType(self, type)` -> [Hom:hou.PaneTab]:
    #cppname: HOM_PaneTab::setType
    #replaces: Cmd:pane
    Create a new pane tab of the given type, replace this tab with it, and
    return the new pane tab.  Use the returned pane tab afterward; references
    to this tab become invalid.

::`close(self)`:
    #cppname: HOM_PaneTab::close
    #replaces: Cmd:pane
    Close the pane tab.

::`pane(self)` -> [Hom:hou.Pane] or `None`:
    #cppname: HOM_PaneTab::pane
    Return the pane in the desktop that contains this pane tab.  Note that pane
    tabs in regular floating panels are always in a pane, since regular
    floating panels contain one or more panes.

    However, some floating panels have their content stripped down to only
    contain one particular pane tab type, and do not display the user interface
    to add more pane tabs, split the pane, etc.  This method returns None for
    these stripped down floating panels.

::`floatingPanel(self)` -> [Hom:hou.FloatingPanel] or `None`:
    #cppname: HOM_PaneTab::floatingPanel
    Return the floating panel that contains this pane tab or None if the pane
    tab is not in a floating panel.

::`isCurrentTab(self)` -> `bool`:
    #cppname: HOM_PaneTab::isCurrentTab
    Return whether this tab is the selected tab in the containing pane.

::`setIsCurrentTab(self)`:
    #cppname: HOM_PaneTab::setIsCurrentTab
    Set this tab as the selected tab in the containing pane.

::`isFloating(self)` -> `bool`:
    #cppname: HOM_PaneTab::isFloating
    #replaces: Cmd:pane
    Return whether this pane tab is in a floating panel.

    This method can be approximately implemented as follows:
    {{{
    #!python
    def isFloating(self):
	return self.pane() is None or self.pane().floatingPanel() is not None
    }}}

::`clone(self)` -> [Hom:hou.PaneTab]:
    #cppname: HOM_PaneTab::clone
    Create a floating copy of the pane tab and return the cloned pane tab.
    The new pane tab is in a new floating panel.

::`linkGroup(self)` -> [Hom:hou.paneLinkType] enum value:
    #cppname: HOM_PaneTab::linkGroup
    Return the link group that this pane tab belongs to.

    See also [Hom:hou.PaneTab#isPin].

::`setLinkGroup(self, group)`:
    #cppname: HOM_PaneTab::setLinkGroup
    Set the link group membership of this pane tab.

::`isPin(self)` -> `bool`:
    #cppname: HOM_PaneTab::isPin
    Return whether this pane tab is pinned.  This method is equivalent to
    `(self.linkGroup() == hou.paneLinkType.Pinned)`

    See also [Hom:hou.PaneTab#linkGroup].

::`setPin(self, pin)`:
    #cppname: HOM_PaneTab::setPin
    If pin is `True`, set the link group membership to hou.paneLinkType.Pinned.
    Otherwise, set it to hou.paneLinkType.FollowSelection.  This method can be
    implemented using [Hom:hou.PaneTab#setLinkGroup] as follows:

    {{{
    #!python
    def setPin(self, pin):
	if pin:
	    self.setLinkGroup(hou.paneLinkType.Pinned)
	else:
	    self.setLinkGroup(hou.paneLinkType.FollowSelection)
    }}}

    See also [Hom:hou.PaneTab#setLinkGroup].

::`size()` -> `tuple` of `int`:
    #cppname: HOM_PaneTab::size
    Return a 2-tuple containing the pane tab's width and height.

    The width and height include the content area, network navigation control
    area (if any) and borders.

    The width and height do not include the pane tab's tab area.

::`contentSize()` -> `tuple` of `int`:
    #cppname: HOM_PaneTab::size
    Return a 2-tuple containing the pane tab's content area width and height.

    The width and height do not include the network navigation control
    area (if any), pane tab borders or tab area.
