= hou.SceneViewer =
#type: homclass
#cppname: HOM_SceneViewer
#superclass: hou.PathBasedPaneTab
#group: view
#status: nd


@methods


== Prompting for a selection ==

::`selectObjects(self, prompt='Select objects', sel_index=0, allow_drag=False, quick_select=False, use_existing_selection=True, allow_multisel=True, allowed_types=('*',), icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[])` -> tuple of Nodes:
    #cppname: HOM_SceneViewer::selectObjects
    #status: nd

::`selectGeometry(self, prompt='Select geometry', sel_index=0, allow_drag=False, quick_select=False, use_existing_selection=True, initial_selection = None, initial_selection_type = None, ordered=False, geometry_types=(), primitive_types=(), allow_obj_sel=True, icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[], allow_other_sops=True, consume_selections=True)` -> GeometrySelection:
    #cppname: HOM_SceneViewer::selectGeometry
    #status: nd

::`selectPositions(self, prompt='Click to specify a position', number_of_positions=1, connect_positions=True, show_coordinates=True, bbox=BoundingBox(), position_type=positionType.WorldSpace, icon=None, label=None)` -> tuple of Vector3s:
    #cppname: HOM_SceneViewer::selectPositions
    #status: nd

::`selectOrientedPositions(self, prompt='Click to specify a position', number_of_positions=1, connect_positions=True, show_coordinates=True, bbox=BoundingBox(),icon=None, label=None)` -> tuple of (Vector3, Matrix3) tuples:
    #cppname: HOM_SceneViewer::selectOrientedPositions
    
    This method is very similar to [Hom:hou.SceneViewer#selectPositions], except the position type
    is always world space, and instead of a tuple of positions this returns a tuple
    of `(position, orientation)` pairs, with the position a [Hom:hou.Vector3]
    and the orientation a [Hom:hou.Matrix3].
    This allows you to prompt the user for oriented position, respecting possible orientation aids such as
    [the construction plane|/model/aids#cplane] and
    [alignment|/model/aids#align].

::`selectDynamics(self, prompt='Select dynamics objects', sel_index=0, allow_objects=True, allow_modifiers=False, quick_select=False, use_existing_selection=True, allow_multisel=True, icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[])` -> tuple of [Hom:hou.DopData]:
    #cppname: HOM_SceneViewer::selectDynamics
    #status: nd

::`selectDynamicsPoints(self, prompt='Select dynamics points', sel_index=0, quick_select=False, use_existing_selection=True, allow_multisel=True, only_select_points=True, object_based_point_selection=False, use_last_selected_object=False, icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[])` -> tuple of ([Hom:hou.DopData], [Hom:hou.GeometrySelection]):
    #cppname: HOM_SceneViewer::selectDynamicsPoints
    #status: nd

::`selectDynamicsPolygons(self, prompt='Select dynamics polygons', sel_index=0, quick_select=False, use_existing_selection=True, object_based_point_selection=False, use_last_selected_object=False, icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[])` -> tuple of ([Hom:hou.DopData], [Hom:hou.GeometrySelection]):
    #cppname: HOM_SceneViewer::selectDynamicsPolygons
    #status: nd

::`selectSceneGraph(self, prompt, preselection, prim_mask, quick_select, use_existing_selection, confirm_existing, allow_multisel, allow_drag, path_prefix_mask, prim_kind)` -> tuple of string:
    #cppname: HOM_SceneViewer::selectSceneGraph
    #status: nd

::`currentSceneGraphSelection()` -> tuple of string:
    #cppname: HOM_SceneViewer::currentSceneGraphSelection
    #status: nd

::`setCurrentSceneGraphSelection(selection)`:
    #cppname: HOM_SceneViewer::setCurrentSceneGraphSelection
    #status: nd

::`stageSerial()` -> int:
    #cppname: HOM_SceneViewer::stageSerial
    Integer that is increased every time the Scene Graph View data is modified.
    Only count on this number to be bigger when changes occur, and not
    necessarily incremented by 1.

== Selection utils ==

::`currentGeometrySelection(self)` -> [Hom:hou.GeometrySelection]:
    #cppname: HOM_SceneViewer::currentGeometrySelection
    Returns the current geometry selection if the viewer is in a geometry
    select mode and otherwise returns None.

::`setCurrentGeometrySelection(self, geometry_type, nodes, selections)`:
    #cppname: HOM_SceneViewer::setCurrentGeometrySelection
    Replaces a current geometry selection if the viewer is in a geometry
    select mode and otherwise raises [Hom:hou.NotAvailable].  Any of the
    specified selections not matching geometry_type will be automatically
    converted to that type where possible.

== Tool state ==

::`currentState(self)` -> string:
    #cppname: HOM_SceneViewer::currentState
    Returns the name of the viewer's current tool state.

::`setCurrentState(self, state, wait_for_exit=False, generate=hou.stateGenerateMode.Insert, request_new_on_generate=True)`:
    #cppname: HOM_SceneViewer::setCurrentState
    Sets the current tool state of the viewer.
    If wait_for_exit is True, then the function will not return until the
    viewer exits the tool.

    generate:
        A [Hom:hou.stateGenerateMode] enumeration value to specify how a new
        node should be generated, inserted inline or into a new branch.

    request_new_on_generate:
        Some states reuse the current node whenever possible.  Setting this
        argument to True requests that such states generate a new node.

::`enterCurrentNodeState(self, wait_for_exit=False)`:
    #cppname: HOM_SceneViewer::enterCurrentNodeState
    Enters the viewer into the node-specific tool state of the last selected
    node.
    If wait_for_exit is True, then the function will not return until the
    viewer exits the tool.

::`enterViewState(self, wait_for_exit=False)`:
    #cppname: HOM_SceneViewer::enterViewState
    Enters the viewer into view tool state.
    If wait_for_exit is True, then the function will not return until the
    viewer exits the tool.

::`enterTranslateToolState(self, wait_for_exit=False)`:
    #cppname: HOM_SceneViewer::enterTranslateToolState
    Enters the viewer into translate tool state.
    This is available only for the node contexts that support the move tools.
    If wait_for_exit is True, then the function will not return until the
    viewer exits the tool.

::`enterRotateToolState(self, wait_for_exit=False)`:
    #cppname: HOM_SceneViewer::enterRotateToolState
    Enters the viewer into rotate tool state.
    This is available only for the node contexts that support the move tools.
    If wait_for_exit is True, then the function will not return until the
    viewer exits the tool.

::`enterScaleToolState(self, wait_for_exit=False)`:
    #cppname: HOM_SceneViewer::enterScaleToolState
    Enters the viewer into scale tool state.
    This is available only for the node contexts that support the move tools.
    If wait_for_exit is True, then the function will not return until the
    viewer exits the tool.

::`beginStateUndo(self, label)`:
    #cppname: HOM_SceneViewer::beginStateUndo
    Opens an undo block to perform undoable operations with the current viewer 
    state. All operations performed after the opening will appear as one single 
    operation on the undo stack. Use [Hom:hou.SceneViewer#endStateUndo] to close an open block. 

    `beginStateUndo` and `endStateUndo` can be used for managing an undo block that begins in 
    one function but ends in another one. Only one undo block is supported for a sequence of 
    undoable operations. Exceptions will be raised if a call to a second `beginStateUndo` is 
    detected before the undo block is closed by `endStateUndo`.
    
    Python state example of a valid undo block:    
    {{{
    #!python
    def onMouseEvent(self, kwargs):
        ui_event = kwargs["ui_event"]
        node = kwargs["node"]
        if ui_event.reason() == hou.uiEventReason.Start:
            # left mouse button pressed
            self.scale = node.parent().parm("scale").evalAsFloat()
            self.scene_viewer.beginStateUndo('scale')

        if ui_event.reason() == hou.uiEventReason.Active:
            # left mouse button down while the mouse is moving
            self.scale *= 1.01
            node.parent().parm("scale").set(self.scale)

        if ui_event.reason() == hou.uiEventReason.Changed:
            # left mouse button released
            self.scene_viewer.endStateUndo()
    }}}
    
    Example of a non-valid undo block that raises an exception:
    {{{
    #!python
    def onMouseEvent(self, kwargs):
        ui_event = kwargs["ui_event"]
        node = kwargs["node"]
        if ui_event.reason() == hou.uiEventReason.Start:
            # left mouse button pressed
            self.tx = node.parent().parm("tx").evalAsFloat()
            self.scale = node.parent().parm("scale").evalAsFloat()
            self.scene_viewer.beginStateUndo('scale')

        if ui_event.reason() == hou.uiEventReason.Active:
            # left mouse button down while the mouse is moving
            self.scale *= 1.01
            node.parent().parm("scale").set(self.scale)

            self.scene_viewer.beginStateUndo('move x')
            self.tx += 0.2
            node.parent().parm("tx").set(self.tx)
            self.scene_viewer.endStateUndo()

        if ui_event.reason() == hou.uiEventReason.Changed:
            # left mouse button released
            self.scene_viewer.endStateUndo()
    }}}
    
    `label`:
	    The label of the undo block used for displaying the undo operation in the Edit menu. An exception is raised if the label is empty.

::`endStateUndo(self)`:
    #cppname: HOM_SceneViewer::endStateUndo
    Closes an undo block previously opened with [Hom:hou.SceneViewer#beginStateUndo]. 

    `endStateUndo` will raise an exception if called before `beginStateUndo`.

::`showHandle(self, name, value)`:
    #cppname: HOM_SceneViewer::showHandle

    Shows or hides a display handle linked to the current tool state. This API is typically used with [Python states|/hom/python_states] and can be called from any python state callbacks -- with one small caveat. Avoid calling `showHandle` from the python state constructor, doing so will lead to a runtime error.

    `name`:
        The name of the handle as specified with [Hom:hou.ViewerStateTemplate#bindHandle]

    `value`:
        `Bool` value, `True` to show the handle, `False` to hide it.

== Modeling ==

::`constructionPlane(self)` -> [Hom:hou.ConstructionPlane]:
    #cppname: HOM_SceneViewer::constructionPlane
    Return the construction plane (or grid) in the perspective viewport of
    this viewer.

    See [Hom:hou.ConstructionPlane] for more information.

::`referencePlane(self)` -> [Hom:hou.ReferencePlane]:
    #cppname: HOM_SceneViewer::referencePlane
    Return the reference plane (or grid) in the perspective viewport of
    this viewer.

    See [Hom:hou.ReferencePlane] for more information.


== Split views == (viewport_methods)

::`viewports(self)` -> tuple of [Hom:hou.GeometryViewport]s:
    #cppname: HOM_SceneViewer::viewports
    #status: nd

::`findViewport(self, name)` -> [Hom:hou.GeometryViewport]:
    #cppname: HOM_SceneViewer::findViewport
    #status: nd

::`curViewport(self)` -> [Hom:hou.GeometryViewport]:
    #cppname: HOM_SceneViewer::curViewport
    
    Returns this viewer's current viewport.  The current viewport is the one
    containing the mouse cursor.  If the cursor is not in a viewport, then the
    selected, or active, viewport is returned.

::`setCurViewport(self, viewport)`:
    #cppname: HOM_SceneViewer::setCurViewport
    #status: ni

::`linkOrthoViewports(self)`:
    #cppname: HOM_SceneViewer::linkOrthoViewports
    #status: ni

::`setLinkOrthoViewports(self, on)`:
    #cppname: HOM_SceneViewer::setLinkOrthoViewports
    #status: ni

::`viewportLayout(self)` -> [Hom:hou.geometryViewportLayout]:
    #cppname: HOM_SceneViewer::viewportLayout
    
    Returns the current viewport layout as a [Hom:hou.geometryViewportLayout] value.

::`setViewportLayout(self, layout, single=-1)`:
    #cppname: HOM_SceneViewer::setViewportLayout
    
    Sets the viewer's viewport layout.
    
    `layout`:
        A [Hom:hou.geometryViewportLayout] value. For example, to set the viewer to show four viewports at the corners:
    
        {{{
        #!python
        viewer_pane.setViewportLayout(hou.geometryViewportLayout.Quad)
        }}}
    
    `single`:
        If you specify the [hou.geometryViewportLayout#Single] layout, this argument lets you specify which of the four viewports from the quad view to show as the single
        
        `-1` |
            Use the current viewport (the viewport the mouse is/was over).
        `0` |
            Use the top-left viewport from the quad layout (usually the Top view).
        `1` |
            Use the top-right viewport from the quad layout (usually the Perspective view).
        `2` |
            Use the bottom-left viewport from the quad layout (usually the Front view).
        `3` |
            Use the bottom-right viewport from the quad layout (usually the Right view).

::`appliesToAllSplitViews(self)`:
    #cppname: HOM_SceneViewer::appliesToAllSplitViews
    #status: ni

::`setApplyToAllSplitViews(self, on)`:
    #cppname: HOM_SceneViewer::setApplyToAllSplitViews
    #status: ni

::`setPromptMessage(self, message, message_type=promptMessageType.Prompt)`:
    #cppname: HOM_SceneViewer::setPromptMessage
    Sets the viewport to display a message at the bottom of the screen.

    `message`:
	    Text message to display.

    `message_type`:
        A [Hom:hou.promptMessageType] value representing the type of message to display. Defaults to [Hom:hou.promptMessageType#Prompt].

::`clearPromptMessage(self)`:
    #cppname: HOM_SceneViewer::clearPromptMessage
    Clear the prompt message previously set with [Hom:hou.SceneViewer#setPromptMessage].

== Snapping ==

::`snappingMode(self)`:
    #cppname: HOM_SceneViewer::snappingMode
    #status: nd

::`setSnappingMode(self, snapping_mode)`:
    #cppname: HOM_SceneViewer::setSnappingMode
    #status: nd

::`isSnappingToTemplates(self)`:
    #cppname: HOM_SceneViewer::isSnappingToTemplates
    #status: nd

::`setSnapToTemplates(self, on)`:
    #cppname: HOM_SceneViewer::setSnapToTemplates
    #status: nd

::`isSnappingToOtherObjects(self)`:
    #cppname: HOM_SceneViewer::isSnappingToOtherObjects
    #status: nd

::`setSnapToOtherObjects(self, on)`:
    #cppname: HOM_SceneViewer::setSnapToOtherObjects
    #status: nd

::`isDepthSnapping(self)`:
    #cppname: HOM_SceneViewer::isDepthSnapping
    #status: nd

::`setDepthSnapping(self, on)`:
    #cppname: HOM_SceneViewer::setDepthSnapping
    #status: nd

::`isOrientingOnSnap(self)`:
    #cppname: HOM_SceneViewer::isOrientingOnSnap
    #status: nd

::`setOrientOnSnap(self, on)`:
    #cppname: HOM_SceneViewer::setOrientOnSnap
    #status: nd


== View options ==

::`isPickingVisibleGeometry(self)`:
    #cppname: HOM_SceneViewer::isPickingVisibleGeometry
    Returns true if the viewer is configured to only pick visible components
    when performing an area-based selection. This option corresponds to the
    matching check box in the component selection button's context menu.

::`setPickingVisibleGeometry(self, on)`:
    #cppname: HOM_SceneViewer::setPickingVisibleGeometry
    Turns on or off the option to select only visible components when
    performing area-based selections such as box or brush picking.

::`isPickingContainedGeometry(self)`:
    #cppname: HOM_SceneViewer::isPickingContainedGeometry
    Returns true if the viewer is configured to only pick fully contained
    components when performing an area-based selection. This option corresponds
    to the matching check box in the component selection button's context menu.

::`setPickingContainedGeometry(self, on)`:
    #cppname: HOM_SceneViewer::setPickingContainedGeometry
    Turns on or off the option to select only fully contained components when
    performing area-based selections such as box or brush picking.

::`selectionMode(self)`:
    #cppname: HOM_SceneViewer::selectionMode
    Returns the selection mode of the viewer of type [Hom:hou.selectionMode].

::`setSelectionMode(self, selection_mode)`:
    #cppname: HOM_SceneViewer::setSelectionMode
    Sets the selection mode of this view.
    The value for 'selection_mode' must be from [Hom:hou.selectionMode].

::`isGroupPicking(self)`:
    #cppname: HOM_SceneViewer::isGroupPicking
    Returns true if group, attribute, or connectivity information will be used
    to automatically expand selections made in this viewer. This option
    corresponds to the matching check box in the component selection
    button's context menu.

::`setGroupPicking(self, on)`:
    #cppname: HOM_SceneViewer::setGroupPicking
    Turns on or off the group, attribute, or connectivity based picking. When
    turned on, the group list gadget is automatically made visible.

::`isWholeGeometryPicking(self)`:
    #cppname: HOM_SceneViewer::isWholeGeometryPicking
    Returns true if selections made in this viewer will automatically expand
    to include the whole geometry. This option corresponds to the matching
    check box in the component selection button's context menu.

::`setWholeGeometryPicking(self, on)`:
    #cppname: HOM_SceneViewer::setWholeGeometryPicking
    Turns on or off the option to expand selections made in this viewer to
    include the entire geometry.

::`isSecureSelection(self)`:
    #cppname: HOM_SceneViewer::isSecureSelection
    Returns true if secure selection is turned on in this viewer. This option
    corresponds to the secure selection option in the select tool's context
    menu.

::`setSecureSelection(self, on)`:
    #cppname: HOM_SceneViewer::setSecureSelection
    Turns on or off the secure selection option in this viewer.

::`isPickingCurrentNode(self)`:
    #cppname: HOM_SceneViewer::isPickingCurrentNode
    Returns true if selections made in this viewer will pick from the Current
    SOP. If not, the pick occurs on the Display SOP. This option corresponds
    to the current/display option in the component selection button's context
    menu.

::`setPickingCurrentNode(self, on)`:
    #cppname: HOM_SceneViewer::setPickingCurrentNode
    Tells this viewer whether picks should be made on the Current SOP or
    on the Display SOP.

::`pickGeometryType(self)`:
    #cppname: HOM_SceneViewer::pickGeometryType
    Returns the type of geometry that will be picked in this viewer. This
    option corresponds to the component types selectable in the component
    selection button's context menu.

::`setPickGeometryType(self, geometry_type)`:
    #cppname: HOM_SceneViewer::setPickGeometryType
    Sets the type of geometry that will be picked in this viewer. This
    value can be changed at any time by the user, or when a selector is
    invoked.

::`pickStyle(self)`:
    #cppname: HOM_SceneViewer::pickStyle
    Returns the style of area picking currently being used by this viewer.
    This option corresponds to the picking style specified in the select
    tool's context menu.

::`setPickStyle(self, style)`:
    #cppname: HOM_SceneViewer::setPickStyle
    Sets the style of area picking to be used by this viewer.

::`pickModifier(self)`:
    #cppname: HOM_SceneViewer::pickModifier
    Returns the manner in which additional selection are combined with the
    existing selection. This option corresponds to the picking modifier
    in the select tool context menu.

::`setPickModifier(self, modifier)`:
    #cppname: HOM_SceneViewer::setPickModifier
    Sets the method used to modify the existing selection when a new selection
    is made. Modifier keys can still be used to alter this behavior. Only the
    default operation (with no modifier keys) is affected by this setting.
    Note that the select state will revert to the default pick modifier upon
    termination, so to make your change persist beyond this you will also need
    to change this default using setDefaultPickModifier().

::`defaultPickModifier(self)`:
    #cppname: HOM_SceneViewer::defaultPickModifier
    Returns the default pick modifier to which Houdini will revert after a
    select state terminates.

::`setDefaultPickModifier(self, modifier)`:
    #cppname: HOM_SceneViewer::setDefaultPickModifier
    Sets the default pick modifier to which Houdini will revert after a select
    state terminates.

::`pickFacing(self)`:
    #cppname: HOM_SceneViewer::pickFacing
    Returns a value indicating whether the user is able to pick front facing
    components, back facing components, or both. This option corresponds to
    the frant and back facing options in the component selection button's
    context menu.

::`setPickFacing(self, facing)`:
    #cppname: HOM_SceneViewer::setPickFacing
    Sets the option of whether to restrict selection to front facing, back
    facing, or either type of components.

::`isShowingObjectsAtSopLevel(self)`:
    #cppname: HOM_SceneViewer::isShowingObjectsAtSopLevel
    #status: ni

::`setShowObjectsAtSopLevel(self, on)`:
    #cppname: HOM_SceneViewer::setShowObjectsAtSopLevel
    #status: ni

::`isCreateInContext(self) -> bool`:
    #cppname: HOM_SceneViewer::isCreateInContext
    #status: nd

::`displayedNodeBehaviour(self)`:
    #cppname: HOM_SceneViewer::displayedNodeBehaviour
    #status: ni

::`setDisplayedNodeBehaviour(self, behaviour)`:
    #cppname: HOM_SceneViewer::setDisplayedNodeBehaviour
    #status: ni



::`stage(self)`:
    #cppname: HOM_SceneViewer::stage
    #status: nd

::`setShowGeometry(self, show)`:
    #cppname: HOM_SceneViewer::setShowGeometry
    #status: nd
    
    

::`showGeometry(self)` -> `bool`:
    #cppname: HOM_SceneViewer::showGeometry
    #status: nd
    
    

::`setShowCameras(self, show)`:
    #cppname: HOM_SceneViewer::setShowCameras
    #status: nd
    
    

::`showCameras(self)` -> `bool`:
    #cppname: HOM_SceneViewer::showCameras
    #status: nd
    
    

::`setShowLights(self, show)`:
    #cppname: HOM_SceneViewer::setShowLights
    #status: nd
    
    

::`showLights(self)` -> `bool`:
    #cppname: HOM_SceneViewer::showLights
    #status: nd
    
    

::`setShowSelection(self, show)`:
    #cppname: HOM_SceneViewer::setShowSelection
    #status: nd
    
    

::`showSelection(self)` -> `bool`:
    #cppname: HOM_SceneViewer::showSelection
    #status: nd
    
    
::`setDenoise(self, enable)`:
    #cppname: HOM_SceneViewer::setDenoise
    Enables denoising for non-GL renders.
    

::`denoise(self)` -> `bool`:
    #cppname: HOM_SceneViewer::denoise
    Denoising setting for non-GL renders (on/off).
    
    

::`hydraRenderers(self)` -> tuple of `str`:
    #cppname: HOM_SceneViewer::hydraRenderers
    #status: nd
    
    

::`setHydraRenderer(self, ren_name)`:
    #cppname: HOM_SceneViewer::setHydraRenderer
    #status: nd
    
    

::`currentHydraRenderer(self)` -> `str`:
    #cppname: HOM_SceneViewer::currentHydraRenderer
    #status: nd
    
    


== Group list ==

::`isGroupListVisible(self)`:
    #cppname: HOM_SceneViewer::isGroupListVisible
    Returns true if the group list gadget has been turned on for this viewer.
    This function only refers to the option to show the group list when not
    selecting groups in the viewer. In that case the group list will be
    visible, but this function may still return False.

::`setGroupListVisible(self, on)`:
    #cppname: HOM_SceneViewer::setGroupListVisible
    Turns on or off the group list gadget for this viewer.

::`isGroupListColoringGeometry(self)`:
    #cppname: HOM_SceneViewer::isGroupListColoringGeometry
    Returns true if the group list gadget is configured to color geometry in
    the viewer based on group membership or attribute value.

::`setGroupListColoringGeometry(self, on)`:
    #cppname: HOM_SceneViewer::setGroupListColoringGeometry
    Turns on or off the group list gadget to coloring of geometry in
    the viewer based on group membership or attribute value.

::`isGroupListShowingEmptyGroups(self)`:
    #cppname: HOM_SceneViewer::isGroupListShowingEmptyGroups
    Returns true if the group list gadget is including empty groups in its
    list.

::`setGroupListShowingEmptyGroups(self, on)`:
    #cppname: HOM_SceneViewer::setGroupListShowingEmptyGroups
    Turns on or off the display of empty groups in the group list gadget.

::`isGroupListShowingOnlyPreSelectedGroups(self)`:
    #cppname: HOM_SceneViewer::isGroupListShowingOnlyPreSelectedGroups
    Returns true if the group list is showing only groups that contain one or
    more selected or pre-selected components.

::`setGroupListShowingOnlyPreSelectedGroups(self, on)`:
    #cppname: HOM_SceneViewer::setGroupListShowingOnlyPreSelectedGroups
    Turns on or off the trimming of the group list to show only groups that
    contain one or more selected or pre-selected components.

::`isGroupListCondensingPathHierarchies(self)`:
    #cppname: HOM_SceneViewer::isGroupListCondensingPathHierarchies
    Returns true if the group list will condense the hierarchy of groups
    defined by a string attribute representing a path.

::`setGroupListCondensingPathHierarchies(self, on)`:
    #cppname: HOM_SceneViewer::setGroupListCondensingPathHierarchies
    Turns on or off the condensing of the hierarchy in the group list.
    This applies to components grouped by string attributes representing
    a path. Turning this option on can fit more information into the
    list, but can make it harder to distinguish levels in the hierarchy.

::`groupListSize(self)`:
    #cppname: HOM_SceneViewer::groupListSize
    Returns the width and height in inches of the group list gadget.

::`setGroupListSize(self, width, height)`:
    #cppname: HOM_SceneViewer::setGroupListSize
    Sets the size in inches of the group list gadget.

::`groupListType(self)`:
    #cppname: HOM_SceneViewer::groupListType
    Returns the type of component listed in the group list gadget.

::`setGroupListType(self, group_list_type)`:
    #cppname: HOM_SceneViewer::setGroupListType
    Sets the type of component listed in the group list gadget. This can
    be set to a specific component type or to follow the current component
    selection type.

::`groupListMask(self)`:
    #cppname: HOM_SceneViewer::groupListMask
    Returns true if the group list gadget has been turned on for this viewer.

::`setGroupListMask(self, mask)`:
    #cppname: HOM_SceneViewer::setGroupListMask
    Sets the mask value in the group list gadget for this viewer. This can
    be a filter applied to the comonent groups, or an attribute name (starting
    with an @ charater), or a connectivity type.


== Memories and snapshots ==

::`memories(self)` -> dict of ints to GeometryViewportSettings:
    #cppname: HOM_SceneViewer::memories
    #status: ni

::`createMemoryFromViewport(self, viewport, number)` -> GeometryViewportSettings:
    #cppname: HOM_SceneViewer::createMemoryFromViewport
    #status: ni

::`loadFromMemoryToViewport(self, viewport, number)`:
    #cppname: HOM_SceneViewer::loadFromMemoryToViewport
    #status: ni

::`deleteAllMemories(self)`:
    #cppname: HOM_SceneViewer::deleteAllMemories
    #status: ni

::`showsMemoriesAtBottom(self)`:
    #cppname: HOM_SceneViewer::showsMemoriesAtBottom
    #status: ni

::`setShowMemoriesAtBottom(self, on)`:
    #cppname: HOM_SceneViewer::setShowMemoriesAtBottom
    #status: ni

::`createSnapshotFromViewport(self, viewport, number)`:
    #cppname: HOM_SceneViewer::createSnapshotFromViewport
    #status: ni

::`showSnapshot(self, number)`:
    #cppname: HOM_SceneViewer::showSnapshot
    #status: ni

::`hideSnapshot(self, number)`:
    #cppname: HOM_SceneViewer::hideSnapshot
    #status: ni

::`showsSnapshotsAtSourceFrame(self)`:
    #cppname: HOM_SceneViewer::showsSnapshotsAtSourceFrame
    #status: ni

::`setShowSnapshotsAtSourceFrame(self, on)`:
    #cppname: HOM_SceneViewer::setShowSnapshotsAtSourceFrame
    #status: ni

::`snapshotAlphaBlend(self)`:
    #cppname: HOM_SceneViewer::snapshotAlphaBlend
    #status: ni

::`setSnapshotAlphaBlend(self, alpha)`:
    #cppname: HOM_SceneViewer::setSnapshotAlphaBlend
    #status: ni

::`snapshotObjectMask(self)`:
    #cppname: HOM_SceneViewer::snapshotObjectMask
    #status: ni

::`setSnapshotObjectMask(self, mask)`:
    #cppname: HOM_SceneViewer::setSnapshotObjectMask
    #status: ni

::`showsHandlesInSnapshots(self)`:
    #cppname: HOM_SceneViewer::showsHandlesInSnapshots
    #status: ni

::`setShowHandlesInSnapshots(self, on)`:
    #cppname: HOM_SceneViewer::setShowHandlesInSnapshots
    #status: ni


== Quick renders and flipbooks ==

::`render(self)`:
    #cppname: HOM_SceneViewer::render
    #status: ni

::`renderOutput(self)`:
    #cppname: HOM_SceneViewer::renderOutput
    #status: ni

::`setRenderOutputToBuiltIn(self, renderer)`:
    #cppname: HOM_SceneViewer::setRenderOutputToBuiltIn
    #status: ni

::`setRenderOutputToRop(self, rop_node)`:
    #cppname: HOM_SceneViewer::setRenderOutputToRop
    #status: ni

::`setFlipbookOptions(self, options)`:
    #cppname: HOM_SceneViewer::setFlipbookOptions
    #status: ni

::`flipbookSettings(self)` -> [Hom:hou.FlipbookSettings]:
    #cppname: HOM_SceneViewer::flipbookSettings
    
    Access to the flipbook dialog settings, which can be queried, set, or 
    copied.

::`flipbook(self, viewport=None, settings=None, open_dialog=False)`:
    #cppname: HOM_SceneViewer::flipbook
    
    Capture a [flipbook|/anim/flipbook]. A flipbook creates a quick preview animation by taking consecutive screenshots of a viewport at each frame.
    
    `viewport`:
        A 
    
    Launch a flipbook for `viewport` if specified or the current viewport if
    `viewport` is not. Optionally a [Hom:hou.FlipbookSettings] object can be passed to
    `settings` which will override the current settings. This override will
    only affect the current flipbook and not change the dialog settings.
    If `open_dialog` is True, the flipbook dialog is presented to the user,
    otherwise a flipbook is launched immediately.


== Toolbars ==

::`showsNodeToolbarAtTop(self)`:
    #cppname: HOM_SceneViewer::showsNodeToolbarAtTop
    #status: ni

::`setShowNodeToolbarAtTop(self, on)`:
    #cppname: HOM_SceneViewer::setShowNodeToolbarAtTop
    #status: ni

::`showsPathAtTop(self)`:
    #cppname: HOM_SceneViewer::showsPathAtTop
    #status: ni

::`setShowPathAtTop(self, on)`:
    #cppname: HOM_SceneViewer::setShowPathAtTop
    #status: ni

::`showsToolsAtBottom(self)`:
    #cppname: HOM_SceneViewer::showsToolsAtBottom
    #status: ni

::`setShowToolsAtBottom(self, on)`:
    #cppname: HOM_SceneViewer::setShowToolsAtBottom
    #status: ni

::`showsDisplayToolsAtRight(self)`:
    #cppname: HOM_SceneViewer::showsDisplayToolsAtRight
    #status: ni

::`setShowDisplayToolsAtRight(self, on)`:
    #cppname: HOM_SceneViewer::setShowDisplayToolsAtRight
    #status: ni

::`showsSelectionToolsAtLeft(self)`:
    #cppname: HOM_SceneViewer::showsSelectionToolsAtLeft
    #status: ni

::`setShowSelectionToolsAtLeft(self, on)`:
    #cppname: HOM_SceneViewer::setShowSelectionToolsAtLeft
    #status: ni


== Interaction ==

::`runShelfTool(self, tool_name)`:
    #cppname: HOM_SceneViewer::runShelfTool

    Run the named shelf tool in the current viewport.

::`displayRadialMenu(self, name)`:
    #cppname: HOM_SceneViewer::popupRadialMenu

    Launch the named radial menu in the current viewport.


== Metadata ==

::`isOpen(self)` -> bool:
    #cppname: HOM_SceneViewer::isOpen
    #status: ni
    <!-- Note that it could be in a closed desktop. -->

::`viewerType(self)` -> `hou.stateViewerType` enum value:
    #cppname: HOM_SceneViewer::viewerType

    Returns the type of the viewer, either `Scene` for a viewer looking at Objects, SOPs, or DOPs; or `SceneGraph` for a viewer looking at LOPs.

@replaces

- [Cmd:vieweroption]
- [Cmd:viewlayout]
- [Cmd:viewls]
- [Cmd:viewsnapshot]
- [Cmd:viewsnapshotoption]
    

