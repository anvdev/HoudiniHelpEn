= hou.undos =
#type: hommodule
#cppname: HOM_undos
#group: ui

@functions

::`areEnabled()` -> `bool`:
    #cppname: HOM_undos::areEnabled
    Returns True is undos are currently enabled.
    
::`disabler()` -> [Hom:hou.UndosDisabler]:
    #cppname: HOM_undos::disabler
    
    Returns a context manager, within which changes to Houdini will not be added to the undo stack.
    
    For example:
    
    {{{
    #!python
    with hou.undos.disabler():
        # Move all object nodes 1 unit to the left.
        # This cannot be undone!
        for n in hou.node("/obj").children():
            n.move(hou.Vector2(-1, 0))
    }}}

::`group(label)` -> [Hom:hou.UndosGroup]:
    #cppname: HOM_undos::group
    
    Returns a context manager, within which all changes to Houdini are recorded as a single action on the undo stack.

    For example:
    {{{
    #!python
    with hou.undos.group("Move all nodes to the left"):
        # Move all object nodes 1 unit to the left.
        # This is 
        for n in hou.node("/obj").children():
            n.move(hou.Vector2(-1, 0))
    }}}

    This has no effect when run inside parameter callback scripts because
    they are already executed within an undo group.

::`clear()`:
    #cppname: HOM_undos::clear
    Clear all undo and redo information.

::`add(undo, label, tag=None)`:
    #cppname: HOM_undos::add
    Add an undo operation to the undo history.  `undo` must be an object
    with undo() and redo() methods.  The undo() method is executed when the
    operation is undone and the redo() method is executed when the operation
    is redone.

    `label` is a description of the undo operation as it appears in the undo
    history.

    A [Hom:hou.OperationFailed] is raised if the `undo` object passed
    in does not have an undo() method or a redo() method.

    For example, a valid python object passed to this function would look like:

    {{{
    #!python
    class MyUndoClass():
	
	def __init__(self):
	    # ... Initialization ...
	    pass
	
	def undo(self):
	    # Add in what needs to be done on undo
	    pass
	
	def redo(self):
	    # Add in what needs to be done on redo
	    pass
	
    }}}

    Using the above class, a call to this function would look like:

    {{{
    #!python
    foo = MyUndoClass()
    hou.undos.add(foo, "My Undo")
    }}}

    An optional string tag can also be set for this undo object, which will 
    allow it to be removed from the undo stack using 
    [Hom:hou.undos#removeUndos].

    {{{
    #!python
    foo = MyUndoClass()
    hou.undos.add(foo, "My Undo", "myTag")
    }}}

::`removeUndos(tag)`:
    #cppname: HOM_undos::removeUndos
    Invalidates and removes all undos that are tagged with `tag`.

    {{{
    #!python
    # Removes all undos with the tag "myTag"
    hou.undos.removeUndos("myTag")
    }}}

::`memoryUsage()` -> `int`:
    #cppname: HOM_undos::memoryUsage
    The current memory used (in bytes) for undos.

::`memoryUsageLimit()` -> `int`:
    #cppname: HOM_undos::memoryUsageLimit
    The maximum allowed memory usage size (in bytes) for undos.

::`performUndo()`:
    #cppname: HOM_undos::performUndo
    Undo the last action.

::`performRedo()`:
    #cppname: HOM_undos::performRedo
    Redo the last undoed action.

::`undoLabels()` -> tuple of `str`:
    #cppname: HOM_undos::undoLabels
    Provides a tuple of the undo operations currently on the stack. Note that
    the first item (ie. undoLabels()[0]) is the next operation that will be
    undone.

::`redoLabels()` -> tuple of `str`:
    #cppname: HOM_undos::redoLabels
    Provides a tuple of the redo operations currently on the stack. Note that
    the first item (ie. redoLabels()[0]) is the next operation that will be
    redone.

@replaces

- [Cmd:undoctrl]


