= hou.Parm =
#type: homclass
#cppname: HOM_Parm
#group: parms

"""A parameter in a node.  Each parameter has a unique name within its node
and exists inside a parameter tuple."""

@methods

== Animation ==

::`alias(self)` -> `str`:
    #cppname: HOM_Parm::alias
    Returns the parameter's channel alias name.
    Returns an empty string if no such name exists.

::`setAlias(self, alias_name)`:
    #cppname: HOM_Parm::setAlias
    Gives the parameter another name by which it can be referenced in
    channels.  You can pass in an empty string to remove an existing alias name.

::`isAutoscoped(self)` -> `bool`:
    #cppname: HOM_Parm::isAutoscoped
    Returns whether this parameter's autoscope property is on.

::`isAutoSelected(self)` -> `bool`:
    #cppname: HOM_Parm::isAutoSelected
    Returns whether this parameter's autoselect property is on.

::`appendToScope(self)`:
    #cppname: HOM_Parm::appendToScope
    #status: ni

::`curKeyframe(self)` -> BaseKeyframe:
    #cppname: HOM_Parm::curKeyframe
    #status: ni

::`deleteAllKeyframes(self)`:
    #cppname: HOM_Parm::deleteAllKeyframes
    Removes all keyframes from this parameter.

    This has no effect if there are no keyframes to delete. The value of the
    parameter after all keyframes are removed will be the one it evaluated to
    at the current frame.
    
    This function will raise a hou.ObjectWasDeleted exception if it is invoked 
    on a parameter that does not exist in Houdini.
    
    This function will raise a hou.PermissionError exception if writing to the
    specified parameter is impossible.
    
    See also [Hom:hou.Parm#deleteKeyframeAtFrame] and [Hom:hou.ParmTuple#deleteAllKeyframes].

::`deleteKeyframeAtFrame(self, frame)`:
    #cppname: HOM_Parm::deleteKeyframeAtFrame
    Removes a keyframe from this parameter at the given frame.

    This function will raise a hou.ObjectWasDeleted exception if it is invoked 
    on a parameter that does not exist in Houdini.
    
    This function will raise a hou.PermissionError exception if writing to the
    specified parameter is impossible.

    This function will raise a hou.OperationFailed exception the parameter doesn't
    have a keyframe at the given frame.
    
    See also [Hom:hou.Parm#deleteAllKeyframes].

::`effectiveKeyframeAtFrame(self, frame)`:
    #cppname: HOM_Parm::effectiveKeyframeAtFrame
    #status: ni

::`keyCurValueAtFrame(self, frame)`:
    #cppname: HOM_Parm::keyCurValueAtFrame
    #status: ni

::`keyframeForCurTime(self)` -> Keyframe:
    #cppname: HOM_Parm::keyframeForCurTime
    #status: ni

::`keyframes(self)` -> tuple of [Hom:hou.BaseKeyframe]:
    #cppname: HOM_Parm::keyframes
    Returns the keyframes on this parameter.

::`keyframesAfter(self, frame)` -> tuple of [Hom:hou.BaseKeyframe]:
    #cppname: HOM_Parm::keyframesBefore
    Returns a tuple of keyframes on this paramter that occur at or after 
    `frame`. If no keyframes are found an empty tuple is returned.

::`keyframesBefore(self, frame)` -> tuple of [Hom:hou.BaseKeyframe]:
    #cppname: HOM_Parm::keyframesBefore
    Returns a tuple of keyframes on this paramter that occur at or before 
    `frame`. If no keyframes are found an empty tuple is returned.

::`keyframeExtrapolation(self, before)` -> [Hom:hou.parmExtrapolate]:
    #cppname: HOM_Parm::setKeyframeExtrapolation
    Returns extrapolation on this parameter for time before the first keyframe
    or after the last keyframe. Extrapolation defines how a parm value is evaluated
    outside the keyframe range.

    before:
        If set to true, returns extrapolation for evaluations before the first keyframe.
        If set to false, returns extrapolation for evaluations after the last keyframe.

    This function will raise a hou.ObjectWasDeleted exception if it is invoked 
    on a parameter that does not exist in Houdini.

    This function will raise a hou.OperationFailed exception the parameter doesn't
    have a valid animation channel.

::`keyframesInRange(self, start_frame, end_frame)` -> tuple of [Hom:hou.BaseKeyframe]:
    #cppname: HOM_Parm::keyframesInRange
    Returns a tuple of keyframes on this parameter that fall in the range
    `start_frame` to `end_frame`, inclusive. If no keyframes are found an empty 
    tuple is returned.

::`keyframesRefit(self, refit, refit_tol, refit_preserve_extremas, refit_bezier, resample, resample_rate, resample_tol, range, range_start, range_end, bake_chop)`:
    #cppname: HOM_Parm::keyframesRefit
    Performs a refitting operation with resampling and range controls.

    `refit`:
        If set to true, a cubic refitting will be performed with the supplied refit options.
        If set to false, the refitting is skipped and only the resampling or range operation will be performed.
    `refit_tol`:
        Refit Tolerance in absolute value.

    `refit_preserve_extremas`:
        Preserves the keys that are local minimas or maximas.

    `refit_bezier`:
        If `True`, the new keyframes will be set to use bezier() segments.
        If `False`, the new keyframes will be set to use cubic() segments.

    `resample`:
        If `True`, a resampling operation is performed prior to the refitting.
        If `False`, the channel is used as is.

    `resample_rate`:
        Resample rate in frames. If set to 1.0, a keyframe will be added at every frame.

    `resample_tol`:
        Resample Tolerance in frames. If set to 1.0, the resampling won't happen if a frame exists within one frame.

    `range`:
        If `True`, the range_start and range_end arguments are used. It's useful when baking cycles when using cycle/cycle offset or oscillate channel extrapolation.
        If `False`, the channel range will be used based on the first and last keyframes.

    `range_start`:
        Start frame of the range.

    `range_end`:
        End frame of the range.

    `bake_chop`:
        A [Hom:hou.parmBakeChop] enumaration value.

::`moveToIntegerKeyframes(self, mode)`:
    #cppname: HOM_Parm::moveToIntegerKeyframes
    #status: ni

::`isPending(self)`:
    #cppname: HOM_Parm::isPending
    #status: ni
    
::`pendingValue(self)`:
    #cppname: HOM_Parm::pendingValue
    #status: ni

::`refit(self, tolerance = 0.01)`:
    #cppname: HOM_Parm::refit
    #status: ni

::`reverse(self)`:
    #cppname: HOM_Parm::reverse
    #status: ni

::`reverseForRange(self, start_frame, end_frame)`:
    #cppname: HOM_Parm::reverseForRange
    #status: ni

::`isScoped(self)` -> `bool`:
    #cppname: HOM_Parm::isScoped
    Returns whether this parameter's channel is scoped. If it is scoped, then
    it is loaded in the animation editor.

::`isSelected(self)` -> `bool`:
    #cppname: HOM_Parm::isScoped
    Returns whether this parameter's channel is selected. If it is selected, then
    it is selected in the animation editor.

::`saveClip(self, file_name, start=None, end=None, sample_rate=0)`:
    #cppname: HOM_Parm::saveClip
    Saves the animation associated with this parameter to the clip file
    specified by <<file_name>>.
    The extension of <<file_name>> determines the format of the saved file.

    You can use one of the following extensions:
    * `.clip`: save animation as plain text (ASCII) clip file.
    * `.bclip`: save animation as a bclip (binary clip) file.
    * `.bclip.sc`: save animation as a bclip file using Blosc compression.

    Set <<sample_rate>> to a non-zero, non-negative value to specify the
    sample_rate to be used for the clip file.
    For example, if the current frame rate is 24 ([Hom:hou.fps]), and
    <<sample_rate>> is set to 12, the animation will be sampled every second
    frame since <<sample_rate>> is half of the current frame rate.

    If <<start>> is not `None`, start saving the animation from the specified
    frame (inclusive).
    Otherwise, the animation will be saved from the global start frame (inclusive).

    Similarly, if <<end>> is not `None`, stop saving the animation at the
    specified frame (inclusive).
    Otherwise, the animation will be saved until the global end frame (inclusive).

    The global start and end frame are specified in the
    [Global Animation Options|/ref/windows/global_anim_opts] window.

    Raises a hou.OperationFailed exception if the parameter does not have
    animation.

    Raises a hou.OperationFailed exception if there is an error saving the
    animation to file.

    Raises a hou.InvalidInput exception if `start >= end`. If specifying only
    <<start>>, ensure that the specified value is less than the global
    end frame. Likewise, if specifying only <<end>>, ensure it is larger than
    the global start frame.

::`loadClip(self, file_name, sample_rate=0, start=None)`:
    #cppname: HOM_Parm::loadClip
    Load animation for this parameter from the clip file specified by
    <<file_name>>.
    See [Hom:hou.Parm#saveClip] for the list of supported clip file formats.

    Any tracks in the clip file that do not match this parameter's
    [Hom:hou.Parm#name] will be ignored.

    If <<sample_rate>> is set to a non-zero, non-negative value, the
    specified value will be used when loading the animation.
    For example, if the current frame rate is 24 ([Hom:hou.fps]) and
    <<sample_rate>> is set to 12, the animation will be loaded with a keyframe
    at every second frame since <<sample_rate>> is half of the current
    frame rate.

    <<start>> specifies the frame the loaded animation should start from.
    By default the animation starts at the frame specified in the clip file.

    WARNING:
        Any existing keyframes for this parameter that are within the range
        of the loaded animation will be overwritten with the loaded data.

    This function will raise a hou.OperationFailed exception if there is an
    error reading animation data from the file.

::`clipData(start=None, end=None, binary=True, use_blosc_compression=True, sample_rate=0)` -> `str`:
    #cppname: HOM_Parm::clipData
    Returns the clip data for this parameter.
    This method is similar to [Hom:hou.Parm#saveClip], except that it returns
    the clip data (file contents) instead of saving the animation to a clip file.

    <<start>>, <<end>>, and <<sample_rate>> behave the same as in
    [Hom:hou.Parm#saveClip].

    If <<binary>> is `True`, return binary clip data,
    otherwise return plain text (ASCII) clip data.

    If <<use_blosc_compression>> is `True`, blosc compress the binary clip data.
    This cannot be used for plain text (ASCII) clip data.

    Raises a hou.OperationFailed exception if the parameter does not have
    animation.

    Raises a hou.InvalidInput exception if `start >= end`. If specifying only
    <<start>>, ensure that the specified value is less than the global
    end frame. Likewise, if specifying only <<end>>, ensure it is larger than
    the global start frame.

    Raises a hou.InvalidInput exception if `binary = False` and
    `use_blosc_compression = True`.

::`setClipData(data, binary=True, blosc_compressed=True, sample_rate=0, start=None)`:
    #cppname: HOM_Parm::setClipData
    Load animation for this parameter from the given clip <<data>>.
    This method is similar to [Hom:hou.Parm#loadClip], except that it loads
    animation from the given clip data instead of a clip file.

    <<sample_rate>> and <<start>> behave the same as in [Hom:hou.Parm#loadClip].

    <<binary>> and <<blosc_compressed>> specify the type of input data.

    If <<binary>> is `True`, the given data is binary clip data,
    otherwise it is plain text (ASCII) clip data.

    If <<blosc_compressed>> is `True`, the given data is blosc compressed
    binary data. This cannot be used for plain text (ASCII) clip data.

    Raises a hou.OperationFailed exception if the given data is invalid.

    Raises a hou.InvalidInput exception if `binary = False` and
    `blosc_compressed = True`.

::`setScope(self, on)`:
    #cppname: HOM_Parm::setScope
    Changes the scope property of this parameter's channel, which affects
    whether it is loaded in the animation editor.

::`setAutoscope(self, on)`:
    #cppname: HOM_Parm::setAutoscope
    Changes the autoscope property of the parameter. If this property is on,
    this parameter is automatically scoped when the object is selected.

::`setSelect(self, on)`:
    #cppname: HOM_Parm::setSelect
    Changes the select property of this parameter's channel, which affects
    whether it is selected in the animation editor.

::`setAutoSelect(self, on)`:
    #cppname: HOM_Parm::setAutoSelect
    Changes the autoselect property of the parameter. If this property is on,
    this parameter defines the default selection state when it is displayed in
    the animation editor.

::`setKeyframe(self, keyframe)`:
    #cppname: HOM_Parm::setKeyframe
    Sets a keyframe on this parameter.

    Raises [Hom:hou.TypeError] if `keyframe` is not of type
    [Hom:hou.BaseKeyframe]. Raises [Hom:hou.PermissionError] if this parameter
    is not writable.

::`setKeyframes(self, keyframes)`:
    #cppname: HOM_Parm::setKeyframes
    Sets multiple keyframe on this parameter.  Calling this method is more efficient
    than calling [Hom:hou.Parm#setKeyframe] several times because it sends out
    only one update event to Houdini for the entire batch of keyframes that are set.

    `keyframes` must be a tuple or list of [Hom:hou.BaseKeyframe] objects.

    Raises [Hom:hou.PermissionError] if this parameter is not writable.

::`setKeyframeExtrapolation(self, before, extrapol)`:
    #cppname: HOM_Parm::setKeyframeExtrapolation
    Sets a extrapolation on this parameter for time before the first keyframe
    or after the last keyframe. Extrapolation defines how a parm value is evaluated
    outside the keyframe range.

    before:
        If set to true, the extrapolation for evaluations before the first keyframe will be set.
        If set to false, the extrapolation for evaluations after the last keyframe will be set.

    extrapol:
        A [Hom:hou.parmExtrapolate] enumaration value.

    This function will raise a hou.ObjectWasDeleted exception if it is invoked 
    on a parameter that does not exist in Houdini.

    This function will raise a hou.PermissionError exception if writing to the
    specified parameter is impossible.

    This function will raise a hou.OperationFailed exception the parameter doesn't
    have a valid animation channel.

::`setPending(self, value)`:
    #cppname: HOM_Parm::setPending
    Sets the parameter value at the current frame and marks it as pending if
    the parameter is keyed.

    Raises [Hom:hou.TypeError] if the type of `value` does not match this
    parameter's type. Raises [Hom:hou.PermissionError] if this parameter is not
    writable.

::`stretch(self, num_frames_to_add)`:
    #cppname: HOM_Parm::stretch
    #status: ni

::`stretchSubrange(self, source_start_frame, source_end_frame, num_frames_to_add)`:
    #cppname: HOM_Parm::stretchSubrange
    #status: ni

== Value ==

::`unexpandedString(self)` -> `str`:
    #cppname: HOM_Parm::unexpandedString
    Returns the contents of the parameter before dollar sign and back-tick
    expansion.

    Examples of unexpanded strings would be "image$F.pic", "$HIP/split.hda",
    or "`chs('../font1/text')`".  If you were to call `eval()`
    on them, Houdini would perform variable expansion and back-tick expression
    evaluation, so you would get back something like "image1.pic" instead of
    "image$F.pic".
    
    Because only string parameters will attempt to do dollar sign and string
    expansion, this method will raise hou.OperationFailed if called from a
    non-string parameter.
    
    Suppose a string parameter contains keyframes. In this situation, Houdini
    will not attempt to do string expansion on the parameter's value, so calling
    this method will raise hou.OperationFailed. Instead of calling this method,
    you can call `expression()` to access the first Keyframe's expression. If
    there are multiple keyframes, you can call `keyframes()` to get a list of
    [Hom:hou.StringKeyframe] objects and call `expression()` on those objects to
    retrieve the expression.

::`eval(self)` -> `int`, `float`, or `str`:
    #cppname: HOM_Parm::eval
    Evaluates this parameter at the current frame and returns the result.
    See also the `evalAtFrame` and `evalAtTime` methods.

::`evalAsFloat(self)` -> `float`:
    #cppname: HOM_Parm::evalAsFloat
    Evaluates this parameter at the current frame and returns the result as a
    float.

    Raises [Hom:hou.TypeError] if the value cannot be converted to a float.

::`evalAsFloatAtFrame(self, frame)` -> `float`:
    #cppname: HOM_Parm::evalAsFloatAtFrame
    Evaluates this parameter at a certain frame and returns the result as a
    float.

    Raises [Hom:hou.TypeError] if the value cannot be converted to a float.

::`evalAsInt(self)` -> `int`:
    #cppname: HOM_Parm::evalAsInt

    Evaluates this parameter at the current frame and returns the result as an
    integer.

    Raises [Hom:hou.TypeError] if the value cannot be converted to an integer.

::`evalAsIntAtFrame(self, frame)` -> `int`:
    #cppname: HOM_Parm::evalAsIntAtFrame
    Evaluates this parameter at a certain frame
    and returns the result as an integer.

    Raises [Hom:hou.TypeError] if the value cannot be converted to an integer.

::`evalAsNode(self)` -> [Hom:hou.Node]:
    #cppname: HOM_Parm::evalAsNode
    Evaluates this parameter at the current frame and returns the result as a
    [Hom:hou.Node].

    Raises [Hom:hou.TypeError] if the value cannot be converted to a [Hom:hou.Node].

::`evalAsNodeAtFrame(self, frame)` -> [Hom:hou.Node]:
    #cppname: HOM_Parm::evalAsNodeAtFrame
    Evaluates this parameter at a certain frame and returns the result as a
    [Hom:hou.Node].

    Raises [Hom:hou.TypeError] if the value cannot be converted to a [Hom:hou.Node].

::`evalAsNodes(self)` -> `tuple` of [Hom:hou.Node]:
    #cppname: HOM_Parm::evalAsNodes
    Evaluates this parameter at the current frame and returns the result as a
    tuple of [Hom:hou.Node].

    Raises [Hom:hou.TypeError] if the value cannot be converted to a [Hom:hou.Node].

::`evalAsNodesAtFrame(self, frame)` -> `tuple` of [Hom:hou.Node]:
    #cppname: HOM_Parm::evalAsNodesAtFrame
    Evaluates this parameter at a certain frame and returns the result as a
    tuple of [Hom:hou.Node].

    Raises [Hom:hou.TypeError] if the value cannot be converted to a [Hom:hou.Node].

::`evalAsString(self)` -> `str`:
    #cppname: HOM_Parm::evalAsString
    Evaluates this parameter at the current frame and returns the result as a
    string.

    If you want the string contents of the parameter before variable expansion
    and expression evaluation then call [Hom:hou.Parm#unexpandedString].

    Raises [Hom:hou.TypeError] if the value cannot be converted to a string.

::`evalAsStringAtFrame(self, frame)` -> `str`:
    #cppname: HOM_Parm::evalAsStringAtFrame
    Evaluates this parameter at a certain frame and returns the result as a
    string.

    If you want the string contents of the parameter before variable expansion
    and expression evaluation then call [Hom:hou.Parm#unexpandedString].

    Raises [Hom:hou.TypeError] if the value cannot be converted to a string.

::`evalAtTime(self, time)` -> `int`, `float`, or `str`:
    #cppname: HOM_Parm::evalAtTime
    Evalute this parameter at a given time and return the result as an
    integer, float or string.

    See also evalAtFrame.

::`evalAtFrame(self, frame)` -> `int`, `float`, or `str`:
    #cppname: HOM_Parm::evalAtFrame
    Evalute this parameter at a given frame and return the result as an
    integer, float or string.

    See also evalAtTime.

::`evalAsRamp(self)` -> [Hom:hou.Ramp]:
    #cppname: HOM_Parm::evalAsRamp
    #replaces: Cmd:opramp
    Evaluates this parameter at the current frame and returns the result as a
    ramp.

    Raises [Hom:hou.TypeError] if the parameter is not a ramp.

::`evalAsRampAtFrame(self, frame)` -> [Hom:hou.Ramp]:
    #cppname: HOM_Parm::evalAsRampAtFrame
    #replaces: Cmd:opramp
    Evaluates this parameter at a certain frame and returns the result as a
    ramp.

    Raises [Hom:hou.TypeError] if the parameter is not a ramp.

::`evalAsGeometry(self)` -> [Hom:hou.Geometry]:
    #cppname: HOM_Parm::evalAsGeometry
    Evaluates this parameter at the current frame and returns the result as a
    geometry.

    Raises [Hom:hou.TypeError] if the parameter is not a geometry.

::`evalAsGeometryAtFrame(self, frame)` -> [Hom:hou.Geometry]:
    #cppname: HOM_Parm::evalAsGeometryAtFrame
    Evaluates this parameter at a certain frame and returns the result as a
    geometry.

    Raises [Hom:hou.TypeError] if the parameter is not a geometry.

::`evalAsJSONMap(self)` -> dict of `str` to `str`:
    #cppname: HOM_Parm::evalAsJSONMap
    Evaluates this parameter at the current frame and returns the result as a
    JSON map structure (i.e. Python dictionary).

    Raises [Hom:hou.TypeError] or [Hom:hou.OperationFailed] if the parameter is
    not a JSON map data parameter.

::`evalAsJSONMapAtFrame(self, frame)` -> [Hom:hou.JSONMap]:
    #cppname: HOM_Parm::evalAsJSONMapAtFrame
    Evaluates this parameter at a certain frame and returns the result as a
    JSON map structure (i.e. Python dictionary).

    Raises [Hom:hou.TypeError] or [Hom:hou.OperationFailed] if the parameter is
    not a JSON map data parameter.

::`rawValue(self)` -> `str`:
    #cppname: HOM_Parm::rawValue
    Returns the parameter's raw text value without evaluation or expansion.  If
    the parameter has an expression then the expression is returned otherwise
    the parameter's plain text value is returned.

== Setting ==

::`set(self, value, language=None, follow_parm_reference=True)`:
    #cppname: HOM_Parm::set
    Sets the parameter value at the current frame.

    value:
	A float, integer, or string to set the parameter value to.
	
	Pass in a [Hom:hou.Ramp] object, as the parameter value, to set the
	value of a ramp parameter. The ramp object's type needs to match the
	target ramp's type.

	Pass in a [Hom:hou.Geometry] object, as the parameter value, to set
	the value of a geometry data parameter.

	Pass in a [Hom:hou.Parm] object to create a channel reference from this
	parameter to the specified parameter.

    language:
	This option only applies when setting to a [Hom:hou.Parm] value.
	Specifies the expression language to use when creating a channel
	reference from this parameter to the given parameter.  Set this option
	to an [Hom:hou.exprLanguage] object or `None` to choose the default
	language.

    follow_parm_reference:
	This option only applies when setting to a [Hom:hou.Parm] value.
	When this option is set to `True` then this method will follow
	channel references and create a channel reference from the
	referenced parameter to the given parameter.

    If this parameter currently contains a channel reference to another
    parameter, then this method will follow channel references and change the
    value of the referenced parameter.  If this is not the desired behavior,
    then first delete the channel reference with
    [Hom:hou.Parm#deleteAllKeyframes].  Alternatively if you are
    setting the value to another parameter and do not want to follow existing
    channel references then set the optional `follow_parm_reference` argument
    to `False`.

    Raises [Hom:hou.TypeError] if the type of `value` does not match the
    type of this parameter. Raises [Hom:hou.PermissionError] if this
    parameter is not writable.

    See also [Hom:hou.Node#setParms].

::`setFromParm(self, src)`:
    #cppname: HOM_Parm::setFromParm
    Copies the value of an entire parameter, including channels, from the
    provided `src` parameter.

== Expression ==

::`expression(self)` -> `str`:
    #cppname: HOM_Parm::expression
    Returns this parameter's expression.

    For example, a parameter might contain the Python expression `frame() * 2`.
    In this case [Hom:hou.Parm#eval] at frame 2 would return the value 4,
    while calling expression() would return the string `frame() * 2`.
    
    If the parameter does not contain an expression, this method will raise
    [Hom:hou.OperationFailed].  Also, if the parameter contains more than one
    keyframe then it could contain multiple different expressions, so it also
    raises [Hom:hou.OperationFailed] in that case.
    
    This method is roughly equivalent to...
    {{{
    #!python
    parm.keyframes()[0].expression()
    }}}
    
    See also the `setExpression()`, `expressionLanguage()`, `keyframes()`,
    and `eval()` methods.

::`setExpression(self, expression, language=None, replace_expression=True)`:
    #cppname: HOM_Parm::setExpression
    Sets this parameter's expression.

    expression:
    A string containing the expression that will go inside the parameter.

    language:
    Either a [Hom:hou.exprLanguage] enumeration value or `None`.

    If language is None and the parameter does not already contain an
    expression, the language will be the node's expression language.  (See
    [Hom:hou.Node#expressionLanguage].)  Otherwise, if language is None and
    the parameter already has an expression, the expression language will
    not change.

    replace_expression:
    This parameter only has effect if the parameter already contains
    keyframes.  If it is `True`, Houdini will replace the keyframe
    before the current time with one containing the new expression.
    Otherwise, it will always add a keyframe at the current time.
    Note that this behavior matches what happens when you edit an
    expression from Houdini's parameter dialog.

    Unlike [Hom:hou.Parm#set], this method does not follow channel references.
    That is, if this parameter is referencing another parameter and you call
    setExpression(), it change the channel reference expression into the
    specified expression.

    If the parameter does not already contain any keyframes, this method is
    roughly equivalent to setting a keyframe at frame 1, where the keyframe's
    expression and language are the ones specified.
    
    This method can be approximately implemented as follows:

    {{{
    #!python
    def setExpression(self, expression, language=None, replace_expression=None)
    if self.template().type() == hou.parmTemplateType.String:
        k = hou.StringKeyframe()
    else:
        k = hou.Keyframe()

    k.setExpression(expression, language)

    if len(self.keyframes()):
        if replace_expression:
        k.setTime(self.effectiveKeyframeAtFrame(hou.frame()).time())
        else:
        k.setTime(hou.time())
    else
        k.setTime(0.0)

    self.setKeyframe(k)
    }}}

    See also the `expression`, `expressionLanguage`, and `setKeyframe`
    methods, [Hom:hou.Node#expressionLanguage], and
    [Hom:hou.Node#setExpressions].

::`expressionLanguage(self)` -> [Hom:hou.exprLanguage] enum value:
    #cppname: HOM_Parm::expressionLanguage
    Returns the parameter's expression's language.

    If the parameter does not contain an expression, this method will raise
    [Hom:hou.OperationFailed].  Also, if the parameter contains more than one
    keyframe then it could contain multiple different expressions, so it also
    raises [Hom:hou.OperationFailed] in that case.
    
    To change the expression language, use [Hom:hou.Parm#setExpression] and
    explicitly specify the language:
    `parm.setExpression(parm.expression(), language)`.
    
    This method is roughly equivalent to...
    
    {{{
    #!python
    parm.keyframes()[0].expressionLanguage()
    }}}
    
    See also the `expression()`, `setExpression()`, `keyframes()`,
    and `setExpressionLanguage()` methods.

== References ==

::`getReferencedParm(self)` -> [Hom:hou.Parm]:
    #cppname: HOM_Parm::getReferencedParm
    Returns the referenced parameter. If no parameter is referenced, returns
    this parameter.

::`parmsReferencingThis(self)` -> `tuple` of [Hom:hou.Parm]:
    #cppname: HOM_Parm::parmsReferencingThis
    Return a tuple of all the parameters in the scene that have channel
    references to this parameter.

== Defaults ==

::`hasTemporaryDefaults(self)` -> `bool`:
    #cppname: HOM_Parm::hasTemporaryDefaults
    Returns whether a default has been explicitly set on the parameter.
    
    See also the `revertToDefaults()` and 
    `revertToAndRestorePermanentDefaults()`methods.

::`isAtDefault(self, compare_temporary_defaults=True, compare_expressions=False)` -> `bool`:
    #cppname: HOM_Parm::isAtDefault
    Returns whether the parameter is currently at its default.

    `compare_temporary_defaults`:
    When <<compare_temporary_defaults>> is True, `isDefault` also checks
        against any temporary defaults a user may have set.  The value of
        <<compare_temporary_defaults>> must be either True or False.

    `compare_expressions`:
    When <<compare_Expressions>> is True, `isDefault` compares the actual
        expression when a parameter has a default factory expression.
        The value of <<compare_expressions>> must be either True or False.

    See also the `revertToDefaults()` and 
    `revertToAndRestorePermanentDefaults()`methods.

::`revertToAndRestorePermanentDefaults(self)`:
    #cppname: HOM_Parm::revertToAndRestorePermanentDefaults
    Changes the value back to the default that ships with Houdini, and
    restores that default.
    
    See also the `revertToDefaults()` method, and
    [Hom:hou.ParmTuple#revertToAndRestorePermanentDefaults]

::`revertToDefaults(self)`:
    #cppname: HOM_Parm::revertToDefaults
    Change the value back to the default(s).
    See also the `revertToAndRestoreFactoryDefaults()` method.

== Hierarchy ==

::`containingFolders(self)` -> tuple of `str`:
    #cppname: HOM_Parm::containingFolders
    Returns a tuple of strings corresponding to the names of the folders
    containing this parameter.

    For example, if this parameter is in the Shading folder and the Shading
    folder is inside the Render folder, this method will return ("Render",
    "Shading").  Note that by folder name, we mean the label used in the
    parameter dialog, not the internal parameter name.
    
    Returns an empty tuple if this parameter is not inside a folder.

    Note that calling this method on many parameters may be slow. For a faster
    alternative, see [Hom:hou.Node#parmsInFolder].

    See also the `containingFolderSetParmTuples` method, and
    [Hom:hou.Node#parmTuplesInFolder].

::`containingFolderSetParmTuples(self)` -> tuple of [Hom:hou.ParmTuple]:
    #cppname: HOM_Parm::containingFolderSetParmTuples
    Return a tuple of ParmTuples corresponding to the folders containing this
    parameter.

    For example, if this parameter is in the Shading folder and the Shading
    folder is inside the Render folder, this method will return a tuple
    containing the Render parm tuple and the Shading parm tuple.  Any parm
    tuples returned will be folder sets.
    
    If this parameter is not inside a folder, an empty tuple is returned.
    
    See also the `containingFolders()` method, and
    [Hom:hou.Node#parmsInFolder] and [Hom:hou.Node#parmTuplesInFolder].

::`containingFolderIndices(self)` -> tuple of `int`:
    #cppname: HOM_Parm::containingFolderIndices
    Return a tuple of indices corresponding to the folders containing this
    parameter.  Each index refers to a folder in the corresponding folder set
    parameter.

    This method can be implemented as follows:
    {{{
    #!python
    def containingFolderIndices(self):
    return tuple(
        list(folder_set_parm_tuple.parmTemplate().folderNames()).index(
        folder_name)
        for folder_set_parm_tuple, folder_name in zip(
        parm.containingFolderSetParmTuples(), parm.containingFolders()))
    }}}

    This example makes a parameter visible in the parameter pane by opening
    all the folders containing it.
    {{{
    #!python
    def makeParmVisible(parm):
    for folder_set_parm_tuple, folder_index in zip(
        parm.containingFolderSetParmTuples(),
        parm.containingFolderIndices()):
        folder_set_parm_tuple[0].set(folder_index)
    }}}

== Clipboard ==

::`copyToParmClipboard(self)`:
    #cppname: HOM_Parm::copyToParmClipboard
    Copies this to the parameter clipboard.
    See also [Hom:hou.parmClipboardContents].

== Metadata ==

::`name(self)` -> `str`:
    #cppname: HOM_Parm::name
    Returns this parameter's name.

::`tuple(self)` -> [Hom:hou.ParmTuple]:
    #cppname: HOM_Parm::tuple
    Returns the [Hom:hou.ParmTuple] associated with this parameter.

    For example, calling this method on the Parm object for the translation
    parameter "tx", would return a ParmTuple that contains Parm objects for the
    three translation parameters "tx", "ty" and "tz". If no tuple is associated
    with the parameter, then the parameter itself is returned in a tuple of size
    1.

::`type(self)` -> parmTemplateType:
    #cppname: HOM_Parm::type
    #status: ni

::`path(self)` -> `str`:
    #cppname: HOM_Parm::path
    Returns the full path to this parameter.

::`description(self)` -> `str`:
    #cppname: HOM_Parm::description
    Returns this parameter's label.

::`node(self)` -> [Hom:hou.Node]:
    #cppname: HOM_Parm::node
    Returns the node on which this parameter exists.

::`parmTemplate(self)` -> [Hom:hou.ParmTemplate]:
    #cppname: HOM_Parm::parmTemplate
    Returns the template for this parameter.

::`componentIndex(self)` -> `int`:
    #cppname: HOM_Parm::componentIndex
    Returns the component index of this parameter.

    For example, the translation parameter along the x-axis, "tx", would return
    a component index of 0, while the translation parameter along the y-axis,
    "ty" would return a component index of 1.

::`isLocked(self)` -> `bool`:
    #cppname: HOM_Parm::isLocked
    Returns whether this parameter is locked (uneditable).

::`isParmReference(self)`:
    #cppname: HOM_Parm::isParmReference
    #status: ni

::`isSpare(self)` -> `bool`:
    #cppname: HOM_Parm::isSpare
    Returns whether this parameter is a "spare" (user-defined) parameter.

::`isTimeDependent(self)` -> `bool`:
    #cppname: HOM_Parm::isTimeDependent
    Returns whether this parameter is _time dependent_, that is, its
    value changes depending on the point on the timeline at which it's
    evaluated. For example the parameter has an expression containing
    the `$F` (current frame number) variable.

::`disable(self, on)`:
    #cppname: HOM_Parm::disable
    Sets the UI disable state of this parameter in its node. 
    This is not the same as locking a parameter, as the underlying value 
    can still be modified. It's closer to what a disable-when conditional 
    does, when a parameter is disabled automatically by it.

::`isDisabled(self)` -> `bool`:
    #cppname: HOM_Parm::isDisabled
    Returns the disable state of the parameter, ignoring the lock state.
    This can be used to read the result of a disable-when conditional.

    It is recommended that [Hom:hou.Node#updateParmStates] is called before
    executing this method either in non-graphical Houdini or when the owner
    node has not yet been loaded into the Parameter Pane.

::`hide(self, on)`:
    #cppname: HOM_Parm::hide
    Sets the UI hidden state of this parameter in its node.
    Calling this method has the same effect as changing the `Invisible` 
    checkbox on the `Edit Parameter Interface` dialog, or hiding the parameter 
    with a hide-when conditional.

    However, changing the UI state with this function is transient and does not 
    affect node parameter templates, which means that the new state is not saved
    to .hip file and can be restored when refreshing the node to its 
    spare parameter templates. 

    To permanently change the UI state of a parameter on a node, please use
    [Hom:hou.ParmTemplate#hide] instead:

    {{{
    #!python
    parms = hou.node('/obj/node').parmTemplateGroup()
    p = parms.find('lookatpath')
    p.hide(True)
    parms.replace('lookatpath', p)
    hou.node('/obj/node').setParmTemplateGroup(parms) 
    }}}

::`isHidden(self)` -> `bool`:
    #cppname: HOM_Parm::isHidden
    Returns the hidden state of the parameter. This can be used to read the 
    result of a hide-when conditional.

    It is recommended that [Hom:hou.Node#updateParmStates] is called before
    executing this method either in non-graphical Houdini or when the owner
    node has not yet been loaded into the Parameter Pane.

::`isVisible(self)` -> `bool`:
    #cppname: HOM_Parm::isVisible
    Returns whether or not this parameter would be visible in the parameter
    dialog for this node. It checks both the parameter's template, and the
    hidden state of the parameter. This is equivalent to the following code
    (but runs faster because it avoids creating the [Hom:hou.ParmTemplate]):
    
    {{{
    #!python
    >>> p = hou.parm('/obj/geo1/tx')
    >>> not p.isHidden() and not p.parmTemplate().isHidden()
    True
    }}}

::`isConstrained(self)` -> `bool`:
    #cppname: HOM_Parm::isConstrained
    Returns True if the Parm's parent node is an OBJ that is cooked and has
    constraints.

::`lock(self, on)`:
    #cppname: HOM_Parm::lock
    Locks (`lock(True)`) or unlocks (`lock(False)`) this parameter
    (this is, makes the value uneditable).

    Raises [Hom:hou.PermissionError] if this parameter is part of a locked
    digital asset.

== CHOPs ==

::`overrideTrack(self)` -> [Hom:hou.Track] or None:
    #cppname: HOM_Parm::overrideTrack
    Returns the CHOP track overriding this parameter, if any.

::`createClip(self, parent_node, name, create_new, apply_immediately, current_value_only, create_locked, set_value_to_default)` -> [Hom:hou.ChopNode]:
    #cppname: HOM_Parm::createClip
    Creates a Channel CHOP representing this parameter. The Channel CHOP is
    created with the given name as a child of the given parent node. The
    parent_node is typically created via
    [Hom:hou.Node#findOrCreateMotionEffectsNetwork].
    
    create_new:
    Always create a new Channel CHOP. If set to False, then if a Channel
    CHOP already exists with the same name, it will be re-used. If the
    parameter already exists on the Channel CHOP, the older parameter will
    be removed first.

    apply_immediately:
    If set to True, then the export flag on the Channel CHOP will be set.

    current_value_only:
    If set to True, then only the current value of the parameter will be
    stored.

    create_locked:
    If set to True, then the parameters are locked on creation.

    set_value_to_default:
    If set to True, then the parameters are reverted to their default
    values on creation

    See also [Hom:hou.Node#findOrCreateMotionEffectsNetwork].

::`appendClip(self, chop_node, apply_immediately, current_value_only, create_locked, set_value_to_default)`:
    #cppname: HOM_Parm::appendClip
    Appends this parameter to the specified Channel CHOP.
    
    apply_immediately:
    If set to True, then the export flag on the Channel CHOP will be set.

    current_value_only:
    If set to True, then only the current value of the parameter will be
    stored.

    create_locked:
    If set to True, then the parameters are locked on creation.

    set_value_to_default:
    If set to True, then the parameters are reverted to their default
    values on creation

== Scripts ==

::`executeCallbacks(self)`:
    #cppname: HOM_Parm::executeCallbacks
    #status: ni

    Use [Hom:hou.Parm#pressButton].

::`pressButton(self, arguments={})`:
    #cppname: HOM_Parm::pressButton
    Emulates clicking a button parameter to trigger its callback script.
    Raises [Hom:hou.OperationFailed] if the callback script could not be
    run. An optional dictionary of arguments can be passed to the callback 
    script. Raises [Hom:hou.TypeError] if a n argument value type is unsupported.

    NOTE:
	This can be called on any type parameter to trigger its callback script, it is not limited to only button parameters.

    arguments:
	An optional dictionary of arguments for the callback script. The dictionary 
	is merged with the keyword values passed to the callback. The arguments values 
	are single values of the following types: `int`, `bool`, `float`, `str`.		

== Multiparms ==

::`insertMultiParmInstance(self, index)`:
    #cppname: HOM_Parm::insertMultiParmInstance
    Insert a new multi parm instance before the given index. To append a new
    multi parm instance, set the index to be the current number of instances.
    The current number can be queried by calling `evalAsInt` on the this 
    parameter.
    
::`removeMultiParmInstance(self, index)`:
    #cppname: HOM_Parm::removeMultiParmInstance
    Removes the multi parm instance at the given index.

::`isMultiParmInstance(self)` -> `bool`:
    #cppname: HOM_Parm::isMultiParmInstance
    Return whether this parameter is an instance of a multi parm.  For example,
    the `pt0x`, `pt1x`, `pt2x`, etc. parameters in an `add` SOP are instances
    of a multiparm.

::`parentMultiParm(self)` -> [Hom:hou.Parm]:
    #cppname: HOM_Parm::parentMultiParm
    Return the parent multi-parameter if this parameter is a multi-parameter
    instance and None otherwise.

::`multiParmInstanceIndices(self)` -> tuple of `int`:
    #cppname: HOM_Parm::multiParmInstanceIndices
    If this parameter is a multi-parameter instance, then return a tuple of
    indices of where the parameter appears in the multi-parameter block and any
    nested blocks.  Indices for outer multi-parameter blocks are listed first.

    For example if this parameter appears as the fourth instance in the
    multi-parameter block then (3,) is returned.

    As another example if this parameter appears as the third instance in the
    multi-parameter block and the block itself appears as the first instance
    of an outer multi-parameter block then (0, 2) is returned.

::`multiParmInstances(self)` -> `tuple` of [Hom:hou.Parm]:
    #cppname: HOM_Parm::multiParmInstances
    If this parameter corresponds to the number of instances for a multiparm,
    return all the parameters corresponding to all instances of this multiparm.

    Returns an empty tuple if this parameter is not for a multiparm.

== Menus ==

::`menuLabels(self)` -> tuple of `str`:
    #cppname: HOM_Parm::menuLabels
    Returns a list of labels for all possible menu items (for a menu parameter).
    Raises [Hom:hou.OperationFailed] if this parameter is not a menu.

::`menuItems(self)` -> tuple of `str`:
    #cppname: HOM_Parm::menuItems
    Returns a list of all possible menu items (for a menu parameter).
    Raises [Hom:hou.OperationFailed] if this parameter is not a menu.

== Misc ==

::`asCode(self, brief=False, save_values=True, save_keyframes=True, save_keys_in_frames=False, save_flag_values=True, save_aliases=True, function_name=None)` -> `str`:
    #cppname: HOM_Parm::asCode
    Returns a script of Python statements that can be executed to 
    set the parameter's values, flags and other properties.
    To run the script, use either Python's `exec` or `execfile` functions.

    `brief`:
        When <<brief>> is True, the output script omits commands for 
        setting values and flags that are set to the factory defaults.  
        The script also omits keyframe commands that set unused
        values, slopes and accelerations.  The value of <<brief>> must
        be either True or False.

    `save_values`:
        When <<save_values>> is True, `asCode` outputs commands
        for setting the parameter's value.  The value of <<save_values>> 
        must be either True or False.

    `save_keyframes`:
        When <<save_keyframes>> is True, `asCode` outputs commands
        for creating the parameter's keyframes (if any).  The value 
        of <<save_keyframes>> must be either True or False.

    `save_keys_in_frames`:
        When <<save_keys_in_frames>> is True, `asCode` outputs commands
        for setting channel and key times in samples (frames) instead 
        of seconds.  This parameter has no effect if <<save_keyframes>>
        is set to False.  The value of <<save_keys_in_frames>> must be either
        True or False.

    `save_flag_values`:
        When <<save_flag_values>> is True, `asCode` outputs commands
        for setting the parameter's flag values.  The value of
        <<save_flag_values>> must be either True or False.

    `save_aliases`:
        When <<save_aliases>> is True, `asCode` outputs commands for
        setting the parameter's channel alias.  The value of
        <<save_aliases>> must be either True or False.

    `function_name`:
        If <<function_name>> is specified, then the output script 
        is wrapped in a Python function definition with the given name.
        <<function_name>> must be a non-zero length string consisting of 
        only alphanumeric and underscore characters.  Any invalid characters 
        are internally converted to underscores.

    The wrapper function takes in a single argument which must be a
    reference to an existing node parameter.  For symmetry, the function
    also returns the parameter reference.

    Here is an example of saving the output to a file and then loading 
    it back into Houdini:
    {{{
    #!python
    # Get a reference to the target parameter.
    p = hou.parm("/obj/geo1/tx")

    # Execute asCode and write the output script to file.
    script = p.asCode()
    f = open("set_parm_properties.py", "w")
    f.write(script)
    f.close()

    # Execute the script.  This will set the values, flag values
    # and other properties on /obj/geo1's tx parameter.  It will
    # also store a reference to the tx parameter into a variable
    # named 'hou_parm'.
    execfile("set_parm_properties.py")
    }}}

    Here is an example of saving the output into a function and then 
    calling it in Houdini:
    {{{
    #!python
    # Get a reference to the target parameter.
    node = hou.parm("/obj/geo1/tx")

    # Execute asCode and write the function definition to file.
    func = p.asCode(function_name="setParmProperties")
    f = open("parmlib.py", "w")
    f.write(func)
    f.close()

    # Call the function definition to set the properties on another
    # parameter.
    import parmlib
    hou_parm = parmlib.setParmProperties(node.parm("ty"))
    }}}

::`language(self)`:
    #cppname: HOM_Parm::language
    #status: ni

::`setLanguage(self, language)`:
    #cppname: HOM_Parm::setLanguage
    #status: ni

@replaces

- [Cmd:chadd]
- [Cmd:chalias]
- [Cmd:chautoscope]
- [Cmd:chkey]
- [Cmd:chkeyget]
- [Cmd:chkeyls]
- [Cmd:chlock]
- [Cmd:chrefit]
- [Cmd:chreverse]
- [Cmd:chrm]
- [Cmd:chround]
- [Cmd:chscope]
- [Cmd:chstretch]
- [Cmd:opparm]
- [Cmd:opscript]
- [Exp:ch]
- [Exp:chf]
- [Exp:chs]
- [Exp:chsraw]
- [Exp:cht]

