= hou.MenuParmTemplate =
#type: homclass
#cppname: HOM_MenuParmTemplate
#superclass: hou.ParmTemplate
#group: parmtemplates

"""Describes a menu parameter containing evaluating to integer values.
Note that StringParmTemplates may also have menus."""

@methods

::`__init__(self, name, label, menu_items, menu_labels=(), default_value=0, icon_names=(), item_generator_script='', item_generator_script_language=None, disable_when=None, menu_type=hou.menuType.Normal, is_hidden=False, is_label_hidden=False, join_with_next=False, help=None, script_callback=None, script_callback_language=hou.scriptLanguage.Hscript, tags={}, default_expression="", default_expression_language=hou.scriptLanguage.Hscript, store_default_value_as_string=False, menu_use_token=False, is_button_strip=False, strip_uses_icons=False)`:
    #cppname: HOM_MenuParmTemplate::HOM_MenuParmTemplate
    name:
	See [Hom:hou.ParmTemplate#name] for more information.
    label:
	See [Hom:hou.ParmTemplate#label] for more information.
    menu_items:
	See the [menuItems|Hom:hou.MenuParmTemplate#menuItems] method
	for more information.
    menu_labels:
	See the [menuLabels|Hom:hou.MenuParmTemplate#menuLabels] method
	for more information.

	If this parameter is not given, it defaults to the value of
	the `menu_items` parameter.
    default_value:
	See the [defaultValue|Hom:hou.MenuParmTemplate#defaultValue] method
	for more information.
    icon_names:
	See the [iconNames|Hom:hou.MenuParmTemplate#iconNames] method
	for more information.
	
	If this parameter is an empty tuple, the menu will not contain icons.
    item_generator_script:
	See the
	[itemGeneratorScript|Hom:hou.MenuParmTemplate#itemGeneratorScript]
	method for more information.
    item_generator_script_language:
	See the
	[itemGeneratorScriptLanguage|Hom:hou.MenuParmTemplate#itemGeneratorScriptLanguage]
	method for more information.  If this parameter is `None` it defaults
	to [hou.scriptLanguage.Python|Hom:hou.scriptLanguage].
    menu_type:
	See the [menuType|Hom:hou.MenuParmTemplate#menuType] method for more
	information.
    disable_when:
	See [Hom:hou.ParmTemplate#disableWhen] for more information.
    is_hidden:
	See [Hom:hou.ParmTemplate#isHidden] for more information.
    is_label_hidden:
	See [Hom:hou.ParmTemplate#isLabelHidden] for more information.
    join_with_next:
	See [Hom:hou.ParmTemplate#joinsWithNext] for more information.
    help:
	See [Hom:hou.ParmTemplate#help] for more information.
    script_callback:
	See [Hom:hou.ParmTemplate#scriptCallback] for more information.
    script_callback_language:
	See [Hom:hou.ParmTemplate#scriptCallbackLanguage] for more information.
    tags:
	See [Hom:hou.ParmTemplate#tags] for more information.
    default_expression:
	See the [defaultExpression|Hom:hou.MenuParmTemplate#defaultExpression]
	method for more information.
    default_expression_language:
	See the [defaultExpressionLanguage|Hom:hou.MenuParmTemplate#defaultExpressionLanguage] method for more information.
    store_default_value_as_string:
	If set to True then the template stores the chosen default string
	instead of the default index in dialog scripts and other parameter
	formats internal to Houdini.
	menu_use_token:
	See the [menuUseToken|Hom:hou.MenuParmTemplate#menuUseToken] method
	for more information.
    is_button_strip:
	See [Hom:hou.ParmTemplate#isButtonStrip] for more information.
    strip_uses_icons:
	See [Hom:hou.ParmTemplate#isIconStrip] for more information.

    Note that MenuParmTemplates have only one component.

::`menuItems(self)` -> `tuple` of `str`:
    #cppname: HOM_MenuParmTemplate::menuItems
    Return the tuple of internal menu names.

    These internal menu names are not displayed in the UI, but they can be
    passed to [Hom:hou.Parm#set] and will be returned by 
    [Hom:hou.Parm#evalAsString] for menu parameters.

::`setMenuItems(self, menu_items)`:
    #cppname: HOM_MenuParmTemplate::setMenuItems
    Set the internal menu names to the given sequence of strings.

    See the [menuItems|Hom:hou.MenuParmTemplate#menuItems] method for more
    information.

    If the new number of menu items is less than the old number, the menu
    labels will be shortened and the default value will be modified if it is
    out of range.

::`menuLabels(self)` -> `tuple` of `str`:
    #cppname: HOM_MenuParmTemplate::menuLabels
    Return the tuple of menu labels displayed in the UI.

::`setMenuLabels(self, menu_labels)`:
    #cppname: HOM_MenuParmTemplate::setMenuLabels
    Set the menu labels displayed in the UI to the given sequence of strings.

    If the number of menu labels is less than the number of menu items,
    Houdini uses the internal menu item names for the missing labels.  If
    the number of labels is more than the number of menu items, Houdini
    discards the extra labels.

    If you want to change both the menu items and menu labels, be sure to
    change the menu items first.

::`defaultValue(self)` -> `int`:
    #cppname: HOM_MenuParmTemplate::defaultValue
    Return the index of the default menu item.

    See also the
    [defaultValueAsString|Hom:hou.MenuParmTemplate#defaultValueAsString]
    method.

::`setDefaultValue(self, default_value)`:
    #cppname: HOM_MenuParmTemplate::setDefaultValue
    Set the index of the default menu item.

    Note that if this index is out of range, it will be adjusted.

::`defaultExpression(self)` -> `string`:
    #cppname: HOM_MenuParmTemplate::defaultExpression
    Return the expression, which when evaluated, returns the index
    of the default menu item.
    
    The default expression takes precedence 
    over the default value.  If the default expression is not set 
    (i.e. an empty string), then the default value is used instead.

    Note that the default expression language is needed
    to interpret the meaning of the default expression.

::`setDefaultExpression(self, default_expression)`:
    #cppname: HOM_MenuParmTemplate::setDefaultExpression
    Set the default expression, which when evaluated, returns the index
    of the default menu item.  
    
    If `default_expression` is the empty string,
    then the default expression is unset.

::`defaultExpressionLanguage(self)` -> tuple of [Hom:hou.scriptLanguage]:
    #cppname: HOM_MenuParmTemplate::defaultExpressionLanguage
    Return the default expression language.

    The default expression language only applies if the default expression
    is set.  If the default expression is not set,
    then the expression language is set to [Hom:hou.scriptLanguage#Hscript].

::`setDefaultExpressionLanguage(self, default_expression_language)`:
    #cppname: HOM_MenuParmTemplate::setDefaultExpressionLanguage
    Set the default expression language.

    See the `defaultExpressionLanguage` method for more information.  

::`defaultValueAsString(self)` -> `str`:
    #cppname: HOM_MenuParmTemplate::defaultValuAsStringe
    Return the internal name of the default menu item.

    This method could be implemented as follows:
    {{{
    #!python
    def defaultValueAsString(self):
	return self.menuItems()[self.defaultValue()]
    }}}

::`iconNames(self)` -> `tuple` of `str`:
    #cppname: HOM_MenuParmTemplate::iconNames
    Return the tuple of icons corresponding to the menu items.
    If there are no icons, returns a tuple of empty strings.

::`setIconNames(self, icon_names)`:
    #cppname: HOM_MenuParmTemplate::setIconNames
    Set the icon names to the given sequence of strings.

::`itemGeneratorScript(self)` -> `str`:
    #cppname: HOM_MenuParmTemplate::itemGeneratorScript
    Return the script used to generate menu items, or an empty string if
    there is no such script.

    Note that if the item generator script language is
    [hou.scriptLanguage.Python|Hom:hou.scriptLanguage], this script may be
    either a single-line Python expression or a multi-line body of a Python
    function.

::`setItemGeneratorScript(self, item_generator_script)`:
    #cppname: HOM_MenuParmTemplate::setItemGeneratorScript
    Set the script used to generate menu items.

    See the `itemGeneratorScript` method for more information.

::`itemGeneratorScriptLanguage(self)` -> [Hom:hou.scriptLanguage] enum value:
    #cppname: HOM_MenuParmTemplate::itemGeneratorScript
    Return the programming language for the script that generates menu items.

::`setItemGeneratorScriptLanguage(self, language)`:
    #cppname: HOM_MenuParmTemplate::setItemGeneratorScriptLanguage
    Set the script language used to generate menu items to a
    [Hom:hou.scriptLanguage] enum value.

    See the `itemGeneratorScriptLanguage` method for more information.

::`menuType(self)` -> [Hom:hou.menuType] enum value:
    #cppname: HOM_MenuParmTemplate::menuType
    Return the type of menu.  Note that some menu types only apply to string
    parameters with menus, so the meaningful menu types for MenuParmTemplates
    are [hou.menuType.Normal|Hom:hou.menuType] (for standard menus) and
    [hou.menuType.Mini|Hom:hou.menuType] for menus that only display a dropdown
    arrow.  See [Hom:hou.menuType] for more information.

::`setMenuType(self, menu_type)`:
    #cppname: HOM_MenuParmTemplate::setMenuType
    Set the type of menu to a [Hom:hou.menuType] enum value.

    See the `menuType` method for more information.

::`menuUseToken(self)` -> `bool`:
    #cppname: HOM_MenuParmTemplate::menuUseToken
    Return whether the parameter is set to the token value instead of
    the index.

    See also the `setMenuUseToken` method.

::`setMenuUseToken(self, on)`:
    #cppname: HOM_MenuParmTemplate::setMenuUseToken
    Set whether the parameter is set to the token value instead of
    the index.

    See also the `menuUseToken` method.

::`setAsMenu(self)`:
    #cppname: HOM_MenuParmTemplate::setAsMenu
    Turn back the parameter to a default menu drop down.

    See also the `setAsButtonStrip`, `setAsIconStrip` methods.

::`isMenu(self)` -> `bool`:
    #cppname: HOM_MenuParmTemplate::isMenu
    Return whether the parameter is set to use the drop down menu widget.

::`setAsButtonStrip(self)`:
    #cppname: HOM_MenuParmTemplate::setAsButtonStrip
    Set the parameter to use a Button Strip widget.

    See also the `setAsMenu`, `setAsIconStrip` methods.

::`isButtonStrip(self)` -> `bool`:
    #cppname: HOM_MenuParmTemplate::isButtonStrip
    Return whether the parameter is set to use the button strip widget.

::`setAsIconStrip(self)`:
    #cppname: HOM_MenuParmTemplate::setAsIconStrip
    Set the parameter to use a Icon Strip widget.

    See also the `setAsMenu`, `setAsButtonStrip` methods.

::`isIconStrip(self)` -> `bool`:
    #cppname: HOM_MenuParmTemplate::isIconStrip
    Return whether the parameter is set to use the icon strip widget.

@replaces

- [Cmd:opmenu]

