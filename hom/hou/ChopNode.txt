= hou.ChopNode =
#type: homclass
#cppname: HOM_ChopNode
#superclass: hou.Node
#group: channels

"""Class representing a CHOP node."""

@methods

::`bypass(self, on)`:
    #cppname: HOM_ChopNode::bypass

    Turn the node's bypass flag on or off, making this node have no effect.

::`clipData(self, binary)` -> str:
    #cppname: HOM_ChopNode::clipData

    Returns the clip data for the CHOP node in ASCII or binary, depending
    on the value of the `binary` parameter.

::`setClipData(self, data, binary)`:
    #cppname: HOM_ChopNode::setClipData

    Sets the clip data for the CHOP node. Should only be called on
    locked nodes.

::`evaluate(self, track_index, sample_index)`:
    #cppname: HOM_ChopNode::evaluate
    #status: ni

::`evaluateInput(self, chop_input_node, track_index, sample_index)`:
    #cppname: HOM_ChopNode::evaluateInput
    #status: ni

::`evaluateInputAtEnd(self, chop_input_node)`:
    #cppname: HOM_ChopNode::evaluateInputAtEnd
    #status: ni

::`evaluateInputMaxValue(self, chop_input_node, track_index)`:
    #cppname: HOM_ChopNode::evaluateInputMaxValue
    #status: ni

::`evaluateInputMinValue(self, chop_input_node, track_index)`:
    #cppname: HOM_ChopNode::evaluateInputMinValue
    #status: ni

::`findTrack(self, name)` -> Track or None:
    #cppname: HOM_ChopNode::findTrack
    #status: ni

::`frameToSamples(self, frame)` -> `double`:
    #cppname: HOM_ChopNode::frameToSamples

    Converts a value expressed as frames to a value expressed in samples.

::`isAudioFlagSet(self)` -> `bool`:
    #cppname: HOM_ChopNode::isAudioFlagSet

    Returns whether the node's audio flag is on.

::`isBypassed(self)` -> `bool`:
    #cppname: HOM_ChopNode::isBypassed

    Returns whether the node's bypass flag is on.

::`isCurrentFlagSet(self)` -> `bool`:
    #cppname: HOM_ChopNode::isCurrentFlagSet

    Returns whether the node's current flag is on.

::`isDisplayFlagSet(self)` -> `bool`:
    #cppname: HOM_ChopNode::isDisplayFlagSet
    
    Returns whether the node's display flag is on.

::`isExportFlagSet(self)` -> `bool`:
    #cppname: HOM_ChopNode::isExportFlagSet

    Returns whether the node's export flag is on.

::`isLocked(self)` -> `bool`:
    #cppname: HOM_ChopNode::isLocked
    Returns whether this node's lock flag is on.
    
::`isUnloadFlagSet(self)` -> `bool`:
    #cppname: HOM_ChopNode::isUnloadFlagSet

    Returns whether the node's unload flag is on.

::`sampleRange(self)` -> `(start, end)`:
    #cppname: HOM_ChopNode::sampleRange

    Return a 2-tuple containing the start and end values of the sample range.
    The number of samples for each track in this node is `start-end+1`. Note
    that samples start from 0, not 1.

::`sampleRate(self)` -> `double`:
    #cppname: HOM_ChopNode::sampleRate

    Returns the sample rate used by this node in number of samples per second.

::`samplesToFrame(self, samples)` -> `double`:
    #cppname: HOM_ChopNode::samplesToFrame

    Converts a value expressed as samples to a value expressed in frames.

::`samplesToTime(self, samples)` -> `double`:
    #cppname: HOM_ChopNode::samplesToTime

    Converts a value expressed as samples to a value expressed in seconds.

::`saveClip(self, file_name)`:
    #cppname: HOM_ChopNode::saveClip
    Saves the node's output clip to a file. The filename extension determines the file format to use.

::`setAudioFlag(self, on)`:
    #cppname: HOM_ChopNode::setAudioFlag

    Turns the node's audio flag on or off.

::`setCurrentFlag(self, on)`:
    #cppname: HOM_ChopNode::setCurrentFlag

    Turns the node's audio flag on or off.

::`setDisplayFlag(self, on)`:
    #cppname: HOM_ChopNode::setDisplayFlag

    Turns the node's display flag to on or off.

::`setExportFlag(self, on)`:
    #cppname: HOM_ChopNode::setExportFlag

    Turns the node's export flag to on or off.

::`setLocked(self, on)`:
    #cppname: HOM_ChopNode::setLocked
    #replaces: Exp:opset
    Turn this node's lock flag on or off.  Locking a node saves its
    current cooked channel data into the node.  If you unlock a locked
    node, it will discard its locked channel data and recook, computing its
    channel data from its inputs and parameters.
    
::`setUnloadFlag(self, on)`:
    #cppname: HOM_ChopNode::setUnloadFlag

    Turns the node's unload flag to on or off.

::`timeToSamples(self, time)` -> `double`:
    #cppname: HOM_ChopNode::timeToSamples

    Converts a value expressed in seconds to a value expressed in samples.

::`tracks(self)` -> tuple of Tracks:
    #cppname: HOM_ChopNode::tracks

    Returns a tuple of all the tracks in this node.

::`track(self, track_name)` -> [Hom:hou.Track] or `None`:
    #cppname: HOM_ChopNode::track
    Return the track of the given name, or `None` if it doesn't exist.

@replaces

- [Cmd:chopls]
- [Cmd:opget]
- [Cmd:opsave]
- [Cmd:opset]
- [Exp:chop]
- [Exp:chope]
- [Exp:chopn]
- [Exp:chopr]
- [Exp:chops]
- [Exp:ic]
- [Exp:ice]
- [Exp:icl]
- [Exp:icmax]
- [Exp:icmin]
- [Exp:icn]
- [Exp:icr]
- [Exp:ics]
- [Exp:oc]
- [Exp:opflag]


