= hou.GeometryViewport =
#type: homclass
#cppname: HOM_GeometryViewport
#group: view


@methods

== Viewport framing ==

In general, _homing_ resets the view direction to the default view, while _framing_ keeps the current view direction and just moves the viewpoint.

::`home(self)`:
    #cppname: HOM_GeometryViewport::home
    
    Moves/tumbles the viewport to the default view.

::`homeAll(self)`:
    #cppname: HOM_GeometryViewport::homeAll
    
    Moves/tumbles the view to show all geometry/objects (including templated geometry). See also [homeNonTemplated()|#homeNonTemplated].

::`homeSelected(self)`:
    #cppname: HOM_GeometryViewport::homeSelected

    Moves/tumbles the view to show the selected geometry/objects.

::`homeGrid(self)`:
    #cppname: HOM_GeometryViewport::homeGrid

    Homes the viewport on the grid.

::`homeNonTemplated(self)`:
    #cppname: HOM_GeometryViewport::homeNonTemplated

    Moves/tumbles the view to show all _non-templated_ geometry.

::`frameAll(self)`:
    #cppname: HOM_GeometryViewport::frameAll

    Moves the view to show all geometry/objects. See also [frameNonTemplates()|#frameNonTemplated].

::`frameBoundingBox(self, bbox)`:
    #cppname: HOM_GeometryViewport::frameBoundingBox

    Moves the view to show an arbitrary area in the scene.

    `bbox`:
        A [Hom:hou.BoundingBox] representing the volume of space to focus on.

::`frameSelected(self)`:
    #cppname: HOM_GeometryViewport::frameSelected

    Moves the view to show the selected geometry/objects.

::`frameGrid(self)`:
    #cppname: HOM_GeometryViewport::frameGrid

    Frames the view on the grid.

::`frameNonTemplated(self)`:
    #cppname: HOM_GeometryViewport::frameNonTemplated

    Moves the view to show all _non-templated_ geometry.


== Viewpoint and cameras ==

* Unlike some other 3D packages, in Houdini the view is not always linked to an actual Camera object. The _may_ be "locked" to a camera (so changing the view tumbles/moves the camera), or it may be a "free" ("No camera") view not tied to a camera, or it may be _temporarily_ looking through a camera (or light), but the view is not locked to the camera (so changing the view will not affect the camera). The user interface for these settings is the camera menu in the top right corner of each viewport, and the [Icon:VIEW/display_lock_camera] Lock Camera button on the view toolbar.

    Most of the methods in this section are not affected by the difference. For example, if the view is "free", the [defaultCamera()|#defaultCamera] method will return an object that manipulates just the view, but if the view is locked to a camera, it will return an object that manipulates the linked camera.

* You can tell if the view is currently looking through a camera/light if the result of [camera()|#camera] is not `None`. This does not tell you whether the view is locked to the camera or not.

* The following talks about the camera representing the "viewpoint" as a shorthand, however the viewport camera stores many settings besides the viewpoint position and direction, including pivot, aspect ratio, clipping planes, and so on.

::`viewTransform(self)` -> [Hom:hou.Matrix4]:
    #cppname: HOM_GeometryViewport::viewTransform

    Returns the transform matrix of the view. To set the viewpoint programmatically, use [defaultCamera()|#defaultCamera] to get a [Hom:hou.ViewportCamera] object and manipulate that.

::`viewPivot(self)` -> [Hom:hou.Vector3]:
    #cppname: HOM_GeometryViewport::viewPivot

    Returns a [Hom:hou.Vector3] representing the view pivot as a point in world space.

::`resolutionInPixels(self)` -> `2-tuple of int`:
    #cppname: HOM_GeometryViewport::resolutionInPixels
    Returns the resolution of the viewport in pixels, as (width, height). 

::`camera(self)` -> [Hom:hou.ObjNode] or `None`:
    #cppname: HOM_GeometryViewportSettings::camera

    If the viewport is currently *looking through* a camera or light (not necessarily locked to it), this returns an object representing the camera/light's node. Returns `None` if the viewport is not looking through a camera/light.

::`saveViewToCamera(self, camera_node)`:
    #cppname: HOM_GeometryViewport::saveViewToCamera

    Copies the viewpoint transform of the current view onto the transformation parameters of a camera or light node.

    `camera_node`:
        A [Hom:hou.ObjNode] object representing the node to save the view to.

::`setCamera(self, camera_node)`:
    #cppname: HOM_GeometryViewport::setCamera

    Copies the viewport transform from the transformation parameters of a camera or light onto the current view. This is the same as choosing a camera/light from the __Look through__ submenu in the viewport's Camera menu.

    `camera_node`:
        A [Hom:hou.ObjNode] object representing the node to save the view from.

::`defaultCamera(self)` -> [Hom:hou.GeometryViewportCamera]:
    #cppname: HOM_GeometryViewport::defaultCamera

    Returns an object representing the viewport's viewpoint. The returned object is "live" in that changing its settings will immediately change the view

    If a camera/ight is locked to the view, changing the settings of the `GeometryViewportCamera` will change the camera/light node's parameters as well.

    Instead of a live object, you can get a "disconnected" version of the viewpoint using [Hom:hou.GeometryViewportCamera#stash]. This is a useful way to remember a certain viewpoint in code for later. You can restore a "stashed" camera using [setDefaultCamera()|#setDefaultCamera].

    {{{
    #!python
    # Remember the current view
    cam = viewport.defaultCamera()
    saved = cam.stash()
    
    # Change the view somehow
    
    # Restore the original view
    viewport.setDefaultCamera(saved)
    }}}
    
::`setDefaultCamera(self, stashed_cam)`:
    #cppname: HOM_GeometryViewport::setDefaultCamera

    Takes a [Hom:hou.GeometryViewportCamera] and copies its values into this viewport.
  
    Set the current camera settings of the viewport to the settings stored in `cam_setting`. If the viewport is looking through a camera and the view is not locked to the camera, it will be switched to "No camera".  If the view is locked to the camera, the camera object will be updated instead.
 
::`useDefaultCamera(self)`:
    #cppname: HOM_GeometryViewport::useDefaultCamera
    
    Set the viewport camera to "No camera" and stop looking through a camera object (or light).

   
::`isCameraLockedToView(self)` -> `bool`:
    #cppname: HOM_GeometryViewport::isCameraLockedToView
    
    Query to see if the camera is locked to the view. This returns the state of the camera lock only; this can be enabled without viewing through a camera.


::`lockCameraToView(self)`:
    #cppname: HOM_GeometryViewport::lockCameraToView
    
    Set the viewport camera lock. When True, any changes to the view will affect the camera object being viewed though. When False, the camera will become disconnected from the viewport and revert to the default viewport camera when the user tumbles the view. 
    It is possible to enable this without the viewport looking through a camera, though view changes will not affect any objects until the user sets the viewport to look through a camera or light. 


::`draw(self)`:
    #cppname: HOM_GeometryViewport::draw

    Request that the viewport redraw. Multiple `draw()` calls within the same script will be merged into a single call.


== Settings ==

::`isOpen(self)`:
    #cppname: HOM_GeometryViewport::isOpen
    #status: ni

::`name(self)` -> `str`:
    #cppname: HOM_GeometryViewport::name

    Query of the name of the viewport (`persp1`, `top1`, etc).

::`changeName(self, str)`:
    #cppname: HOM_GeometryViewport::changeName

    Set the name of the viewport. 

::`settings(self)` -> [Hom:hou.GeometryViewportSettings]:
    #cppname: HOM_GeometryViewport::settings

    Set the name of the viewport. Setting the name does not affect its type, so naming a perspective view `front` will be confusing. This is best used in conjunction with `changeType()`. 

::`type(self)` -> [Hom:hou.geometryViewportType] enum value:
    #cppname: HOM_GeometryViewport::type

    Query the viewport type (UV, 3D, top, left, etc).
 
::`changeType(self, [Hom:hou.geometryViewportType])`:
    #cppname: HOM_GeometryViewport::changeType

    Set the viewport type ([Hom:hou.geometryViewportType]).   This method
    first attempts to restore a stashed view for the new viewport type, but
    failing that, will home the viewport.

::`usesConstructionPlane(self)` -> `bool`
    #cppname: HOM_GeometryViewport::usesConstructionPlane

    Returns whether this viewport uses the construction plane when it is on.

 
 
== Selection ==

::`queryNodeAtPixel(self, x, y)` -> [Hom:hou.ObjNode], [Hom:hou.SopNode], or `None`:
    #cppname: HOM_GeometryViewport::queryNodeAtPixel

    Return the node draw at the specified pixel in the viewport, or `None` if
    there is nothing there.  The type of node returned depends on the level of
    the viewer.

::`queryPrimAtPixel(self, node, x, y)` -> [Hom:hou.Prim] or `None`:
    #cppname: HOM_GeometryViewport::queryPrimAtPixel

    Return the primitive drawn at the specified pixel in the viewport, or
    `None` if there is nothing there.  The primitive returned will be a
    subclass of [Hom:hou.Prim].

    The parameter node is used to restrict the query to geometry within a
    particular node. If node is None, then the query is unrestricted.

::`queryInspectedGeometry(self)` -> [Hom:hou.Geometry] or `None`:
    #cppname: HOM_GeometryViewport::queryInspectedGeometry

    Return the geometry currently being inspected in the viewport, or `None`
    when nothing is being inspected or when called outside of an inspect
    script.

::`queryInspectedPrim(self)` -> [Hom:hou.Prim] or `None`:
    #cppname: HOM_GeometryViewport::queryInspectedPrim

    Return the primitive currently being inspected in the viewport, or `None`
    when nothing is being inspected or when called outside of an inspect
    script.  The primitive returned will be a subclass of [Hom:hou.Prim].

::`mapToScreen(self, position)` -> [Hom:hou.Vector2]:
    #cppname: HOM_GeometryViewport::mapToScreen

    Convert world coordinates to viewport coordinates.

    `position`:
        A [Hom:hou.Vector3] containing a world space position.

::`mapToWorld(self, x, y)` -> tuple of ([Hom:hou.Vector3], [Hom:hou.Vector3]):
    #cppname: HOM_GeometryViewport::mapToWorld

    Convert viewport coordinates to world coordinates. Returns a ray (direction
    vector and an origin point).

::`mapFromMouseChop(self, x, y)` -> tuple of (int, int):
    #cppname: HOM_GeometryViewport::mapFromMouseChop

    Convert from the Mouse CHOP's X and Y screen values (which range from `-1`
    to `1`) to viewport coordinates, where `(0,0)` is the bottom left corner of
    the viewport.

== Callbacks ==

::`addEventCallback(self, callback)`:
	#cppname: HOM_GeometryViewport::addEventCallback
	Register a Python callback to be called whenever a viewport event occurs. The event types are defined in [Hom:hou.geometryViewportEvent].

	'callback':

	Any callable Python object that expects keyworded arguments specific to an event type. This callback can be used for any geometry viewport event type. 	

	Arguments for [Hom:hou.geometryViewportEvent.CameraSwitched]:
	* event_type: This viewport event.
	* desktop: The desktop object holding the scene viewer.
	* viewer: The scene viewer object holding the viewport.
	* viewport: The viewport object that triggered the event.

	{{{
	#!python
	import hou

	def myViewportCB(**kwargs):
		event_type=kwargs['event_type']
		desktop=kwargs['desktop']
		viewer=kwargs['viewer']
		viewport=kwargs['viewport']

		print "\nmyViewportCB=",myViewportCB
		print "event type=",event_type
		print "desktop=",desktop
		print "viewer=",viewer
		print "viewport=",viewport

		cam = viewport.camera()
		print "camera=%s\n\n"%(cam.name())

	curSceneViewer = [item for item in hou.ui.curDesktop().currentPaneTabs() if item.type() == hou.paneTabType.SceneViewer][0]
	curSceneViewer.curViewport().addEventCallback(myViewportCB)
	}}}

::`clearEventCallbacks(self)`:
    #cppname: HOM_GeometryViewport::clearEventCallbacks
    Remove all Python callbacks that have been registered with
    [Hom:hou.GeometryViewport#addEventCallback].

::`removeEventCallback(self,callback)`:
    #cppname: HOM_GeometryViewport::removeEventCallback
    Remove a specific Python callback that have been registered with
    [Hom:hou.GeometryViewport#addEventCallback].

::`eventCallbacks(self)` -> `tuple` of callbacks:
    #cppname: HOM_GeometryViewport::eventCallbacks
    Return a tuple of all the Python callbacks that have been registered with
    [Hom:hou.GeometryViewport#addEventCallback].

@replaces

- [Cmd:viewcamera]
- [Cmd:viewhome]
- [Cmd:viewwrite]

