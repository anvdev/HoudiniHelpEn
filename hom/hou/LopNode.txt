= hou.LopNode =
#type: homclass
#cppname: HOM_LopNode
#superclass: hou.Node
#group: nodes

"""Represents a lighting node."""

@methods

::`bypass(self, on)`:
    #cppname: HOM_LopNode::bypass

    Turns this node's bypass flag on or off, making this node have no effect.

::`displayNode(self)` -> Node:
    #cppname: HOM_LopNode::displayNode

    If this is a subnet TOP, return the TOP node inside the subnet with its
    display flag on. Otherwise, return None.

::`isBypassed(self)` -> `bool`:
    #cppname: HOM_LopNode::isBypassed

    Returns whether this node's bypass flag is on.

::`isDisplayFlagSet(self)` -> `bool`:
    #cppname: HOM_LopNode::isDisplayFlagSet

    Returns whether this node's display flag is on.

::`setDisplayFlag(self, on)`:
    #cppname: HOM_LopNode::setDisplayFlag

    Turn this node's display flag on or off.

::`isDebugFlagSet(self)` -> `bool`:
    #cppname: HOM_LopNode::isDebugFlagSet

    Returns True if the node's debug flag is turned on.  Returns False
    otherwise.

::`setDebugFlag(self, on)`:
    #cppname: HOM_LopNode::setDebugFlag

    Turns the node's debug flag on or off. The debug flag on a LOP node is
    used to force the node to create its own USD Layer and apply its edits
    in that new layer. This makes it easier to track which scene graph
    modifications were made by which LOP node. Setting this flag will also
    affect the performance of the LOP Network since composition of the USD
    stage takes longer if there are more layers.

    Raises [Hom:hou.PermissionError] if the node is unwritable.

::`activeLayer(self)` -> `pxr.Sdf.Layer`:
    #cppname: HOM_LopNode::activeLayer

    Returns a pxr.Sdf.Layer object representing the USD layer that has been
    modified by this node.

::`editableLayer(self)` -> `pxr.Sdf.Layer`:
    #cppname: HOM_LopNode::editableLayer

    Returns a pxr.Sdf.Layer object with permission to edit that represents
    the active layer in a Python LOP.

::`stage(self, apply_network_overrides=True)` -> `pxr.Usd.Stage`:
    #cppname: HOM_LopNode::stage

    Returns a pxr.Usd.Stage object representing the USD stage output from
    this node. Set `apply_network_overrides` to `True` to return a stage with
    its session layer set with any temporary activation or visibility settings
    configured in the scene graph tree. Set it to `False` to return the stage
    with an empty session layer.

::`editableStage(self)` -> `pxr.Usd.Stage`:
    #cppname: HOM_LopNode::editableStage

    Returns a pxr.Usd.Stage object with permission to edit that represents
    the USD stage input to a Python LOP.

::`lastModifiedPrims(self)` -> `tuple` of `str`:
    #cppname: HOM_LopNode::lastModifiedPrims

    Returns the paths of the USD primitives modified by this node.

::`inputPrims(self, inputidx)` -> `tuple` of `str`:
    #cppname: HOM_LopNode::inputPrims

    Returns the paths of the USD primitives modified by the specified input of
    this node. This method is roughly equivalent to:
    {{{
    #!python
    lopnode.inputs()[inputidx].lastModifiedPrims()
    }}}

::`setLastModifiedPrims(self, primpaths)`:
    #cppname: HOM_LopNode::setLastModifiedPrims

    When used in a Python based LOP node, this method sets the value that
    will be returned by subsequent calls to `lastModifiedPrims`. The
    `primpaths` parameter must be a tuple or list of strings.

::`sourceLayer(self, layerindex)` -> `pxr.Sdf.Layer`:
    #cppname: HOM_LopNode::sourceLayer

    Return a pxr.Sdf.Layer object representing the specific requested USD
    layer that is used to build the stage that is the output of this node.

::`sourceLayerCount(self)` -> `int`:
    #cppname: HOM_LopNode::sourceLayerCount

    Returns the number of source layers that are used to build the stage at
    the output of this node. The result from this method will be one greater
    than the maximum value that can be passed to the `sourceLayer` method.

::`network(self)` -> [Hom:hou.LopNode]:
    #cppname: HOM_LopNode::network

    Return the LOP Network that contains this LOP Node. If this node is a LOP
    Network itself, this node will be returned. The LOP Network returned by
    this method is the one that is accessed using any of the methods that
    start with `network` or `setNetwork`.

::`networkSessionEditor(self, output_index = 0, layer_index = 0)` -> [Hom:hou.LopSessionEditor]:
    #cppname: HOM_LopNode::networkSessionEditor

    Return a [Hom:hou.LopSessionEditor] object that allows editing of the
    current session-only modifications which should be applied to any scene
    being viewed in a Scene Graph Tree pane or a Scene Viewer pane.

    The `output_index` controls which output of this LOP node will be used to
    author the stage presented through the [Hom:hou.LopSessionEditor#stage]
    method. The `layer_index` parameter controls which specific session
    sublayer is to be modified.

::`setNetworkSelection(self, selection, layerid = None, currentprim = None)`:
    #cppname: HOM_LopNode::setNetworkSelection

    Accepts a tuple of strings holding the scene graph locations which should
    become the selection in the LOP Network parent of this LOP node. This
    selection will be reflected in the Scene Graph Tree pane and the LOP
    viewport.

    The optional `layerid` parameter can be a string which is the layer
    identifier of a specific layer that should be displayed in the Scene Graph
    Details pane. Similarly the `currentprim` string can be supplied to have
    the Scene Graph Details pane show the information for a primitive at a
    specific path. The `currentprim` is usually in the selection list, but
    it doesn't need to be. Passing `None` for `layerid` or `currentprim`
    leave these values on the LOP Network unchanged.

::`networkSelection(self)` -> `tuple` of `str`:
    #cppname: HOM_LopNode::networkSelection

    Return a tuple of strings representing all the scene graph locations
    currently selected in the LOP Network parent of this LOP node. This is
    the same selection that will be showing in the Scene Graph Tree pane and
    the LOP viewport.

::`networkSelectionLayerId(self)` -> `str`:
    #cppname: HOM_LopNode::networkSelectionLayerId

    Return a string with the layer identifier of the specific USD layer that
    should be displayed in the Scene Graph Details pane. Set this value with
    the [Hom:hou.LopNode.setNetworkSelection] method.

::`networkSelectionCurrentPrim(self)` -> `str`:
    #cppname: HOM_LopNode::networkSelectionCurrentPrim

    Return a string with the path to the scene graph primitive that should be
    displayed in the Scene Graph Details pane. Set this value with
    the [Hom:hou.LopNode.setNetworkSelection] method.

::`networkSelectionRules(self)` -> `dict` of `str` to [Hom:hou.LopSelectionRule]:
    #cppname: HOM_LopNode::networkSelectionRules

    Return a dictionary mapping string names to [Hom:hou.LopSelectionRule]
    objects that match the selection rules stored on the LOP Network that owns
    this LOP node.

::`networkClearSelectionRules(self)`:
    #cppname: HOM_LopNode::networkClearSelectionRules

    Deletes all selection rules stored on the LOP Network that owns this LOP
    node.

::`networkSetSelectionRule(self, name, rule)`:
    #cppname: HOM_LopNode::networkSetSelectionRule

    Stores a named selection rule on the LOP Network that owns this LOP node.
    The `rule` parameter must be a [Hom:hou.LopSelectionRule] or `None`. Use
    `None` to remove a single named rule from the LOP Network.

    The selection rule `name` can be a slash-separated path, in which case the
    selection rule will appear in the Scene Graph Tree pane as part of a
    nested hierarchy. This in no way affects the operation of the rule,
    serving only as a way of organizing sets of rules.

