= hou.LopNode =
#type: homclass
#cppname: HOM_LopNode
#superclass: hou.Node
#group: nodes

"""Represents a lighting node."""

@methods

::`bypass(self, on)`:
    #cppname: HOM_LopNode::bypass

    Turns this node's bypass flag on or off, making this node have no effect.

::`displayNode(self)` -> Node:
    #cppname: HOM_LopNode::displayNode

    If this is a subnet LOP, return the LOP node inside the subnet with its
    display flag on. Otherwise, return None.

::`isBypassed(self)` -> `bool`:
    #cppname: HOM_LopNode::isBypassed

    Returns whether this node's bypass flag is on.

::`isDisplayFlagSet(self)` -> `bool`:
    #cppname: HOM_LopNode::isDisplayFlagSet

    Returns whether this node's display flag is on.

::`setDisplayFlag(self, on)`:
    #cppname: HOM_LopNode::setDisplayFlag

    Turn this node's display flag on or off.

::`isDebugFlagSet(self)` -> `bool`:
    #cppname: HOM_LopNode::isDebugFlagSet

    Returns True if the node's debug flag is turned on.  Returns False
    otherwise.

::`setDebugFlag(self, on)`:
    #cppname: HOM_LopNode::setDebugFlag

    Turns the node's debug flag on or off. The debug flag on a LOP node is
    used to force the node to create its own USD Layer and apply its edits
    in that new layer. This makes it easier to track which scene graph
    modifications were made by which LOP node. Setting this flag will also
    affect the performance of the LOP Network since composition of the USD
    stage takes longer if there are more layers.

    Raises [Hom:hou.PermissionError] if the node is unwritable.

::`activeLayer(self)` -> `pxr.Sdf.Layer`:
    #cppname: HOM_LopNode::activeLayer

    Returns a pxr.Sdf.Layer object representing the USD layer that has been
    modified by this node.

::`editableLayer(self)` -> `pxr.Sdf.Layer`:
    #cppname: HOM_LopNode::editableLayer

    Returns a pxr.Sdf.Layer object with permission to edit that represents
    the active layer in a Python LOP.

::`stage(self, apply_network_overrides=True)` -> `pxr.Usd.Stage`:
    #cppname: HOM_LopNode::stage

    Returns a pxr.Usd.Stage object representing the USD stage output from
    this node. Set `apply_network_overrides` to `True` to return a stage with
    its session layer set with any temporary activation or visibility settings
    configured in the scene graph tree. Set it to `False` to return the stage
    with an empty session layer.

::`editableStage(self)` -> `pxr.Usd.Stage`:
    #cppname: HOM_LopNode::editableStage

    Returns a pxr.Usd.Stage object with permission to edit that represents
    the USD stage input to a Python LOP.

::`loadMasks(self)` -> [Hom:hou.LopViewportLoadMasks]:
    #cppname: HOM_LopNode::loadMasks

    Returns the load masking configuration cooked into the stage at this
    LOP node. This object controls stage population masking and layer muting.
    These masks can be set using the Load Masks LOP. These load masks will
    affect the primitives available on the stage when cooking this node or
    nodes below it.

::`lastModifiedPrims(self)` -> `tuple` of `str`:
    #cppname: HOM_LopNode::lastModifiedPrims

    Returns the paths of the USD primitives modified by this node.

::`inputPrims(self, inputidx)` -> `tuple` of `str`:
    #cppname: HOM_LopNode::inputPrims

    Returns the paths of the USD primitives modified by the specified input of
    this node. This method is roughly equivalent to:
    {{{
    #!python
    lopnode.inputs()[inputidx].lastModifiedPrims()
    }}}

::`setLastModifiedPrims(self, primpaths)`:
    #cppname: HOM_LopNode::setLastModifiedPrims

    When used in a Python based LOP node, this method sets the value that
    will be returned by subsequent calls to `lastModifiedPrims`. The
    `primpaths` parameter must be a tuple or list of strings.

::`sourceLayer(self, layerindex)` -> `pxr.Sdf.Layer`:
    #cppname: HOM_LopNode::sourceLayer

    Return a pxr.Sdf.Layer object representing the specific requested USD
    layer that is used to build the stage that is the output of this node.

::`sourceLayerCount(self)` -> `int`:
    #cppname: HOM_LopNode::sourceLayerCount

    Returns the number of source layers that are used to build the stage at
    the output of this node. The result from this method will be one greater
    than the maximum value that can be passed to the `sourceLayer` method.

::`network(self)` -> [Hom:hou.LopNetwork]:
    #cppname: HOM_LopNode::network

    Return the LOP Network that contains this LOP Node.

