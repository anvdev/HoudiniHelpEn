= hou.IntParmTemplate =
#type: homclass
#cppname: HOM_IntParmTemplate
#superclass: hou.ParmTemplate
#group: parmtemplates

"""Describes a parameter tuple containing integer values."""

Note that integer parameters may also be menu parameters.  Integer parameters
with menus are conceptually the same as parameters derived from [Hom:hou.MenuParmTemplate].

@methods

::`__init__(self, name, label, num_components, default_value=(), min=0, max=10, min_is_strict=False, max_is_strict=False, naming_scheme=hou.parmNamingScheme.XYZW, menu_items=(), menu_labels=(), icon_names=(), item_generator_script=None, item_generator_script_language=None, menu_type=hou.menuType.Normal, disable_when=None, is_hidden=False, is_label_hidden=False, join_with_next=False, help=None, script_callback=None, script_callback_language=hou.scriptLanguage.Hscript, tags={}, default_expression=(), default_expression_language=())`:
    #cppname: HOM_IntParmTemplate::HOM_IntParmTemplate
    Construct a new IntParmTemplate.

    name:
	See [Hom:hou.ParmTemplate#name] for more information.
    label:
	See [Hom:hou.ParmTemplate#label] for more information.
    num_components:
	See [Hom:hou.ParmTemplate#numComponents] for more information.
    default_value:
	See the [defaultValue|Hom:hou.IntParmTemplate#defaultValue] method
	for more information.
    min:
	See the [minValue|Hom:hou.IntParmTemplate#minValue] method
	for more information.
    max:
	See the [maxValue|Hom:hou.IntParmTemplate#maxValue] method
	for more information.
    min_is_strict:
	See the [minIsStrict|Hom:hou.IntParmTemplate#minIsStrict] method
	for more information.
    max_is_strict:
	See the [maxIsStrict|Hom:hou.IntParmTemplate#maxIsStrict] method
	for more information.
    look:
	See [Hom:hou.ParmTemplate#look] for more information.
    naming_scheme:
	See [Hom:hou.ParmTemplate#namingScheme] for more information.
    menu_items:
	See the [menuItems|Hom:hou.IntParmTemplate#menuItems] method
	for more information.  Note that `num_components` must be `1` if
	menu items are supplied.
    menu_labels:
	See the [menuLabels|Hom:hou.IntParmTemplate#menuLabels] method
	for more information.

	If this parameter is not given, it defaults to the value of
	the `menu_items` parameter.
    icon_names:
	See the [iconNames|Hom:hou.IntParmTemplate#iconNames] method
	for more information.
	
	If this parameter is an empty tuple, the menu will not contain icons.
    item_generator_script:
	See the
	[itemGeneratorScript|Hom:hou.IntParmTemplate#itemGeneratorScript]
	method for more information.  Note that `num_components` must be `1` if
	a script is given.
    item_generator_script_language:
	See the
	[itemGeneratorScriptLanguage|Hom:hou.IntParmTemplate#itemGeneratorScriptLanguage]
	method for more information.  If this parameter is `None` it defaults
	to [hou.scriptLanguage.Python|Hom:hou.scriptLanguage].
    menu_type:
	See the [menuType|Hom:hou.IntParmTemplate#menuType] method for more
	information.
    disable_when:
	See [Hom:hou.ParmTemplate#disableWhen] for more information.
    is_hidden:
	See [Hom:hou.ParmTemplate#isHidden] for more information.
    is_label_hidden:
	See [Hom:hou.ParmTemplate#isLabelHidden] for more information.
    join_with_next:
	See [Hom:hou.ParmTemplate#joinsWithNext] for more information.
    help:
	See [Hom:hou.ParmTemplate#help] for more information.
    script_callback:
	See [Hom:hou.ParmTemplate#scriptCallback] for more information.
    script_callback_language:
	See [Hom:hou.ParmTemplate#scriptCallbackLanguage] for more information.
    tags:
	See [Hom:hou.ParmTemplate#tags] for more information.
    default_expression:
	See the [defaultExpression|Hom:hou.IntParmTemplate#defaultExpression]
	method for more information.
    default_expression_language:
	See the [defaultExpressionLanguage|Hom:hou.IntParmTemplate#defaultExpressionLanguage] method for more information.

::`defaultValue(self)` -> tuple of `int`:
    #cppname: HOM_IntParmTemplate::defaultValue
    Return the default value for new parameter instances.

    For example, suppose this parm template is named "divisions", the naming
    scheme is XYZW, it has 3 components, and the default value is (10, 20, 30).
    The corresponding parm tuple instance on a node would be named "divisions"
    and would contain parameters "divisionsx", "divisionsy", and "divisionsz".
    When the node is created, "divisionsx" would be 10, "divisionsy" would be
    20, and "divisionsz" would be 30.

::`setDefaultValue(self, default_value)`:
    #cppname: HOM_IntParmTemplate::setDefaultValue
    Set the default value for new parameter instances to a sequence of ints.

    See the `defaultValue` method for more information.  Note that if the
    number of ints in the sequence is different from the number of components
    in the parm template, any extra values will be discarded and any missing
    values will become zeros.

::`defaultExpression(self)` -> tuple of strings:
    #cppname: HOM_IntParmTemplate::defaultExpression
    Return the default expression for new parameter instances.

    The default expression takes precedence over the default value.
    If a component has no default expression (i.e. an empty string),
    then the default value is used for new parameter instances.

    Note that the default expression language is needed
    to interpret the meaning of the default expression.

    For example, suppose this parm template is named "divisions", 
    the naming scheme is XYZW, it has 3 components, the default value 
    is (10, 20, 30), the default expression is ("$F", "hou.frame()", "") 
    and the default expression language is (`hou.scriptLanguage.Hscript`,
    `hou.scriptLanguage.Python`, `hou.scriptLanguage.Hscript`).
    Then the corresponding parm tuple instance on a node would be named 
    "divisions" and would contain parameters "divisionsx", "divisionsy", 
    "divisionsz".  When the node is created,
    "divisionsx" would have a default Hscript expression of "$F", 
    "divisionsy" would have a default Python expression of "hou.frame()", 
    and "divisionsz" would have a default value of 30.

::`setDefaultExpression(self, default_expression)`:
    #cppname: HOM_IntParmTemplate::setDefaultExpression
    Set the default expression for new parameter instances to a sequence 
    of strings.

    See the [Hom:hou.IntParmTemplate#defaultExpression] method 
    for more information.  Note that if the number of strings in the sequence 
    is different from the number of components in the parm template, 
    any extra values will be discarded and any missing
    expressions will become the empty string.

::`defaultExpressionLanguage(self)` -> tuple of [Hom:hou.scriptLanguage]:
    #cppname: HOM_IntParmTemplate::defaultExpressionLanguage
    Return the default expression language for new parameter instances.

    The default expression language only applies if the default expression
    is set.  If the default expression of a component is not set,
    then the expression language is set to [Hom:hou.scriptLanguage#Hscript].

::`setDefaultExpressionLanguage(self, default_expression_language)`:
    #cppname: HOM_IntParmTemplate::setDefaultExpressionLanguage
    Set the default expression language for new parameter instances 
    to a sequence of [Hom:hou.scriptLanguage] values.

    See the `defaultExpressionLanguage` method for more information.  
    Note that if the number of [Hom:hou.scriptLanguage] values in the sequence 
    is different from the number of components in the parm template, 
    any extra values will be discarded and any missing expression languages 
    will become [Hom:hou.scriptLanguage#Hscript].

::`minValue(self)` -> `int`:
    #cppname: HOM_IntParmTemplate::minValue
    Return the minimum value of the parameter.

    See also the [minIsStrict|Hom:hou.IntParmTemplate#minIsStrict] method.

::`setMinValue(self, min_value)`:
    #cppname: HOM_IntParmTemplate::setMinValue
    Set the minimum value of the parameter.

    See the `minValue` method for more information.

::`maxValue(self)` -> `int`:
    #cppname: HOM_IntParmTemplate::maxValue
    Return the minimum value of the parameter.

    See also the [minIsStrict|Hom:hou.IntParmTemplate#maxIsStrict] method.

::`setMaxValue(self, max_value)`:
    #cppname: HOM_IntParmTemplate::setMaxValue
    Set the maximum value of the parameter.

    See the `maxValue` method for more information.

::`minIsStrict(self)` -> `bool`:
    #cppname: HOM_IntParmTemplate::minIsStrict
    Returns whether the minimum value is strictly enforced.

    If a minimum value is not strictly enforced, the slider will not let you
    change the value below the minimum, but you can set the value to be lower
    than the minimum by typing it in, changing it via [Hom:hou.Parm#setValue],
    or using the ladder handle.
    
    If it is strictly enforced and you try to change it below the minimum value
    using any mechanism, Houdini will set it to the minimum value.

    See also the [minValue|Hom:hou.IntParmTemplate#minValue] method.

::`setMinIsStrict(self, on)`:
    #cppname: HOM_IntParmTemplate::setMinIsStrict
    Set whether the minimum value is strictly enforced.

    See the `minIsStrict` method for more information.

::`maxIsStrict(self)` -> `bool`:
    #cppname: HOM_IntParmTemplate::maxIsStrict
    Return whether the maximum value is strictly enforced.

    See the [minIsStrict|Hom:hou.IntParmTemplate#minIsStrict] method for
    more information.

::`setMaxIsStrict(self, on)`:
    #cppname: HOM_IntParmTemplate::setMaxIsStrict
    Set whether the maximum value is strictly enforced.

    See the `maxIsStrict` method for more information.

::`menuItems(self)` -> `tuple` of `str`:
    #cppname: HOM_IntParmTemplate::menuItems
    Return the tuple of internal menu names.  If this integer does not use a
    menu, returns an empty tuple.

    These internal menu names are not displayed in the UI, but they can be
    passed to [Hom:hou.Parm#set].

::`setMenuItems(self, menu_items)`:
    #cppname: HOM_IntParmTemplate::setMenuItems
    Set the internal menu names to the given sequence of strings.

    See the [menuItems|Hom:hou.IntParmTemplate#menuItems] method for more
    information.

    If the new number of menu items is less than the old number, the menu
    labels will be shortened and the default value will be modified if it is
    out of range.

::`menuLabels(self)` -> `tuple` of `str`:
    #cppname: HOM_IntParmTemplate::menuLabels
    Return the tuple of menu labels displayed in the UI.  These labels are
    used when this parm template uses a menu.

::`menuLabels(self)` -> `tuple` of `str`:
    #cppname: HOM_IntParmTemplate::menuLabels
    Return the tuple of menu labels displayed in the UI.

::`iconNames(self)` -> `tuple` of `str`:
    #cppname: HOM_IntParmTemplate::iconNames
    Return the tuple of icons corresponding to the menu items.
    If there are no icons, returns a tuple of empty strings.

    These icons are used when this parm template uses a menu.

::`setIconNames(self, icon_names)`:
    #cppname: HOM_IntParmTemplate::setIconNames
    Set the icon names to the given sequence of strings.

::`itemGeneratorScript(self)` -> `str`:
    #cppname: HOM_IntParmTemplate::itemGeneratorScript
    Return the script used to generate menu items, or an empty string if
    there is no such script.

    This script is used when this parm template uses a menu.

    Note that if the item generator script language is
    [hou.scriptLanguage.Python|Hom:hou.scriptLanguage], this script may be
    either a single-line Python expression or a multi-line body of a Python
    function.

::`setItemGeneratorScript(self, item_generator_script)`:
    #cppname: HOM_IntParmTemplate::setItemGeneratorScript
    Set the script used to generate menu items.

    See the `itemGeneratorScript` method for more information.

::`itemGeneratorScriptLanguage(self)` -> [Hom:hou.scriptLanguage] enum value:
    #cppname: HOM_IntParmTemplate::itemGeneratorScript
    Return the script used to generate menu items, or an empty string if
    there is no such script.

::`setItemGeneratorScriptLanguage(self, language)`:
    #cppname: HOM_IntParmTemplate::setItemGeneratorScriptLanguage
    Set the script language used to generate menu items to a
    [Hom:hou.scriptLanguage] enum value.

    See the `itemGeneratorScriptLanguage` method for more information.

::`menuType(self)` -> [Hom:hou.menuType] enum value:
    #cppname: HOM_IntParmTemplate::menuType
    Return the type of menu.  See [Hom:hou.menuType] for more information.

::`setMenuType(self, menu_type)`:
    #cppname: HOM_IntParmTemplate::setMenuType
    Set the type of menu to a [Hom:hou.menuType] enum value.

    See the `menuType` method for more information.

::`menuUseToken(self)` -> `bool`:
    #cppname: HOM_IntParmTemplate::menuUseToken
    Return whether the parameter is set to the token value instead of
    the index.

    See also the `setMenuUseToken` method.

::`setMenuUseToken(self, on)`:
    #cppname: HOM_IntParmTemplate::setMenuUseToken
    Set whether the parameter is set to the token value instead of
    the index.

    See also the `menuUseToken` method.
