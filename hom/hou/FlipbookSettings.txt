= hou.FlipbookSettings =
#type: homclass
#cppname: HOM_FlipbookSettings
#group: view

"""A collection of options for the viewport flipbook dialog."""

The viewport flipbook has a set of options beyond the Display Options provided
by the viewport itself. This object contains all these settings.

* Use [Hom:hou.SceneViewer#flipbookSettings] to get this object representing the current flipbook settings for the viewer. Changing the options on this object changes the settings for future interactive flipbooks generated from the viewer.

* You can also pass the settings object directly to [Hom:hou.SceneViewer#flipbook] to generate a flipbook using the current settings.

* To generate a flipbook using custom settings, first use [Hom:hou.SceneViewer#flipbookSettings] to get the current settings, and call [Hom:hou.FlipbookSettings#stash] to create a copy (so changing the options won't affect the viewer's interactive options). Then modify the settings and pass the object to [Hom:hou.SceneViewer#flipbook].

    {{{
    #!python
    # Copy the viewer's current flipbook settings
    flipbook_options = scene.flipbookSettings().stash()

    # Change the settings however you need
    # (for example, set the frame range and output filename)
    flipbook_options.frameRange( (frame, frame) )
    flipbook_options.output(filename)

    # Generate the flipbook using the modified settings
    scene.flipbook(scene.curViewport(), flip_options)
    }}}


@methods

== Copying ==

::`stash(self)` -> `hou.FlipbookSettings`:
    #cppname: HOM_FlipbookSettings::stash
    
    Return a new copy of this FlipbookSettings object. Changes to this new
    object will not update the flipbook dialog, but can be passed to
    `hou.SceneViewer.flipbook()` as the settings to use.

::`copy(self, from_settings)`:
    #cppname: HOM_FlipbookSettings::copy
    
    Copy all settings in `from_settings` into this object.


== File settings ==

::`outputToMPlay(self, out_mplay)`:
    #cppname: HOM_FlipbookSettings::outputToMPlay
    
    Send images to an interactive MPlay sesion.

::`outputToMPlay(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::outputToMPlay
    
    Query if images are being sent to an interactive MPlay sesion.
    

::`output(self, out_name)`:
    #cppname: HOM_FlipbookSettings::output
    
    Set the filename sequence to render directly to files (for example, `"flip$F4.png"`). This can be used in conjunction with `outputToMPlay` to render simulataneously to MPlay and a file sequence.

::`output(self)` -> `str`:
    #cppname: HOM_FlipbookSettings::output
    
    The current output destination for flipbooking.

::`audioFilename(self)` -> `str`:
    #cppname: HOM_FlipbookSettings::audioFilename
    
    Set the pathname of the audio file to use in the flipbook.

::`audioFilename(self, audio_file)`:
    #cppname: HOM_FlipbookSettings::audioFilename
    
    The current audio file used by the flipbook.


== Resolution settings ==

::`useResolution(self, use_res)`:
    #cppname: HOM_FlipbookSettings::useResolution
    
    When on, use the resolution defined in the flipbook dialog for output
    images. This can be further scaled by the `outputZoom`. When off, the
    current size of the viewport is used.

::`useResolution(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::useResolution
    
    Query if the resolution is defined by the flipbook dialog (`True`) or
    by the current size of the viewport (`False`).

::`resolution(self, image_resolution)`:
    #cppname: HOM_FlipbookSettings::resolution
    
    Set the resolution of images to render. `image_resolution` must be a tuple
    of 2 ints, width and height, and each must be greater than one.

::`resolution(self)` -> tuple of `int`:
    #cppname: HOM_FlipbookSettings::resolution
    
    Returns a 2-tuple of ints representing the width and height of the 
    flipbook dialog image output resolution. This is not used unless
    `useResolution` is enabled.

::`cropOutMaskOverlay(self, crop_mask)`:
    #cppname: HOM_FlipbookSettings::cropOutMaskOverlay
    
    When enabled, the camera area is cropped out. This is only needed if the
    viewport resolution doesn't match the aspect ratio of the camera.

::`cropOutMaskOverlay(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::cropOutMaskOverlay
    
    Query if the resulting image will be cropped to the camera area.


== Frame settings ==

::`frameRange(self, range)`:
    #cppname: HOM_FlipbookSettings::frameRange
    
    Set the frame range of the flipbook. `range` is a tuple of 2 ints containing
    the start and end frame.

::`frameRange(self)` -> tuple of `double`:
    #cppname: HOM_FlipbookSettings::frameRange
    
    The current frame range of the flipbook, as a tuple of 2 ints (start, end).

::`frameIncrement(self, increment)`:
    #cppname: HOM_FlipbookSettings::frameIncrement
    
    Set the frame increment of the flipbook (normally 1). 

::`frameIncrement(self)` -> `int`:
    #cppname: HOM_FlipbookSettings::frameIncrement
    
    The current frame increment of the flipbook.

::`appendFramesToCurrent(self, enable)`:
    #cppname: HOM_FlipbookSettings::appendFramesToCurrent
    
    When enabled, new frames are appended to the existing flipbook instead of
    overwriting the image with the corresponding frame.

::`appendFramesToCurrent(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::appendFramesToCurrent
    
    The current state of the flipbook append mode, either Append (True) or
    Overwrite (False). 

::`scopeChannelKeyframesOnly(self, enable)`:
    #cppname: HOM_FlipbookSettings::scopeChannelKeyframesOnly
    
    When enabled, only frames with scoped keyframes are rendered.

::`scopeChannelKeyframesOnly(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::scopeChannelKeyframesOnly
    
    The current state of scoped keyframe mode.

::`audioFrameStart(self, start)`:
    #cppname: HOM_FlipbookSettings::audioFrameStart
    
    Set the start frame for the audio file. Together with `audioTimeOffset`,
    this is used to synchronize the images with the audio. `audioTimeOffset`
    seconds will be synchronized with `audioFrameStart` frames. 

::`audioFrameStart(self)` -> `double`:
    #cppname: HOM_FlipbookSettings::audioFrameStart
    
    The frame where the audio will be playing `audioTimeOffset` seconds.

::`audioTimeOffset(self, time)`:
    #cppname: HOM_FlipbookSettings::audioTimeOffset
    
    Sets the time offset of the audio file. Together with `audioFrameStart`
    this is used to synchronize the images with the audio. `audioTimeOffset`
    seconds will be synchronized with `audioFrameStart` frames. 

::`audioTimeOffset(self)` -> `double`:
    #cppname: HOM_FlipbookSettings::audioTimeOffset
    
    The audio time that will be playing at `audioFrameStart` frames.

::`leaveFrameAtEnd(self, end)`:
    #cppname: HOM_FlipbookSettings::leaveFrameAtEnd
    
    When enabled, the playbar frame is left at the last frame rendered by the flipbook. When disabled, the frame the playbar was on prior to the flipbook is restored.

::`leaveFrameAtEnd(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::leaveFrameAtEnd
    
    Query if the playbar frame is being left at the last frame (True) or restored to the previous frame (False).
    
::`fromAudioPanel(self, fromaudiopanel)`:
    #cppname: HOM_FlipbookSettings::fromAudioPanel
    
    Set the flipbook setting to use the audio settings from the Audio Panel.
    This overrides audioTimeOffset, audioFrameStart and audioFile.

::`fromAudioPanel(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::fromAudioPanel
    
    When enabled, the flipbook gets it's audio settings from the Audio Panel.

== Visibility settings ==

::`visibleObjects(self, visible)`:
    #cppname: HOM_FlipbookSettings::visibleObjects
    
    Set the visibility list for objects. Only those objects matching the
    list will be rendererd. Wildcards are accepted (eg. "/obj/geo*").

::`visibleObjects(self)` -> `str`:
    #cppname: HOM_FlipbookSettings::visibleObjects
    
    The current visibility list for objects to be rendered.

::`visibleTypes(self, flipbookObjectType)`:
    #cppname: HOM_FlipbookSettings::visibleTypes
    
    Filter visible objects by their object type.

    Visible:
       Show all visible object types as set in the __Visibility__ menu.

    GeoOnly:
       Show only geometry objects.

    GeoExcluded:
       Show all visible object types except geometry objects.

    AllObject:
       Show all object types, ignoring the visible object types in the __Visibility__ menu.


::`visibleTypes(self)` -> `hou.flipbookObjectType`:
    #cppname: HOM_FlipbookSettings::visibleTypes
    
    The current visible object types.

    
== Look settings ==

::`beautyPassOnly(self, enable)`:
    #cppname: HOM_FlipbookSettings::beautyPassOnly
    
    Allows everything in the viewport to be rendered (False), or just the 
    user geometry (True). When the beauty pass is rendered, a 16b linear 
    image is produced without any handles, grids, guides, and decorations. 
    Otherwise, ab 8b, 2.2 gamma image is produced of the entire contents of
    the viewport.
    
::`beautyPassOnly(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::beautyPassOnly
    
    The current state of the beauty pass render flag.

::`renderAllViewports(self, all_views)`:
    #cppname: HOM_FlipbookSettings::renderAllViewports
    
    Render all visible viewports (True), or only the currently selected one.

::`renderAllViewports(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::renderAllViewports
    
    Render all visible viewports (True), or only the currently selected one.
    
::`backgroundImage(self, image_file)`:
    #cppname: HOM_FlipbookSettings::backgroundImage
    
    Set the pathname of the background image or images.

::`backgroundImage(self)` -> `str`:
    #cppname: HOM_FlipbookSettings::backgroundImage
    
    The pathname of the background image or images.

::`overrideGamma(self, override)`:
    #cppname: HOM_FlipbookSettings::overrideGamma
    
    When true, explicitly apply a gamma of `gamma` to the resulting images.
    This is normally not needed since the gamma can be specified in the 
    viewport.

::`overrideGamma(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::overrideGamma
    
    The current state of the gamma override.    

::`gamma(self, gamma)`:
    #cppname: HOM_FlipbookSettings::gamma
    
    The gamma value to be applied to the resulting flipbook images, if
    `overrideGamma` is True.

::`gamma(self)` -> `double`:
    #cppname: HOM_FlipbookSettings::gamma
    
    The current gamma value.

::`overrideLUT(self, override)`:
    #cppname: HOM_FlipbookSettings::overrideLUT
    
    When true, explicitly apply a LUT (lookup table) to the resulting images.
    This is normally not needed since the LUT can be specified in the viewport.

::`overrideLUT(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::overrideLUT
    
    The current state of the LUT override. 

::`LUT(self, lut_file)`:
    #cppname: HOM_FlipbookSettings::LUT
    
    Sets the filename of the LUT applied to the resulting images, if 
    `overrideLUT` is enabled.

::`LUT(self)` -> `str`:
    #cppname: HOM_FlipbookSettings::LUT
    
    The current LUT used for flipbooking.

::`antialias(self, flipbookAntialias)`:
    #cppname: HOM_FlipbookSettings::antialias
    
    Sets the antialiasing level of the flipbook:
    - `hou.flipbookAntialias.UseViewportSetting`: Use the current viewport setting.
    - `hou.flipbookAntialias.Off`: No antialiasing.
    - `hou.flipbookAntialias.Fast`: Minimal 2-sample antialiasing.
    - `hou.flipbookAntialias.Good`: 4-sample antialiasing.
    - `hou.flipbookAntialias.HighQuality`: 8-sample antialiasing.

::`antialias(self)` -> `hou.flipbookAntialias`:
    #cppname: HOM_FlipbookSettings::antialias
    
    Query the current flipbook antialiasing setting:
    - `hou.flipbookAntialias.UseViewportSetting`: Use the current viewport setting.
    - `hou.flipbookAntialias.Off`: No antialiasing.
    - `hou.flipbookAntialias.Fast`: Minimal 2-sample antialiasing.
    - `hou.flipbookAntialias.Good`: 4-sample antialiasing.
    - `hou.flipbookAntialias.HighQuality`: 8-sample antialiasing.


== MPlay settings ==

::`sessionLabel(self, label)`:
    #cppname: HOM_FlipbookSettings::sessionLabel
    
    Sets the session label when flipbooking to MPlay. This can be used to
    route flipbooks to different MPlay sessions. Flipbooks with the same
    label will go to the same MPlay flipbook session.

::`sessionLabel(self)` -> `str`:
    #cppname: HOM_FlipbookSettings::sessionLabel
    
    The current flipbook session label.

::`blockEditing(self, enable)`:
    #cppname: HOM_FlipbookSettings::blockEditing
    
    When enabled, block editing mode is enabled in MPlay. This allows the
    frames to be moved in MPlay and any changes exported back to Houdini.
    `scopChannelKeyframesOnly` must be enabled as well.

::`blockEditing(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::blockEditing
    
    The current state of block editing mode.


== Simulation settings ==

::`initializeSimulations(self, enable)`:
    #cppname: HOM_FlipbookSettings::initializeSimulations
    
    When enabled, all simulations are re-initialized when the flipbook begins.

::`initializeSimulations(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::initializeSimulations
    
    The current state of simulation initialization. `True` indicates that 
    simulations will be reset, and `False` indicates that any cached results
    will be used.


== Motion blur settings ==

::`useMotionBlur(self, enable)`:
    #cppname: HOM_FlipbookSettings::useMotionBlur
    
    Turn on motion blur. Motion blur blends multiple subframes together to
    produce the blurring effect. Flipbook generation will be slower because
    of this.

::`useMotionBlur(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::useMotionBlur
    
    Query if motion blur is enabled.

::`motionBlurSegments(self, frames)`:
    #cppname: HOM_FlipbookSettings::motionBlurSegments
    
    Set the number of subframes to be used when doing motion blur. More 
    subframes produces better results, but with additional rendering time.

::`motionBlurSegments(self)` -> `int`:
    #cppname: HOM_FlipbookSettings::motionBlurSegments
    
    Query the number of subframes currently used for motion blur.
    
::`motionBlurFrameRange(self, flipbookMotionBlurBias)`:
    #cppname: HOM_FlipbookSettings::motionBlurFrameRange
    
    Set how the motion blur subframe window is chosen:
    - `hou.flipbookMotionBlurBias.Centered`: Subframe range is centered around the currently rendering frame.
    - `hou.flipbookMotionBlurBias.Forward`: Subframe range starts at the currently rendering frame.
    - `hou.flipbookMotionBlurBias.Previous`: Subframe range ends at the currently rendering frame.

::`motionBlurFrameRange(self)` -> `hou.flipbookMotionBlurBias`:
    #cppname: HOM_FlipbookSettings::motionBlurFrameRange
    
    Query the subframe range for motion blur:
    - `hou.flipbookMotionBlurBias.Centered`: Subframe range is centered around the currently rendering frame.
    - `hou.flipbookMotionBlurBias.Forward`: Subframe range starts at the currently rendering frame.
    - `hou.flipbookMotionBlurBias.Previous`: Subframe range ends at the currently rendering frame.


== Camera settings ==

::`shutterFromCamera(self, use_camera)`:
    #cppname: HOM_FlipbookSettings::shutterFromCamera
    
    Set if the shutter is source from the camera (`True`) or from the `shutter`
    setting in the flipbook dialog (`False`).

::`shutterFromCamera(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::shutterFromCamera
    
    Query if the shutter is sourced from the camera or the flipbook dialog.

::`shutter(self, frame_fraction)`:
    #cppname: HOM_FlipbookSettings::shutter
    
    Set the value of the camera shutter for motion blur. 1.0 represents a 
    shutter of a full frame.

::`shutter(self)` -> `double`:
    #cppname: HOM_FlipbookSettings::shutter
    
    Query the current camera shutter for motion blur. 

::`useDepthOfField(self, enable)`:
    #cppname: HOM_FlipbookSettings::useDepthOfField
    
    Turn on depth of field rendering to simulate focus.

::`useDepthOfField(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::useDepthOfField
    
    Query if depth of field rendering is on.

::`depthOfFieldFromCamera(self, use_camera)`:
    #cppname: HOM_FlipbookSettings::depthOfFieldFromCamera
    
    Set if the depth of field parameters (`focusDistance`, `aperture`, `fStop`)
    are sourced from a camera (`True`) or the flipbook dialog settings 
    (`False`).

::`depthOfFieldFromCamera(self)` -> `bool`:
    #cppname: HOM_FlipbookSettings::depthOfFieldFromCamera
    
    Query if the depth of field parameters (`focusDistance`, `aperture`, 
    `fStop`) are sourced from a camera (`True`) or the flipbook dialog settings
     (`False`).

::`depthOfFieldQuality(self, num_images)`:
    #cppname: HOM_FlipbookSettings::depthOfFieldQuality
    
    Set the number of camera positions to use to simulate depth of field.
    Higher values produces a better looking blur, but also increases rendering
    time.

::`depthOfFieldQuality(self)` -> `double`:
    #cppname: HOM_FlipbookSettings::depthOfFieldQuality
    
    Return the number of images rendered to simulate depth of field blur.

::`focusDistance(self, distance)`:
    #cppname: HOM_FlipbookSettings::focusDistance
    
    Set the default focus distance, the distance from the camera where objects 
    are perfectly in focus. This is not used if `depthOfFieldFromCamera`
    is `True`.

::`focusDistance(self)` -> `double`:
    #cppname: HOM_FlipbookSettings::focusDistance
    
    Query the focus distance setting, the distance from the camera where 
    objects are perfectly in focus.

::`aperture(self, aperture)`:
    #cppname: HOM_FlipbookSettings::aperture
    
    Set the default aperture. This is not used if `depthOfFieldFromCamera`
    is `True`.

::`aperture(self)` -> `double`:
    #cppname: HOM_FlipbookSettings::aperture
    
    Query the default aperture setting.

::`fStop(self, f_stop)`:
    #cppname: HOM_FlipbookSettings::fStop
    
    Set the default f-stop setting. This is not used if `depthOfFieldFromCamera`
    is `True`.

::`fStop(self)` -> `double`:
    #cppname: HOM_FlipbookSettings::fStop
    
    Query the  f-stop setting.

::`outputZoom(self, zoom)`:
    #cppname: HOM_FlipbookSettings::outputZoom
    
    Set the output zoom level. Valid settings are 100, 75, 50, and 25.

::`outputZoom(self)` -> `int`:
    #cppname: HOM_FlipbookSettings::outputZoom
    
    Query the output zoom level. Valid settings are 100, 75, 50, and 25.

