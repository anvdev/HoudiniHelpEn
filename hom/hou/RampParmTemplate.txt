= hou.RampParmTemplate =
#type: homclass
#cppname: HOM_RampParmTemplate
#superclass: hou.ParmTemplate
#group: parmtemplates

"""Parameter template for a ramp parameter."""

@methods

::`__init__(self, name, label, ramp_parm_type, default_value=2, default_basis=None, show_controls=True, color_type=None, disable_when=None, is_hidden=False, help=None, script_callback=None, script_callback_language=hou.scriptLanguage.Hscript, tags={}, default_expression_language=hou.scriptLanguage.Hscript)`:
    #cppname: HOM_RampParmTemplate::HOM_RampParmTemplate
    Construct a new RampParmTemplate.

    name:
	See [Hom:hou.ParmTemplate#name] for more information.
    label:
	See [Hom:hou.ParmTemplate#label] for more information.
    ramp_parm_type:
	See the [parmType|Hom:hou.RampParmTemplate#parmType] method
	for more information.
    default_value:
	The default number of ramp keys in new ramp parameter instances.  See
	the [defaultValue|Hom:hou.RampParmTemplate#defaultValue] method for
	more information.
    default_basis:
	See the [defaultBasis|Hom:hou.RampParmTemplate#defaultBasis] method
	for more information.  If this parameter is not specified it defaults
	to [hou.rampBasis.Linear|Hom:hou.rampBasis].

	The following example uses a Catmull-Rom basis:
	{{{
	#!python
	r = hou.RampParmTemplate(
	    "myRamp", "My Ramp", hou.rampParmType.Color,
	    default_basis=hou.rampBasis.CatmullRom)
	}}}

    show_controls:
	See the [showsControls|Hom:hou.RampParmTemplate#showsControls] method
	for more information.
    color_type:
	See the [colorType|Hom:hou.RampParmTemplate#colorType] method
	for more information.  If this parameter is not specified it defaults
	to [hou.colorType.RGB|Hom:hou.colorType].

	The following example uses an L*a*b* color space:
	
	{{{
	#!python
	r = hou.RampParmTemplate(
	    "myRamp", "My Ramp", hou.rampParmType.Color,
	    color_type=hou.colorType.LAB)
	}}}
    disable_when:
	See [Hom:hou.ParmTemplate#disableWhen] for more information.
    is_hidden:
	See [Hom:hou.ParmTemplate#isHidden] for more information.
    help:
	See [Hom:hou.ParmTemplate#help] for more information.
    script_callback:
	See [Hom:hou.ParmTemplate#scriptCallback] for more information.
    script_callback_language:
	See [Hom:hou.ParmTemplate#scriptCallbackLanguage] for more information.
    tags:
	See [Hom:hou.ParmTemplate#tags] for more information.
    default_expression:
	See the [defaultExpression|Hom:hou.RampParmTemplate#defaultExpression]
	method for more information.
    default_expression_language:
	See the [defaultExpressionLanguage|Hom:hou.RampParmTemplate#defaultExpressionLanguage] method for more information.

::`defaultValue(self)` -> `int`:
    #cppname: HOM_RampParmTemplate::defaultValue
    Return this is the default number of ramp keys in new ramp parameter
    instances.

::`setDefaultValue(self, default_value)`:
    #cppname: HOM_RampParmTemplate::setDefaultValue
    Set the default number of ramp keys to be used in new ramp parameter
    instances.

::`defaultExpression(self)` -> `string`:
    #cppname: HOM_RampParmTemplate::defaultExpression
    Return the expression, which when evaluated, returns the number
    of ramp keys to be used in new ramp parameter instances.

    The default expression takes precedence 
    over the default value.  If the default expression is not set 
    (i.e. an empty string), then the default value is used instead.

    Note that the default expression language is needed
    to interpret the meaning of the default expression.

::`setDefaultExpression(self, default_expression)`:
    #cppname: HOM_RampParmTemplate::setDefaultExpression
    Set the default expression, which when evaluated, returns the number
    of ramp keys to be used in new ramp parameter instances.

    If `default_expression` is the empty string,
    then the default expression is unset.

::`defaultExpressionLanguage(self)` -> tuple of [Hom:hou.scriptLanguage]:
    #cppname: HOM_RampParmTemplate::defaultExpressionLanguage
    Return the default expression language.

    The default expression language only applies if the default expression
    is set.  If the default expression is not set,
    then the expression language is set to [Hom:hou.scriptLanguage#Hscript].

::`setDefaultExpressionLanguage(self, default_expression_language)`:
    #cppname: HOM_RampParmTemplate::setDefaultExpressionLanguage
    Set the default expression language.

    See the `defaultExpressionLanguage` method for more information.  

::`showsControls(self)` -> `bool`:
    #cppname: HOM_RampParmTemplate::showsControls
    Return whether new instances of this ramp parameter have the controls
    expanded by default.  The user may later expand or collapse the ramp
    controls on the parameter.

::`setShowsControls(self, on)`:
    #cppname: HOM_RampParmTemplate::setShowsControls
    Set whether new instances of this ramp parameter have the controls
    expanded by default.

::`parmType(self)` -> [Hom:hou.rampParmType] enum value:
    #cppname: HOM_RampParmTemplate::rampParmType
    Returns the type of this ramp parameter template.  Ramps may evaluate to
    either a float or a color.

::`setParmType(self, ramp_parm_type)`:
    #cppname: HOM_RampParmTemplate::setParmType
    Set the type of this ramp to a [Hom:hou.rampParmType] enum value.

::`defaultBasis(self)` -> [Hom:hou.rampBasis] enum value:
    #cppname: HOM_RampParmTemplate::defaultBasis
    The basis function used to control how values are interpolated between
    ramp keys.

    See [Hom:hou.rampBasis] for more information.

::`setDefaultBasis(self, ramp_basis)`:
    #cppname: HOM_RampParmTemplate::setDefaultBasis
    Set the basis function used to control how values are interpolated between
    ramp keys.  `ramp_basis` is a [Hom:hou.rampBasis] enum value.

::`colorType(self)` -> [Hom:hou.colorType] enum value:
    #cppname: HOM_RampParmTemplate::colorType
    The color space in which to interpolate color ramp keys.

    See [Hom:hou.colorType] for more information on color spaces.

::`setColorType(self, color_type)`:
    #cppname: HOM_RampParmTemplate::setColorType
    Set the color space in which to interpolate color ramp keys to a
    [Hom:hou.colorType] enum value.

