= hou.LopNetwork =
#type: homclass
#cppname: HOM_LopNetwork
#superclass: hou.Node
#group: nodes

"""Represents a lighting node."""

@methods

::`displayNode(self)` -> Node:
    #cppname: HOM_LopNetwork::displayNode

    Return the LOP node inside this network with its display flag on.
    Otherwise, return None.

::`isDebugFlagSet(self)` -> `bool`:
    #cppname: HOM_LopNetwork::isDebugFlagSet

    Returns True if the node's debug flag is turned on.  Returns False
    otherwise.

::`setDebugFlag(self, on)`:
    #cppname: HOM_LopNetwork::setDebugFlag

    Turns the node's debug flag on or off. The debug flag on a LOP node is
    used to force the node to create its own USD Layer and apply its edits
    in that new layer. This makes it easier to track which scene graph
    modifications were made by which LOP node. Setting this flag will also
    affect the performance of the LOP Network since composition of the USD
    stage takes longer if there are more layers.

    Raises [Hom:hou.PermissionError] if the node is unwritable.

::`viewportOverrides(self, lop, output_index = 0, layer_index = 0)` -> [Hom:hou.LopViewportOverrides]:
    #cppname: HOM_LopNetwork::viewportOverrides

    Return a [Hom:hou.LopViewportOverrides] object that allows editing of the
    current session-only modifications which should be applied to any scene
    being viewed in a Scene Graph Tree pane or a Scene Viewer pane.

    The `lop` must be a [Hom:hou.LopNode] object. The cooked stage from this
    LOP Node is used to perform the requested edit operations in the returned
    [Hom:hou.LopViewportOverrides] object. The `output_index` controls which
    output of this LOP node will be used to author the stage presented through
    the [Hom:hou.LopViewportOverrides#stage] method. The `layer_index`
    parameter controls which specific session sublayer is to be modified.

::`namedViewportOverrides(self)` -> `tuple` of `str`:
    #cppname: HOM_LopNetwork::namedViewportOverrides

    Returns a list of the named session overrides saved on the LOP Network.
    The names returned from this method can be passed to the
    `loadNamedViewportOverrides` method to load a particular set of
    overrides saved with the `saveNamedViewportOverrides` method.

::`loadNamedViewportOverrides(self, name)`:
    #cppname: HOM_LopNetwork::loadNamedViewportOverrides

    Loads the session overrides saved under the specified name on the LOP
    Network. This set of overrides will be applied to any viewport pointed
    at this LOP Network. These named session override sets can be created
    with the `saveNamedViewportOverrides` method.

::`saveNamedViewportOverrides(self, name)`:
    #cppname: HOM_LopNetwork::saveNamedViewportOverrides

    Saves the current set of session overrides to the LOP Network under the
    specified name. This set of overrides will be saved to the hip file, and
    can be restored with the `loadNamedViewportOverrides` method.

::`viewportLoadMasks(self)` -> [Hom:hou.LopViewportLoadMasks]:
    #cppname: HOM_LopNetwork::viewportLoadMasks

    Returns the load masking configuration for the viewport currently set on
    the LOP Network. This controls payload loading, stage population masking,
    and layer muting on any viewport pointed at this LOP Network.

::`setViewportLoadMasks(self, payload_config)`:
    #cppname: HOM_LopNetwork::setViewportLoadMasks

    Sets a new load masking configuration on the LOP Network.

::`namedViewportLoadMasks(self)` -> `tuple` of `str`:
    #cppname: HOM_LopNetwork::namedViewportLoadMasks

    Returns a list of the named load masking configurations saved on the LOP
    Network. The names returned from this method can be passed to the
    `loadNamedViewportLoadMasks` method to load a particular load masking
    configuration saved with the `saveNamedViewportLoadMasks` method.

::`loadNamedViewportLoadMasks(self, name)` -> [Hom:hou.LopViewportLoadMasks]:
    #cppname: HOM_LopNetwork::loadNamedViewportLoadMasks

    Returns the load masking configuration saved under the specified name on
    the LOP Network. Raises a [Hom:hou.OperationFailed] exception if there
    is no load masking configuration stored under the specified name.

::`saveNamedViewportLoadMasks(self, name)`:
    #cppname: HOM_LopNetwork::saveNamedViewportLoadMasks

    Saves the supplied load masking configuration to the LOP Network under
    the specified name. This configuration will be saved to the hip file, and
    can be restored with the `loadNamedViewportLoadMasks` method.

::`setSelection(self, selection, layerid = None, currentprim = None)`:
    #cppname: HOM_LopNetwork::setSelection

    Accepts a tuple of strings holding the scene graph locations which should
    become the selection in the LOP Network parent of this LOP node. This
    selection will be reflected in the Scene Graph Tree pane and the LOP
    viewport.

    The optional `layerid` parameter can be a string which is the layer
    identifier of a specific layer that should be displayed in the Scene Graph
    Details pane. Similarly the `currentprim` string can be supplied to have
    the Scene Graph Details pane show the information for a primitive at a
    specific path. The `currentprim` is usually in the selection list, but
    it doesn't need to be. Passing `None` for `layerid` or `currentprim`
    leave these values on the LOP Network unchanged.

::`selection(self)` -> `tuple` of `str`:
    #cppname: HOM_LopNetwork::selection

    Return a tuple of strings representing all the scene graph locations
    currently selected in the LOP Network parent of this LOP node. This is
    the same selection that will be showing in the Scene Graph Tree pane and
    the LOP viewport.

::`selectionLayerId(self)` -> `str`:
    #cppname: HOM_LopNetwork::selectionLayerId

    Return a string with the layer identifier of the specific USD layer that
    should be displayed in the Scene Graph Details pane. Set this value with
    the [Hom:hou.LopNetwork.setSelection] method.

::`selectionCurrentPrim(self)` -> `str`:
    #cppname: HOM_LopNetwork::selectionCurrentPrim

    Return a string with the path to the scene graph primitive that should be
    displayed in the Scene Graph Details pane. Set this value with
    the [Hom:hou.LopNetwork.setSelection] method.

::`selectionRules(self)` -> `dict` of `str` to [Hom:hou.LopSelectionRule]:
    #cppname: HOM_LopNetwork::selectionRules

    Return a dictionary mapping string names to [Hom:hou.LopSelectionRule]
    objects that match the selection rules stored on the LOP Network that owns
    this LOP node.

::`clearSelectionRules(self)`:
    #cppname: HOM_LopNetwork::clearSelectionRules

    Deletes all selection rules stored on the LOP Network that owns this LOP
    node.

::`setSelectionRule(self, name, rule)`:
    #cppname: HOM_LopNetwork::setSelectionRule

    Stores a named selection rule on the LOP Network that owns this LOP node.
    The `rule` parameter must be a [Hom:hou.LopSelectionRule] or `None`. Use
    `None` to remove a single named rule from the LOP Network.

    The selection rule `name` can be a slash-separated path, in which case the
    selection rule will appear in the Scene Graph Tree pane as part of a
    nested hierarchy. This in no way affects the operation of the rule,
    serving only as a way of organizing sets of rules.

