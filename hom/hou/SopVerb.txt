= hou.SopVerb =
#type: homclass
#cppname: HOM_SopVerb
#superclass: hou.Node
#group: geo

"""Represents the code of a surface node."""

@methods

::`execute(self, destgeo, inputgeolist)`:
    #cppname: HOM_SopVerb::execute
    Applies the verb to the giving destination [Hom:hou.Geometry].
    The input list is a list of [Hom:hou.Geometry] corresponding to the
    source node's inputs.  The parameters used in execution are whatever
    was set with the setParms or loadParmsFromNode functions.  The parameters
    are initialized with the node defaults.

    NOTE: Node defaults may change between versions.

::`loadParmsFromNode(self, sopnode)`:
    #cppname: HOM_SopVerb::loadParmsFromNode
    Initializes all the parameters of this verb from the parameters
    of a specific [Hom:hou.SopNode].  Useful for cloning an existing
    node instance's behavior.

::`parms(self)` -> dictionary:
    #cppname: HOM_SopVerb::parms
    Returns a dictionary of parameter name / value pairs currently
    set on this verb.  This will be the complete list understood,
    including defaults.  Multiparms are represented as a sub list of
    dictionaries.

    This uses ParmTuple names, not channel names.

::`setParms(self, parmdictionary)`:
    #cppname: HOM_SopVerb::setParms
    Updates a subset of parmeters on this verb with those specified
    in the dictionary.  Exceptions are raised if attempts are made to
    set non-existent parameters or with incorrect types.

    This uses ParmTuple names, not channel names.  So for a transform
    you would use `xform.setParms({'t':(2,0,0)})` rather than `tx`.

::`minNumInputs(self)` -> integer:
    #cppname: HOM_SopVerb::minNumInputs
    Returns the minimum number of geometry inputs required for this
    verb to compute successfully.
