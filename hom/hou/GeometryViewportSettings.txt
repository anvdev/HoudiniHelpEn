= hou.GeometryViewportSettings =
#type: homclass
#cppname: HOM_GeometryViewportSettings
#group: view


@methods

::`asCode(self)`:
    #cppname: HOM_GeometryViewportSettings::asCode
    #status: ni

::`asXML(self)`:
    #cppname: HOM_GeometryViewportSettings::asXML
    #status: ni

::`loadFromXML(self, xml)`:
    #cppname: HOM_GeometryViewportSettings::loadFromXML
    #status: ni

::`copySettingsFrom(self, viewport_settings)`:
    #cppname: HOM_GeometryViewportSettings::copySettingsFrom
    #status: ni

::`destroy(self)`:
    #cppname: HOM_GeometryViewportSettings::destroy
    #status: ni

== Camera ==

::`setCamera(self, camera_node)`:
    #cppname: HOM_GeometryViewportSettings::setCamera

    Makes the viewport look through the given camera node.

::`camera(self)` -> ObjNode or None:
    #cppname: HOM_GeometryViewportSettings::camera

    Return the camera or light node that the viewport is looking through.
    Return None if the viewport is not looking through a camera or light node.

::`setBoxZoom(self, on)`:
    #cppname: HOM_GeometryViewportSettings::setBoxZoom
    #status: ni

::`boxZoom(self)`:
    #cppname: HOM_GeometryViewportSettings::boxZoom
    #status: ni

::`setPixelAspectRatio(self, ratio)`:
    #cppname: HOM_GeometryViewportSettings::setPixelAspectRatio
    #status: ni

::`pixelAspectRatio(self)`:
    #cppname: HOM_GeometryViewportSettings::pixelAspectRatio
    #status: ni

::`setLastHomeDistance(self, distance)`:
    #cppname: HOM_GeometryViewportSettings::setLastHomeDistance
    #status: ni

::`lastHomeDistance(self)`:
    #cppname: HOM_GeometryViewportSettings::lastHomeDistance
    #status: ni

::`setLastHomeOrthoWidth(self, pixel_width)`:
    #cppname: HOM_GeometryViewportSettings::setLastHomeOrthoWidth
    #status: ni

::`lastHomeOrthoWidth(self)`:
    #cppname: HOM_GeometryViewportSettings::lastHomeOrthoWidth
    #status: ni

::`setLastHomePixelWidth(self, pixel_width)`:
    #cppname: HOM_GeometryViewportSettings::setLastHomePixelWidth
    #status: ni

::`lastHomePixelWidth(self)`:
    #cppname: HOM_GeometryViewportSettings::lastHomePixelWidth
    #status: ni

::`setLastHomeRadius(self, radius)`:
    #cppname: HOM_GeometryViewportSettings::setLastHomeRadius
    #status: ni

::`lastHomeRadius(self)`:
    #cppname: HOM_GeometryViewportSettings::lastHomeRadius
    #status: ni

::`setViewTransform(self, matrix)`:
    #cppname: HOM_GeometryViewportSettings::setViewTransform
    #status: ni

::`viewTransform(self)` -> Matrix:
    #cppname: HOM_GeometryViewportSettings::viewTransform
    #status: ni

::`setWindowHeight(self, height)`:
    #cppname: HOM_GeometryViewportSettings::setWindowHeight
    #status: ni

::`windowHeight(self)`:
    #cppname: HOM_GeometryViewportSettings::windowHeight
    #status: ni

::`setWindowSizeScale(self, scale)`:
    #cppname: HOM_GeometryViewportSettings::setWindowSizeScale
    #status: ni

::`windowSizeScale(self)`:
    #cppname: HOM_GeometryViewportSettings::windowSizeScale
    #status: ni

::`setWindowWidth(self, width)`:
    #cppname: HOM_GeometryViewportSettings::setWindowWidth
    #status: ni

::`windowWidth(self)`:
    #cppname: HOM_GeometryViewportSettings::windowWidth
    #status: ni

::`saveViewToCamera(self, camera_node)`:
    #cppname: HOM_GeometryViewportSettings::saveViewToCamera

    Saves the viewport's current view into the given camera node.  It does this
    by setting the camera's transform parameters to match the viewport's view
    transform matrix.

== Markers ===

::`displaySet(self, display_set)` -> GeometryViewportDisplaySet:
    #cppname: HOM_GeometryViewportSettings::displaySet
    Returns the display set associated with the context 'display_set', which
    contains context-sensitive display options such as __Draw Mode__ and
    __Point Numbers__.

== Guides ==

::`enableGuide(self, hou.viewportGuide, on)`:
    #cppname: HOM_GeometryViewportSettings::enableGuide

    Show or hide the guide specified by `hou.viewportGuide`.

::`guideEnabled(self, hou.viewportGuide)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::guideEnabled
    
    Query if the guide specified by `hou.viewportGuide` is shown (`True`) or hidden (`False`).

::`normalScale(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::vectorScale

    Query the scale applied to the length of normal decorations.

::`setNormalScale(self, normal_scale)`:
    #cppname: HOM_GeometryViewportSettings::setNormalScale

    Set a scale factor for the display of normals to increase or decrease
    their length.

::`vectorScale(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::vectorScale

    Query the scale applied to the length of vector decorations.

::`setVectorScale(self, scale)`:
    #cppname: HOM_GeometryViewportSettings::setVectorScale

    Set the scale applied to vector decorations, to make them longer or 
    shorter.

::`pointMarkerSize(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::pointMarkerSize

    Queries the size of point marker decorations, in pixels.
   
::`setPointMarkerSize(self, point_size)`:
    #cppname: HOM_GeometryViewportSettings::setPointMarkerSize

    Set the size of point marker decorations, in pixels.

::`originGnomonSize(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::originGnomonSize

    Queries the world size of the gnomon axes that appear at the world origin.

::`setOriginGnomonSize(self, size)`:
    #cppname: HOM_GeometryViewportSettings::setOriginGnomonSize

    Sets the world size of the gnomon axes that appear at the world origin.

::`geometryInfo(self)` -> `hou.viewportGeometryInfo`:
    #cppname: HOM_GeometryViewportSettings::geometryInfo

    Queries the current geometry information display setting:
    - `hou.viewportGeometryInfo.Off`: No information displayed.
    - `hou.viewportGeometryInfo.SelectedOnly`: only display information if something is selected.
    - `hou.viewportGeometryInfo.Always`: Always display information.

::`geometryInfo(self, hou.viewportGeometryInfo)`:
    #cppname: HOM_GeometryViewportSettings::geometryInfo

    Queries the current geometry information display setting:
    - `hou.viewportGeometryInfo.Off`: No information displayed.
    - `hou.viewportGeometryInfo.SelectedOnly`: only display information if something is selected.
    - `hou.viewportGeometryInfo.Always`: Always display information.

::`handleHighlight(self)` -> `hou.viewportHandleHighlight`:
    #cppname: HOM_GeometryViewportSettings::handleHighlight

    Queries the size of the handle highlight when the mouse is over a handle part:
    - `hou.viewportHandleHighlight.Off`: Handles do not show highlights.
    - `hou.viewportHandleHighlight.Small`: Handles have a subtle highlight.
    - `hou.viewportHandleHighlight.Normal`: Handles use their default highlight, which is twice the width of the small highlight.

::`handleHighlight(self, hou.viewportHandleHighlight)`:
    #cppname: HOM_GeometryViewportSettings::handleHighlight

    Sets the size of the handle highlight when the mouse is over a handle part:
    - `hou.viewportHandleHighlight.Off`: Handles do not show highlights.
    - `hou.viewportHandleHighlight.Small`: Handles have a subtle highlight.
    - `hou.viewportHandleHighlight.Normal`: Handles use their default highlight, which is twice the width of the small highlight.

::`closureSelection(self)` -> `hou.viewportClosureSelection`:
    #cppname: HOM_GeometryViewportSettings::closureSelection

   Queries the current closure selection display. A Closure selection is shown
   on a primitive when any part of that primitive is selected.

   - `hou.viewportClosureSelection.Hide`: Do not show closure selections.
   - `hou.viewportClosureSelection.HullPrimitives`: Only show closure selections on primitives that have hulls which are disconnected from the tessellated surface or curve (such as a NURBS surface).
   - `hou.viewportClosureSelection.Show`: Show closure selections on all primitive types.

::`closureSelection(self, hou.viewportClosureSelection)`:
    #cppname: HOM_GeometryViewportSettings::closureSelection

   Change the closure selection display setting. A Closure selection is shown
   on a primitive when any part of that primitive is selected.

   - `hou.viewportClosureSelection.Hide`: Do not show closure selections.
   - `hou.viewportClosureSelection.HullPrimitives`: Only show closure selections on primitives that have hulls which are disconnected from the tessellated surface or curve (such as a NURBS surface).
   - `hou.viewportClosureSelection.Show`: Show closure selections on all primitive types.

::`guideFontSize(self)` -> `hou.viewportGuideFont`:
    #cppname: HOM_GeometryViewportSettings::viewportGuideFont

    Query the current size of the font used for text decorations.

    - `hou.viewportGuideFont.Tiny`: Smallest font size available.
    - `hou.viewportGuideFont.Small`: Slightly more compact font than medium.
    - `hou.viewportGuideFont.Medium`: Default font size.
    - `hou.viewportGuideFont.Large`: Large font size suitable for high DPI displays.

::`guideFontSize(self, hou.viewportGuideFont)`:
    #cppname: HOM_GeometryViewportSettings::viewportGuideFont

    Query the current size of the font used for text decorations.

    - `hou.viewportGuideFont.Tiny`: Smallest font size available.
    - `hou.viewportGuideFont.Small`: Slightly more compact font than medium.
    - `hou.viewportGuideFont.Medium`: Default font size.
    - `hou.viewportGuideFont.Large`: Large font size suitable for high DPI displays.

::`offsetVertexMarkers(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::offsetVertexMarkers

    When enabled, vertex markers and normals are inset into the polygon so they can be selected independently when part of a seamless mesh. When disabled, the markers and normals are placed at the actual vertex, potentially overlapping.

::`setOffsetVertexMarkers(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setOffsetVertexMarkers

    When enabled, vertex markers and normals are inset into the polygon so they can be selected independently when part of a seamless mesh. When disabled, the markers and normals are placed at the actual vertex, potentially overlapping.

== Geometry ==

::`levelOfDetail(self, value)`:
    #cppname: HOM_GeometryViewportSettings::levelOfDetail
    
    Sets the level of detail used for tessellating geometry, such as NURBS 
    surfaces and curves, subdivision curves, primitive sphere, tubes, and 
    circles. 1 is the normal setting, 0 is very coarse, 2+ is finer
     tessellation.

::`levelOfDetail(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::levelOfDetail
    
    Query the current level of detail used for tessellating geometry.

::`volumeQuality(self, viewportVolumeQuality)`:
    #cppname: HOM_GeometryViewportSettings::volumeQuality
    
    Set the volume display quality.

    - `hou.viewportVolumeQuality.VeryLow`: Very fast, low quality preview
    - `hou.viewportVolumeQuality.Low`:  Fewer slices than Normal for speed
    - `hou.viewportVolumeQuality.Normal`: Good quality vs. speed setting.
    - `hou.viewportVolumeQuality.High`: Large number of slices with jittering


::`volumeQuality(self)` -> `hou.viewportVolumeQuality`:
    #cppname: HOM_GeometryViewportSettings::volumeQuality
    
    Query the volume display quality.
    
    - `hou.viewportVolumeQuality.VeryLow`: Very fast, low quality preview
    - `hou.viewportVolumeQuality.Low`:  Fewer slices than Normal for speed
    - `hou.viewportVolumeQuality.Normal`: Good quality vs. speed setting.
    - `hou.viewportVolumeQuality.High`: Large number of slices with jittering


::`volumeWireAsPoints(self, as_points)`:
    #cppname: HOM_GeometryViewportSettings::volumeWireAsPoints
    
    Draw volumes as a point field when in wireframe modes if enabled, 
    wireframe bounding box only otherwise.

::`volumeWireAsPoints(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::volumeWireAsPoints
    
    Query if volumes are currently drawn as a point field in wireframe.

::`polygonConvexQuality(self, quality)`:
    #cppname: HOM_GeometryViewportSettings::polygonConvexQuality
    
    Set the polygon convexer quality to high quality (`true`) or fast (`false`). 
    High quality redoes the convexing if the topology or point positions change.
    Fast only redoes the convexing if topology changes.

::`polygonConvexQuality(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::polygonConvexQuality
    
    Query the polygon convexing quality, `true` for high quality and `false`
    for fast convexing.

::`subdivsionLimit(self, limit_in_millions)`:
    #cppname: HOM_GeometryViewportSettings::subdivsionLimit

    Limit the subdivision levels so that no more than `limit_in_millions' polygons are produced by the subdivision. Lower values may be needed for weak graphics hardware.
    

::`subdivsionLimit(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::subdivsionLimit
    
    Returns the current subdivision polygon limit, in millions of polygons.

::`wireWidth(self, width)`:
    #cppname: HOM_GeometryViewportSettings::wireWidth
    
    Set the width of lines drawn for wireframe and wire-over-shaded modes.
    Lines in wireframe modes is limited to the line width range of the graphics
    hardware. Polygon outlines in wire-over-shaded mode can be any width,
    though very thick lines begin to show artifacts near vertices.

::`wireWidth(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::wireWidth
    
    Query the width of lines drawn for wireframe and wire-over-shaded modes.

::`wireBlend(self, blend)`:
    #cppname: HOM_GeometryViewportSettings::wireBlend
    
    Set the blend factor between wires and the surface in wire-over-shaded
    modes. Values close to 0 produce very faint lines, values closer to 1
    produce solid lines. This has no effect in pure wireframe modes.

::`wireBlend(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::wireBlend
    
    Query the blend factor between wires and the surface in wire-over-shaded
    modes. Values close to 0 produce very faint lines, values closer to 1
    produce solid lines.
    

::`interiorWireAlpha(self, alpha)`:
    #cppname: HOM_GeometryViewportSettings::interiorWireAlpha
    
    Set the dimness of the interior wires in a tet mesh. Outer wires are
    drawn normally, inner wires are dimmed. This only affects tet meshes in
    wireframe mode.

::`interiorWireAlpha(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::interiorWireAlpha

    Query the dimness of the interior wires in a tet mesh. Outer wires are
    drawn normally, inner wires are dimmed. This only affects tet meshes in
    wireframe mode.

::`shadeOpenCurves(self, shade)`:
    #cppname: HOM_GeometryViewportSettings::shadeOpenCurves
    
    Globally enable or disable shaded open curves. The object parameter
    __Shade Open Curves in Viewport__ must also be enabled in order for this
    to affect curves in the object. When on, curves are drawn as ribbons with
    their thickness driven by the `width` attribute. Otherwise they are drawn
    as lines.

::`shadeOpenCurves(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::shadeOpenCurves
    
    Query if shaded open curves are enabled or not.

::`selectWireframeAsSolid(self, as_solid)`:
    #cppname: HOM_GeometryViewportSettings::selectWireframeAsSolid
    
    Enable or disable selection of wireframe polygons by their face. When on,
    a wireframe polygon can be selected by clicking on its face even though
    the face not actually drawn. When off, the polygon can only be selected 
    by clicking on or near its edges in wireframe mode.

::`selectWireframeAsSolid(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::selectWireframeAsSolid
    
    Query if selection of wireframe polygons is done by face (`true`) or
    edge (`false`).

::`setWireOverPackedGeo(self, wire_over_packed)`:
    #cppname: HOM_GeometryViewportSettings::setWireOverPackedGeo
    
    Show polygon outlines on meshes in packed geometry when drawing a wire-over-shaded mode. Disabling this hides the outlines on packed geometry, making meshes appear as a single shape, which packed geometry technically is. 

::`wireOverPackedGeo(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::wireOverPackedGeo
    
    Query if polygon outlines are visible on packed geometry when a wire-over-shaded mode is active.

::`particleDisplayType(self, viewportParticleDisplay)`:
    #cppname: HOM_GeometryViewportSettings::particleDisplayType
    
    Set the default particle display.
    - `hou.viewportParticleDisplay.Points`: Constant sized point marker, with the diameter specified by `particlePointSize`. This marker is unaffected by `pscale`. 
    - `hou.viewportParticleDisplay.Pixels`: Single pixel drawn for a particle.
    - `hou.viewportParticleDisplay.Lines`: Streak trail plus marker.
    - `hou.viewportParticleDisplay.Discs`: World-space circle, affected by `pscale` or `discSize`.


::`particleDisplayType(self)` -> `hou.viewportParticleDisplay`:
    #cppname: HOM_GeometryViewportSettings::particleDisplayType
    
    Query the default particle display.
    - `hou.viewportParticleDisplay.Points`: Constant sized point marker, with the diameter specified by `particlePointSize`. This marker is unaffected by `pscale`. 
    - `hou.viewportParticleDisplay.Pixels`: Single pixel drawn for a particle.
    - `hou.viewportParticleDisplay.Lines`: Streak trail plus marker.
    - `hou.viewportParticleDisplay.Discs`: World-space circle, affected by `pscale` or `discSize`.

::`allowParticleSprites(self, sprites)`:
    #cppname: HOM_GeometryViewportSettings::allowParticleSprites
    
    Draw particles as sprites when sprite attributes are detected on the
    particle (`sprite*` or `shop_materialpath`).

::`allowParticleSprites(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::allowParticleSprites
    
    Query if particles are drawn as sprites when sprite attributes are
    detected on the particle (`sprite*` or `shop_materialpath`).

::`particlePointSize(self, size)`:
    #cppname: HOM_GeometryViewportSettings::particlePointSize
    
    Set the point diameter for particles drawn as `Points` or `Lines`. This
    is in screen pixels, not world space units.

::`particlePointSize(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::particlePointSize
    
    Query the point diameter for particles drawn as `Points` or `Lines`.

::`particleDiscSize(self, size)`:
    #cppname: HOM_GeometryViewportSettings::particleDiscSize
    
    Set the disc diameter for particles drawn as `Discs` or `Sprites` if
    the `pscale` attribute does not exist. This is specified in world-space
    units.

::`particleDiscSize(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::particleDiscSize
    
    Query the disc diameter for particles drawn as `Discs` or `Sprites` if
    the `pscale` attribute does not exist. This is specified in world-space
    units.

::`orientDiscToNormal(self, n_orient)`:
    #cppname: HOM_GeometryViewportSettings::orientDiscToNormal
    
    Set if discs and sprites are oriented to the normal (`true`) or not.
    The normal will be orthogonal to the disc (they will face in that
    direction).

::`orientDiscToNormal(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::orientDiscToNormal
    
    Queries if discs and sprites are oriented to the normal (`true`) or not.
    The normal will be orthogonal to the disc (they will face in that
    direction).

::`spriteTextureLimit(self, max_res)`:
    #cppname: HOM_GeometryViewportSettings::spriteTextureLimit
    
    Set the maximum texture resolution for sprites. This is primarily a
    performance vs. quality trade-off option. Larger sprites look better but
    may cause slowdowns for large particle systems.

::`spriteTextureLimit(self)` -> tuple of `int`:
    #cppname: HOM_GeometryViewportSettings::spriteTextureLimit

    Query the maximum texture resolution for sprites. This is primarily a
    performance vs. quality trade-off option. Larger sprites look better but
    may cause slowdowns for large particle systems.

::`pointInstancing(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::pointInstancing
    
    Enable or disable point instancing globally. Point instancing is done
    with the [Instance Object|/nodes/obj/instance]. When enabled, geometry
    will be instanced on the points of the instance object. When disabled,
    the instanced objects' geometry will appear instead.

::`pointInstancing(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::pointInstancing
    
    Query if point instancing is globally enabled.

::`pointInstancingPercent(self, show_instances)`:
    #cppname: HOM_GeometryViewportSettings::pointInstancingPercent
    
    Set the percentage of instances shown in the viewport for point instancing
    (0-100%). Culled instances will be replaced by stand-in geometry,
    specified by `instanceStandInGeometry`.

::`pointInstancingPercent(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::pointInstancingPercent

    Query the percentage of instances shown in the viewport for point
    instancing.

::`pointInstancingLimit(self, millions_of_instances)`:
    #cppname: HOM_GeometryViewportSettings::pointInstancingLimit
    
    Set a limit on the number of polygons that instancing geometry can generate,
    in millions of polygons. Any instancing that produces more polygons than
    this limit will have a certain percentage of instances culled to remain
    below the limit. Culled instances are replaced by the stand-in geometry.
    Setting this limit too high can cause the graphics driver to reset.

::`pointInstancingLimit(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::pointInstancingLimit
    
    Query the current polygon limit for instancing. 

::`instanceStandInGeometry(self, viewportStandInGeometry)`:
    #cppname: HOM_GeometryViewportSettings::instanceStandInGeometry
    
    Set the stand-in geometry for culled instances. This applies to both
    instances culled by the instancing percent and the instancing polygon limit.

    - `hou.viewportStandInGeometry.DisplayOff`: Show nothing for culled instances.
    - `hou.viewportStandInGeometry.LocationMarker`: Show a location marker at the local space origin of each instanced.
    - `hou.viewportStandInGeometry.BoundingBox`: Show the culled instances' bounding boxes.


::`instanceStandInGeometry(self)` -> `hou.viewportStandInGeometry`:
    #cppname: HOM_GeometryViewportSettings::instanceStandInGeometry

    Query the current stand-in geometry for culled instances.    
    
    - `hou.viewportStandInGeometry.DisplayOff`: Show nothing for culled instances.
    - `hou.viewportStandInGeometry.LocationMarker`: Show a location marker at the local space origin of each instanced.
    - `hou.viewportStandInGeometry.BoundingBox`: Show the culled instances' bounding boxes.

::`autoGenerateVertexNormals(self, vertex)`:
    #cppname: HOM_GeometryViewportSettings::autoGenerateVertexNormals
    
    Enable the generation of vertex normals on geometry without normals, instead
    of point normals. This is recommended for geometry with hard edges, such
    as boxes. If disabled, generate point normals instead (somewhat faster).

::`autoGenerateVertexNormals(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::autoGenerateVertexNormals
    
    Query if vertex normals are produced when geometry is missing normals. If
    false, point numbers are produced.

::`vertexNormalCuspAngle(self, angle)`:
    #cppname: HOM_GeometryViewportSettings::vertexNormalCuspAngle
    
    Set the cusp angle for vertex normal generation. Any shared edge between
    polygons will be considered a hard edge if the polygon faces differ by more
    than this angle, otherwise the normals will be smooth over the edge.

::`vertexNormalCuspAngle(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::vertexNormalCuspAngle
    
    Query the cusp angle for vertex normal generation. Any shared edge between
    polygons will be considered a hard edge if the polygon faces differ by more
    than this angle, otherwise the normals will be smooth over the edge.

::`vertexNormalLimit(self, millions_of_polys)`:
    #cppname: HOM_GeometryViewportSettings::vertexNormalLimit
    
    Set the polygon limit for generating vertex normals, in millions of
    polygons. Vertex normals are more expensive to compute than point normals,
    especially for large models. Any model with more polygons than the limit
    will have point normals generated instead of vertex normals.

    To work around this, either raise the limit or use a
    [Normal SOP|/nodes/sop/normal] to generate vertex normals on the geometry.

::`vertexNormalLimit(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::vertexNormalLimit
    
    Query the polygon limit for generating vertex normals, in millions of
    polygons.

== Scene ==

::`setSceneAntialias(self, aalevel)`:
    #cppname: HOM_GeometryViewportSettings::setSceneAntialias

    Sets the viewports full-scene antialiasing level to one of 1, 2, 4, 8, 16,
    32, 64, or 128. This represents the number of samples rendered to produce a 
    higher quality image. Higher numbers produce better antialiasing, but
    this can affect the viewport's rendering performance. Some graphics hardware
    only support a subset of these modes (eg. up to 8 or 32).

::`sceneAntialias(self)`:
    #cppname: HOM_GeometryViewportSettings::sceneAntialias

    Returns the number of samples used to antialias the viewport. Possible 
    values are 1 (no antialiasing), 2, 4 (default for most hardware), 8, 16, 
    32, 64, or 128.
   
::`setHdrRendering(self, hdr)`:
    #cppname: HOM_GeometryViewportSettings::setHdrRendering
    
    Enable High Dynamic Range (HDR) rendering, which uses a 16b FP rendering surface. When off, regular 8b rendering is used.

::`hdrRendering(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::setHdrRendering
    
    Queries if High Dynamic Range (HDR) rendering is enabled.

::`setXrayDrawing(self, global_enable)`:
    #cppname: HOM_GeometryViewportSettings::setXrayDrawing
    
    Globally enable or disable X-ray drawing. Object must have their X-ray flag set in order to render as X-ray. X-ray causes the object to be visible when occluded.

::`xrayDrawing(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::xrayDrawing
    
    Query if X-ray drawing is enabled globally.

::`setXrayQuality(self, quality)`:
    #cppname: HOM_GeometryViewportSettings::setXrayQuality
    
    Enable high-quality X-ray rendering, which draws X-rayed objects as dimmed shaded surfaces when occluded, with up to 8 levels of overlap between X-rayed objects. This looks better but takes longer to render. Regular X-ray rendering displays X-ray objects as wireframe when occluded.

::`xrayQuality(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::xrayQuality
    
    Queries if high quality X-ray rendering is active.

::`setXrayStrength(self, strength)`:
    #cppname: HOM_GeometryViewportSettings::setXrayStrength
    
    Sets the strength of the occluded x-ray objects. Lower values make occluded X-ray objects dimmer.

::`xrayStrength(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::xrayStrength
    
    Query the strength of occluded x-ray objects.

::`setObjectOrigins(self, globel_enable)`:
    #cppname: HOM_GeometryViewportSettings::setObjectOrigins
    
    Globally allow object origins to be displayed. Object origins are enabled by setting the Origin flag on objects.

::`objectOrigins(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::objectOrigins
    
    Query if object origin display is globally enabled.

::`setOnionSkinning(self, global_enable)`:
    #cppname: HOM_GeometryViewportSettings::setOnionSkinning
    
    Globally allow onion skinning to be displayed. Onion skinning is enabled on a per-object basis in the __Misc__ tab of objects. This shows animation as a series of ghosted poses at other frames around the current frame.

::`onionSkinning(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::onionSkinning
    
    Query if onion skinning is globally enabled.

::`setOnionSkinFramesBeforeCount(self, num_frames)`:
    #cppname: HOM_GeometryViewportSettings::setOnionSkinFramesBeforeCount
    
    Set the number of onion skins before the current frame. Their spacing depends on the onion skin frame increment.

::`onionSkinFramesBeforeCount(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::onionSkinFramesBeforeCount
    
    Queries the number of onion skins before the current frame.

::`setOnionSkinFramesBeforeTint(self, tint)`:
    #cppname: HOM_GeometryViewportSettings::setOnionSkinFramesBeforeTint
    
    Tint all onion skins that appear before the current frame with this color.

::`onionSkinFramesBeforeTint(self)` -> tuple of `double`:
    #cppname: HOM_GeometryViewportSettings::onionSkinFramesBeforeTint
    
    Query the tint color of skins that appear before the current frame.

::`setOnionSkinFramesAfterCount(self, num_frames)`:
    #cppname: HOM_GeometryViewportSettings::setOnionSkinFramesAfterCount
    
    Set the number of onion skins after the current frame. Their spacing depends on the onion skin frame increment.

::`onionSkinFramesAfterCount(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::onionSkinFramesAfterCount
    
    Queries the number of onion skins after the current frame.

::`setOnionSkinFramesAfterTint(self, tint)`:
    #cppname: HOM_GeometryViewportSettings::setOnionSkinFramesAfterTint
    
    Tint all onion skins that appear after the current frame with this color.
    

::`onionSkinFramesAfterTint(self)` -> tuple of `double`:
    #cppname: HOM_GeometryViewportSettings::onionSkinFramesAfterTint
    
    Query the tint color of skins that appear after the current frame.
    

::`setOnionSkinFrameIncrement(self, frame_increment)`:
    #cppname: HOM_GeometryViewportSettings::setOnionSkinFrameIncrement
    
    Set the frame increment between onion skins. Using 1 will draw every frame around the current frame (`$F-2 $F-1 $F $F+1 $F+2`, while 5 would step by 5 (`$F-10 $F-5 $F $F+5 $F+10`).

::`onionSkinFrameIncrement(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::onionSkinFrameIncrement
    
    Query the frame increment between onion skins.

::`setOnionSkinOpacity(self, opacity)`:
    #cppname: HOM_GeometryViewportSettings::setOnionSkinOpacity
    
    Set the opacity of the onion skins to make them more or less prominent.

::`onionSkinOpacity(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::onionSkinOpacity
    
    Query the current onion skin opacity.

::`setSceneGamma(self, gamma)`:
    #cppname: HOM_GeometryViewportSettings::setSceneGamma
    
    Set the gamma correction for the scene. This value should match the calibrated gamma of the display device.

::`sceneGamma(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::sceneGamma
    
    Query the scene gamma correction.

::`setUseSceneLUT(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setUseSceneLUT
    
    Enable Lookup Table (LUT) color correction. A valid LUT file must also be present.

::`useSceneLUT(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::useSceneLUT
    
    Query if Lookup Table color correction is enabled. This will return `True` even no LUT file exists.

::`setSceneLUT(self, lut_file)`:
    #cppname: HOM_GeometryViewportSettings::setSceneLUT
    
    Specify a Lookup Table (LUT) file to use for color correction. 

::`sceneLUT(self)` -> `str`:
    #cppname: HOM_GeometryViewportSettings::sceneLUT
    
    Query the current Lookup Table (LUT) file. 
    

::`setBackgroundImageGammaLUT(self, apply_to_bg)`:
    #cppname: HOM_GeometryViewportSettings::setBackgroundImageGammaLUT
    
    Apply gamma and Lookup Table (LUT) color correction to the background image.

::`backgroundImageGammaLUT(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::backgroundImageGammaLUT
    
    Query if color correction is applied to the background image.    

== Viewport ==

::`showsName(self, show)`:
    #cppname: HOM_GeometryViewportSettings::showsName
    
    Display the viewport name and menu in the upper right corner.

::`showName(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showName
    
    Query if the viewport name menu is displayed.

::`showsCameraName(self, show)`:
    #cppname: HOM_GeometryViewportSettings::showsCameraName
    
    Display the camera name and menu in the upper right corner.

::`showCameraName(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showCameraName
    
    Query if the camera name menu is displayed.

::`showsStateStatus(self, show)`:
    #cppname: HOM_GeometryViewportSettings::showsStateStatus
    
    Display any status messages of the current tool. 

::`showBadges(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showBadges
    
    Query if viewport status badges are displayed. Badges are icons which present additional state information. 

::`showsBadges(self, show)`:
    #cppname: HOM_GeometryViewportSettings::showsBadges
    
    Display viewport status badges as icons beside the camera menu, which presents additional state information.

::`showStateStatus(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showStateStatus
    
    Query if the tool status messages are displayed.

::`useAspectRatio(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::useAspectRatio
    
    Enforce a specific aspect ratio for the viewport, which will add bars if the viewport aspect ratio does not match.

::`usingAspectRatio(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::usingAspectRatio
    
    Query if a specific aspect ratio is being enforced.

::`setAspectRatio(self, aspect)`:
    #cppname: HOM_GeometryViewportSettings::setAspectRatio
    
    Set the viewport aspect ratio (width/height).

::`viewportType(self)` -> [Hom:hou.geometryViewportType] enum value:
    #cppname: HOM_GeometryViewportSettings::viewportType

    Query the viewport type (UV, 3D, top, left, etc).

::`aspectRatio(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::aspectRatio
    
    Query the viewport aspect ratio display option. Use `viewAspectRatio()` to query the current viewport aspect ratio. 

::`viewAspectRatio(self, masked)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::viewAspectRatio
    
    Query the actual viewport aspect ratio. If `masked` is `True`, return the aspect ratio of the area inside the camera mask, otherwise return the full viewport aspect ratio.

::`setViewMaskOpacity(self, opacity)`:
    #cppname: HOM_GeometryViewportSettings::setViewMaskOpacity
    
    Set the opacity of the bars used to mask areas out the viewport outside the aspect ratio.

::`viewMaskOpacity(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::viewMaskOpacity
    
    Query the opacity of the bars used to mask areas out the viewport outside the aspect ratio.

::`setStereoMode(self, viewportStereoMode)`:
    #cppname: HOM_GeometryViewportSettings::setStereoMode
    
    Set the stereo display mode when viewing through a stereo camera.

    - `hou.viewportStereoMode.Anaglyph`: 
          Anaglyph display of left/right as red/cyan.
    - `hou.viewportStereoMode.HorizontalInterlace`: 
          Interlace left and right on alternating scanlines. Only useful for 3D monitors which support this.
    - `hou.viewportStereoMode.HorizontalInterlaceReverse`: 
          Interlace left and right on alternating scanlines, swapping which scanlines are used for left and right.
    - `hou.viewportStereoMode.QuadBufferGL`: 
          Use OpenGL quad buffer stereo, generally only available on professional cards. 

::`stereoMode(self)` -> `hou.viewportStereoMode`:
    #cppname: HOM_GeometryViewportSettings::stereoMode
    
    Query the current stereo display mode.

::`setHomeAutoAdjustsClip(self, viewportHomeClipMode)`:
    #cppname: HOM_GeometryViewportSettings::setHomeAutoAdjustsClip
    
    Set which camera clip planes are adjusted when performing a homing operation.
    
    - `hou.viewportHomeClipMode.Neither`: 
          Neither clip plane is adjusted.
    - `hou.viewportHomeClipMode.FarOnly`: 
          Only the far clip plane is adjusted.
    - `hou.viewportHomeClipMode.NearOnly`: 
          Only the near clip plane is adjusted.
    - `hou.viewportHomeClipMode.NearAndFar`: 
          Both clip planes are adjusted.

::`homeAutoAdjustClip(self)` -> `hou.viewportHomeClipMode`:
    #cppname: HOM_GeometryViewportSettings::homeAutoAdjustClip
    
    Queries which camara clip planes are adjusted when performing a homing operation.

::`setClipPlanes(self, clip)`:
    #cppname: HOM_GeometryViewportSettings::setClipPlanes
    
    Set the near and far camera clip planes from a 2-tuple. 

::`clipPlanes(self)` -> tuple of `float`:
    #cppname: HOM_GeometryViewportSettings::clipPlanes
    
    Query the near and far camera clip planes, returning them in a 2-tuple. 
    

::`setMinHomeSize(self, min_size)`:
    #cppname: HOM_GeometryViewportSettings::setMinHomeSize
    
    Set the smallest area that viewport can home to, in world units.

::`minHomeSize(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::minHomeSize
 
    Query the smallest area that viewport can home to, in world units.

::`setUVDisplayAttribute(self, uv)`:
    #cppname: HOM_GeometryViewportSettings::uvDisplayAttribute
    
    Set the UV viewport to display attribute `uv`.

::`uvDisplayAttribute(self)` -> `str`:
    #cppname: HOM_GeometryViewportSettings::uvDisplayAttribute
    
    Return the attribute currently displayed in the  UV viewport.

::`setUVAutoAttribute(self, detect)`:
    #cppname: HOM_GeometryViewportSettings::uvAutoAttribute
    
    Enable (True) or disable the auto-detection of the displayed UV attribute's
    class. UV attributes can be either point or vertex. When enabled, the
    display will switch to the attribute class of the displayed UV attribute.

::`uvAutoAttribute(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::uvAutoAttribute
    
    Return True if the UV viewport is auto-detecting the class of the displayed
    UV attribute. 

::`setUVVertexType(self, is_vertex_uv)`:
    #cppname: HOM_GeometryViewportSettings::uvVertexType
    
    Set the class of the displayed UV attribute to __Point__ or __Vertex__. If
    this does not match the displayed UV attribute's class then nothing will be
    displayed.

::`uvVertexType(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::uvVertexType

    Return the class of the UV attribute, __Point__ or __Vertex__. This returns
    the viewport setting, and not the detected class of the current UV
    attribute. If `uvAutoAttribute` is enabled, the class will be the same as
    the currently displayed attribute, but if it is disabled it may be
    different.

== Effects ==

::`setLighting(self, viewportLighting)`:
    #cppname: HOM_GeometryViewportSettings::setLighting
    
    Set the global lighting mode for all viewports.

    - `hou.viewportLighting.Off`: 
         No lighting, constant shaded.
    - `hou.viewportLighting.Headlight`: 
         Basic lighting from a single directional light defined in the display options.
    - `hou.viewportLighting.Normal`: 
         Good quality lighting from up to 10 basic lights (area lights modeled as point lights, limited environment lights).
    - `hou.viewportLighting.HighQuality`: 
         High quality lighting from an unlimited number of lights including area, geometry, environment and ambient occlusion.
    - `hou.viewportLighting.HighQualityWithShadows`: 
         High quality lighting with shadows.

::`lighting(self)` -> `hou.viewportLighting`:
    #cppname: HOM_GeometryViewportSettings::lighting

    Query the current global lighting mode.    

::`showDiffuse(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::showDiffuse
    
    Enable diffuse contribution of lighting. When disabled, diffuse will not contribute to the final lit color. This can be used to debug lighting.

::`showingDiffuse(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showingDiffuse
    
    Query if diffuse lighting is enabled.

::`showSpecular(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::showSpecular
    
    Enable specular highlights. When disabled, specular will not contribute to the final lit color. This will also disable most reflections. This can be used to debug lighting.
    

::`showingSpecular(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showingSpecular
    
    Query if specular lighting is enabled.    

::`showAmbient(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::showAmbient
    
    Enable ambient lighting. When disabled, all ambient lights will not contribute to the final lit color. This can be used to debug lighting.

::`showingAmbient(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showingAmbient
    
    Query if ambient lighting is enabled.
    

::`showEmission(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::showEmission
    
    Enable emissive lighting. Emission lighting comes from materials on geometry, not lights, so modifying the lights in the scene has no effect on it. This can be used to debug lighting.

::`showingEmission(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showingEmission
    
    Query if emission lighting is enabled.
    

::`setLightSampling(self, num_samples)`:
    #cppname: HOM_GeometryViewportSettings::setLightSampling
    
    Set the number of lighting samples to perform when doing high quality lighting for area and environment lights.

::`lightSampling(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::lightSampling
    
    Query the number of lighting samples.

::`setHeadlightIntensity(self, intensity)`:
    #cppname: HOM_GeometryViewportSettings::setHeadlightIntensity
    
    Set the intensity of the headlight used in __Headlight__ lighting mode.

::`headlightIntensity(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::headlightIntensity
    
    Query the intensity of the headlight.

::`setHeadlightDirection(self, dir)`:
    #cppname: HOM_GeometryViewportSettings::setHeadlightDirection
    
    Set the direction of the headlight used in __Headlight__ lighting mode.
    This is expressed as a direction vector in camera space (the camera looks 
    down -Z). 

::`headlightDirection(self)` -> tuple of `double`:
    #cppname: HOM_GeometryViewportSettings::headlightDirection
    
    Query the vector direction of the headlight.

::`setHeadlightSpecular(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setHeadlightSpecular
    
    Enable specular reflections when in __Headlight__ lighting mode. Turning 
    this off results in purely diffuse lighting. 

::`headlightSpecular(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::headlightSpecular

    Query if specular reflections are generated by the headlight.    
    

::`setHeadlightOcclusion(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setHeadlightOcclusion

    Enables ambient occlusion when in headlight mode. This has no effect if a lighting mode other than headlight is active.
    
::`headlightOcclusion(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::headlightOcclusion

    Query if ambient occlusion is active for headlight mode.
    

::`showMaterials(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::showMaterials

    Enable materials on geometry from SHOPs or VOPs. When disabled, these material assignments are ignored and only the attributes on the geometry will affect shading.
    

::`showingMaterials(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showingMaterials
    
    Query if materials are shown.

::`showGeometryColor(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::showGeometryColor
    
    Enable contribution of the geometry `Cd` attribute to the material. When disabled, this is ignored. `Cd` multiplies both the material diffuse and ambient colors.

::`showingGeometryColor(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::showingGeometryColor
    
    Query if geometry `Cd` contributes to the material. 

::`useTransparency(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::useTransparency
    
    Enable transparency rendering. When transparency is enabled, another pass handles areas of the geometry that have `Alpha` less than one (either due to an `Alpha` attribute or material opacity). When disabled, alpha is ignored and rendered as opaque.

::`usingTransparency(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::usingTransparency
    
    Query if transparency rendering is enabled.

::`setTransparencyQuality(self, viewportTransparency)`:
    #cppname: HOM_GeometryViewportSettings::setTransparencyQuality
    
    Set the quality of the transparency pass performed by the viewport.
    
    - `hou.viewportTransparency.Cutout`: 
         Fast test to render the transparent pixel as opaque (>0) or to discard it (0). This can be used for texture cards such as leaves. This doesn't require an additional pass for transparency.
    - `hou.viewportTransparency.Low`: 
         Render transparent pixels in a separate pass. Only the front-most transparent pixel is rendered.
    - `hou.viewportTransparency.Medium`: 
         Render transparent pixels in an Order-Independent buffer of 8 samples, which is then sorted and composited together to do multi-layer transparency for up to 8 layers of overlapping transparency.
    - `hou.viewportTransparency.High`: 
         Render transparent pixels in an Order-Independent buffer of 16 samples, which is then sorted and composited together to do multi-layer transparency for up to 16 layers of overlapping transparency.


::`transparencyQuality(self)` -> `hou.viewportTransparency`:
    #cppname: HOM_GeometryViewportSettings::transparencyQuality
    
    Query the transparency quality.


::`useDisplacement(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::useDisplacement
    
    Enable displacement mapping for materials that have a displacement map. When disabled, the displacement map is ignored. This can have a significant hit for lower-end GPUs.

::`usingDisplacement(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::usingDisplacement
    
    Query if displacement mapping is allowed.

::`setDisplacementLevel(self, level)`:
    #cppname: HOM_GeometryViewportSettings::setDisplacementLevel
    
    Set the level of detail for displacement mapping. Displacement mapping adaptively subdivides the geometry to provide finer detail. Higher values result in denser subdivision, while lower values produce lighter meshes. The default is 1.0.

::`displacementLevel(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::displacementLevel
    
    Query the level of detail used for displacement mapping.

::`setDefaultMaterialDiffuse(self, tint)`:
    #cppname: HOM_GeometryViewportSettings::setDefaultMaterialDiffuse
    
    Set the diffuse color of the default material (used when no material assignment is present or __Show Materials__ is disabled).

::`defaultMaterialDiffuse(self)` -> `hou.Color`:
    #cppname: HOM_GeometryViewportSettings::defaultMaterialDiffuse
    
    Query the default material's diffuse color.

::`setDefaultMaterialSpecular(self, tint)`:
    #cppname: HOM_GeometryViewportSettings::setDefaultMaterialSpecular
    
    Set the specular color of the default material (used when no material assignment is present or __Show Materials__ is disabled).
    

::`defaultMaterialSpecular(self)` -> `hou.Color`:
    #cppname: HOM_GeometryViewportSettings::defaultMaterialSpecular
    
    Query the default material's specular color.
    

::`defaultMaterialAmbient(self, tint)`:
    #cppname: HOM_GeometryViewportSettings::defaultMaterialAmbient
    
    Set the ambient color of the default material (used when no material assignment is present or __Show Materials__ is disabled).
    

::`setDefaultMaterialAmbient(self)` -> `hou.Color`:
    #cppname: HOM_GeometryViewportSettings::setDefaultMaterialAmbient
    
    Query the default material's ambient color.

::`defaultMaterialEmission(self, tint)`:
    #cppname: HOM_GeometryViewportSettings::defaultMaterialEmission
    
    Set the emission color of the default material (used when no material assignment is present or __Show Materials__ is disabled).
    

::`setDefaultMaterialEmission(self)` -> `hou.Color`:
    #cppname: HOM_GeometryViewportSettings::setDefaultMaterialEmission
    
    Query the default material's emission color.
    

::`setAmbientOcclusion(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setAmbientOcclusion
    
    Enable an ambient occlusion pass in high quality lighting modes. This generates local occlusion shadows.

::`ambientOcclusion(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::ambientOcclusion
    
    Query if ambient occlusion is enabled. This can return true even if not in a high quality mode as this queries the raw display option value, not a reflection of whether the pass is active. If querying it the pass is active, the lighting mode should also be checked.

::`setAmbientOcclusionLevel(self, level)`:
    #cppname: HOM_GeometryViewportSettings::setAmbientOcclusionLevel
    
    Set the level of occlusion to generate, from 1-4. Higher levels produce a larger area of effect, while lower values produce fine detail.

::`ambientOcclusionLevel(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::ambientOcclusionLevel
    
    Return the current occlusion level for ambient occlusion.

::`setShadowQuality(self, viewportShadowQuality)`:
    #cppname: HOM_GeometryViewportSettings::setShadowQuality
    
    Set the quality of shadow sampling in __High Quality Lighting with Shadows__ lighting mode.
    - `hou.viewportShadowQuality.Point`: 
        Area lights are treated as point lights when generating and sampling shadow maps. This is the fastest option.
    - `hou.viewportShadowQuality.PointAA`: 
        Do some antialiasing of shadow edges. Treat area lights as point lights when generating and sampling shadow maps.
    - `hou.viewportShadowQuality.Area`: 
        Area lights generate multiple shadow maps which are sampled to generate an approximation of a blurred shadow from an area source.
    - `hou.viewportShadowQuality.AreaAA`: 
        Area lights generate multiple maps and antialias the shadow lookups.

::`shadowQuality(self)` -> `hou.viewportShadowQuality`:
    #cppname: HOM_GeometryViewportSettings::shadowQuality
    
    Query the current shadow quality.

::`setShadowSensitivity(self, offset)`:
    #cppname: HOM_GeometryViewportSettings::setShadowSensitivity
    
    Set the shadow bias to avoid self-shadowing. A 2-tuple is expected, with the first value setting the variable offset (depending on how parallel the surface is to the view direction) and the second a constant offset. Generally these don't need to be changed from their default, but larger values reduce self shadowing but increase the risk of missing shadows for very close geometry.

::`shadowSensitivity(self)` -> tuple of `int`:
    #cppname: HOM_GeometryViewportSettings::shadowSensitivity
    
    Query the variable and constant shadow offsets, returned in a 2-tuple. 

::`setShadowMapSize(self, size)`:
    #cppname: HOM_GeometryViewportSettings::setShadowMapSize
    
    Set the maximum shadow map size, in pixels. Larger maps will produce sharper shadows but increase memory usage. Shadow maps are always square.

::`shadowMapSize(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::shadowMapSize
    
    Query the maximum size of the shadow maps used by __High Quality Lighting with Shadows__ lighting mode.

::`setShadowMapSizeFromLight(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setShadowMapSizeFromLight
    
    Set whether to use the shadow map size specified by the Shadow Map size parameter in the light object (clamped to the maximum size specified in the display options) or always use the maximum size. 

::`shadowMapSizeFromLight(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::shadowMapSizeFromLight
    
    Query if the shadow map size is defined by the light object.

::`useReflections(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::useReflections
    
    Enable reflection mapping. Objects with reflective materials generate reflection maps of the scene around them, which can be quite expensive.    

::`usingReflections(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::usingReflections
    
    Query if reflection mapping is enabled.

::`setHdrReflections(self, hdr_reflect)`:
    #cppname: HOM_GeometryViewportSettings::setHdrReflections
    
    Enable High Dynamic Range (HDR) color buffers for the generated scene cubemap, which allows for higher contrast and bright spots in reflections.

::`hdrReflections(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::hdrReflections
    
    Query if High Dynamic Range (HDR) color buffers are use for the scene cubemap. 

::`setReflectMapSize(self, size)`:
    #cppname: HOM_GeometryViewportSettings::setReflectMapSize
    
    Set the size of the cubemap used to store the surrounding scene as an environment map. Larger cubemaps produce sharper reflections but increase memory use.

::`reflectMapSize(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::reflectMapSize
    
    Query the size of reflection cubemaps.

::`setMinReflectAmount(self, min_reflect)`:
    #cppname: HOM_GeometryViewportSettings::setMinReflectAmount
    
    Set the minimum level of reflection required for a reflection cubemap to be generated for an object. This is based on the largest reflective value from all the materials assigned to the object. The larger this value, the more reflective an object must be to generate a reflection maps. A value of zero is not recommended, as all objects will generate a reflection map.

::`minReflectAmount(self)` -> `double`:
    #cppname: HOM_GeometryViewportSettings::minReflectAmount
    
    Query the minimum reflection level required for a cubemap to be generated for an object.

== Grid ==

::`showsOrthoGrid(self)`:
    #cppname: HOM_GeometryViewportSettings::showsOrthoGrid
    #status: ni

::`showOrthoGrid(self, on)`:
    #cppname: HOM_GeometryViewportSettings::showOrthoGrid
    #status: ni

::`setOrthoGridRulerSpacing(self, x, y)`:
    #cppname: HOM_GeometryViewportSettings::setOrthoGridRulerSpacing
    #status: ni

::`showsReferenceGrid(self)`:
    #cppname: HOM_GeometryViewportSettings::showsReferenceGrid
    #status: ni

::`showReferenceGrid(self, on)`:
    #cppname: HOM_GeometryViewportSettings::showReferenceGrid
    #status: ni

::`setReferenceGridSpacing(self, u, v)`:
    #cppname: HOM_GeometryViewportSettings::setReferenceGridSpacing
    #status: ni

::`showsTileBoundary(self)`:
    #cppname: HOM_GeometryViewportSettings::showsTileBoundary
    #status: ni

::`showTileBoundary(self, on)`:
    #cppname: HOM_GeometryViewportSettings::showTileBoundary
    #status: ni

::`showPixelGrid(self, on)`:
    #cppname: HOM_GeometryViewportSettings::showPixelGrid
    #status: ni

::`showsPixelGrid(self)`:
    #cppname: HOM_GeometryViewportSettings::showsPixelGrid
    #status: ni

::`setPixelGridOffset(self, u, v)`:
    #cppname: HOM_GeometryViewportSettings::setPixelGridOffset
    #status: ni

::`setPixelGridSpacing(self, u, v)`:
    #cppname: HOM_GeometryViewportSettings::setPixelGridSpacing
    #status: ni

== Grid ==

::`setDisplayOrthoGrid(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setDisplayOrthoGrid
    
    Display the grid in fixed orthographic views (Top, Left, Front, Bottom, Right, Back).

::`displayOrthoGrid(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::displayOrthoGrid
    
    Query if the grid is displayed in fixed orthographic views.

::`setOrthoGridOffset(self, offset)`:
    #cppname: HOM_GeometryViewportSettings::setOrthoGridOffset
    
    Set the offset of the grid in fixed orthographic views, as a 3-tuple in world space.

::`orthoGridOffset(self)` -> tuple of `float`:
    #cppname: HOM_GeometryViewportSettings::orthoGridOffset
    
    Query the offset of the grid in fixed orthographic views.

::`setOrthoGridSpacing(self, offset)`:
    #cppname: HOM_GeometryViewportSettings::setOrthoGridSpacing
    
    Set the spacing of the grid lines in fixed orthographic views as a 2-tuple.

::`orthoGridSpacing(self)` -> tuple of `float`:
    #cppname: HOM_GeometryViewportSettings::orthoGridSpacing
    
    Query the spacing of the grid lines in fixed orthographic views as a 2-tuple.
    

::`setOrthoGridRuler(self, offset)`:
    #cppname: HOM_GeometryViewportSettings::setOrthoGridRuler
    
    Set the spacing of the grid numbers in fixed orthographic views as a 2-tuple.
   

::`orthoGridRuler(self)` -> tuple of `int`:
    #cppname: HOM_GeometryViewportSettings::orthoGridRuler
    
    Query the spacing of the grid numbers in fixed orthographic views as a 2-tuple.
    

::`setOrthoRuler(self, viewportGridRuler)`:
    #cppname: HOM_GeometryViewportSettings::setOrthoRuler
    
    Where to display the grid numbers on the fixed orthographic view grid.

    - `hou.viewportGridRuler.Hide`: 
        Do not display.
    - `hou.viewportGridRuler.MainAxis`: 
        Display along the main axes at grid line intersections.
    - `hou.viewportGridRuler.GridPoints`: 
        Display on grid line intersections.

::`orthoRuler(self)` -> `hou.viewportGridRuler`:
    #cppname: HOM_GeometryViewportSettings::orthoRuler
    
    Query where the grid numbers are displayed on the fixed orthographic view grid.
   
    - `hou.viewportGridRuler.Hide`: 
        Not displayed.
    - `hou.viewportGridRuler.MainAxis`: 
        Displayed along the main axes at grid line intersections.
    - `hou.viewportGridRuler.GridPoints`: 
        Displayed on grid line intersections.


::`setUVReferenceGrid(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setUVReferenceGrid
    
    Display the grid in UV viewports.

::`uvReferenceGrid(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::uvReferenceGrid
    
    Query if the grid in UV viewports is displayed.
    

::`setUVDisplayGridOverImage(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setUVDisplayGridOOverImage
    
    Display dots in a grid pattern over the background image.

::`uvReferenceGridOverImage(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::uvReferenceGrid
    
    Query if the dot grid is displayed.
    

::`setUVGridPixelSpacing(self, offset)`:
    #cppname: HOM_GeometryViewportSettings::setUVGridPixelSpacing
    
    Set the spacing of the UV dot grid displayed over the background image.

::`uvGridPixelSpacing(self)` -> tuple of `float`:
    #cppname: HOM_GeometryViewportSettings::uvGridPixelSpacing
    
    Query the spacing of the UV dot grid displayed over background images.
    

::`setUVGridPixelOffset(self, offset)`:
    #cppname: HOM_GeometryViewportSettings::setUVGridPixelOffset
    
    Set the spacing, in pixels, of the dot grid.

::`uvGridPixelOffset(self)` -> tuple of `float`:
    #cppname: HOM_GeometryViewportSettings::uvGridPixelOffset
    
    Query the spacing of the dot grid in pixels.
    

::`setClampUVGridToBackground(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setClampUVGridToBackground
    
    Restrict the grid to the background image's area.

::`clampUVGridToBackground(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::clampUVGridToBackground
    
    Query if the grid is restricted to the background image's area.

::`setDisplayUVTileBoundaries(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setDisplayUVTileBoundaries
    
    Display the boundaries of UV tiles at integral U and V numbers. 

::`displayUVTileBoundaries(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::displayUVTileBoundaries
    
    Query if the boundaries of UV tiles are displayed. 
    

== Background ==

::`setColorScheme(self, viewportColorScheme)`:
    #cppname: HOM_GeometryViewportSettings::setColorScheme
    
    Set the color scheme for the viewport.    
    - `hou.viewportColorScheme.Dark`: 
        Black background. 
    - `hou.viewportColorScheme.Grey`: 
        Light grey background.
    - `hou.viewportColorScheme.Light`: 
        Light blue gradient background.

::`colorScheme(self)` -> `hou.viewportColorScheme`:
    #cppname: HOM_GeometryViewportSettings::colorScheme
    
    Query the current viewport color scheme.
    - `hou.viewportColorScheme.Dark`: 
        Black background. 
    - `hou.viewportColorScheme.Grey`: 
        Light grey background.
    - `hou.viewportColorScheme.Light`: 
        Light blue gradient background.

::`backgroundImage(self, viewportBGImageView, layer)` -> `hou.GeometryViewportBGImage`:
    #cppname: HOM_GeometryViewportSettings::backgroundImage
    
    Access the background image parameters for the target view type. `layer` is currently not used but reserved for future use.

    - `hou.viewportBGImageView.Perspective`: 
        The 3D view not attached to a camera ("No cam").
    - `hou.viewportBGImageView.Camera`: 
        The 3D view looking through a camera.
    - `hou.viewportBGImageView.Top`: 
        The orthographic top view.
    - `hou.viewportBGImageView.Front`: 
        The orthographic front view.
    - `hou.viewportBGImageView.Right`: 
        The orthographic right view.
    - `hou.viewportBGImageView.Bottom`: 
        The orthographic bottom view.
    - `hou.viewportBGImageView.Back`: 
        The orthographic back view.
    - `hou.viewportBGImageView.Left`: 
        The orthographic left view.
    - `hou.viewportBGImageView.UV`: 
        The UV texture viewport.    


::`setDisplayBackgroundImage(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setDisplayBackgroundImage
    
    Globally enable background image display.

::`displayBackgroundImage(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::displayBackgroundImage
    
    Query if background image display is globally enabled.

::`setDisplayEnvironmentBackgroundImage(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setDisplayEnvironmentBackgroundImage
    
    Allow environment lights to show their environment maps as 360 degree background images.

::`displayEnvironmentBackgroundImage(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::displayEnvironmentBackgroundImage
    
    Query if environmenty lights' envirnoment maps are shown as 360 degree background images.

::`setFilterBackgroundImage(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setFilterBackgroundImage
    
    Enable texture filtering of background images. When off, individual pixels are shown as blocks at high zoome levels rather than blended.

::`filterBackgroundImage(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::filterBackgroundImage
    
    Query if texture filtering of background images is enabled.

::`setApplyZoomToBackgroundImage(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setApplyZoomToBackgroundImage
    
    Allow the camera zoom to affect the background image. 

::`applyZoomToBackgroundImage(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::applyZoomToBackgroundImage
    
    Query if the camera zoom is affecting the background image.

::`setBackgroundImageQuality(self, quality)`:
    #cppname: HOM_GeometryViewportSettings::setBackgroundImageQuality
    
    Set the quality of the background image, from 0-100. Values less than 100 will scale down the resolution of the background image.

::`backgroundImageQuality(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::backgroundImageQuality
    
    Query the quality of background image display, from 0-100.


== Texture ==

::`setDisplayTextures(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setDisplayTextures
    
    Enable material texturing.

::`displayTextures(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::displayTextures
    
    Query if material texturing is enabled.

::`setDisplayTextureLayers(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setDisplayTextureLayers
    
    Enable multiple texture layers when texturing. This causes an extra render of the geometry per texture layer.

::`displayTextureLayers(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::displayTextureLayers
    
    Query if multiple texture layers are rendered. 

::`setDisplayProjectedTextures(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setDisplayProjectedTextures
    
    Enable projected textures from spotlights with a valid texture.

::`displayProjectedTextures(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::displayProjectedTextures
    
    Query if projected textures from spotlights are rendered.

::`setTextureMipmapping(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setTextureMipmapping
    
    Enable mipmapping for textures, improving display quality but increasing texture memory use by 50%.

::`textureMipmapping(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::textureMipmapping
    
    Query if texture mipmapping is enabled.

::`setTextureAnisotropicFilter(self, num_samples)`:
    #cppname: HOM_GeometryViewportSettings::setTextureAnisotropicFilter
    
    Set the number of samples for anisotropic texture filtering. More samples produces better results for textures on polygons on an angle to the view direction.

::`textureAnisotropicFilter(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::textureAnisotropicFilter
    
    Query the number of samples used for anisotropic texture filtering.   

::`setTextureCacheSize(self, size_in_mb)`:
    #cppname: HOM_GeometryViewportSettings::setTextureCacheSize
    
    Set the size of the texture cache, in megabytes. The viewport will use as much texture memory as it needs, even if it exceeds this level, but textures will be culled once they are no longer used to remain within this limit.

::`textureCacheSize(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::textureCacheSize
    
    Query the texture cache size, in megabytes.

::`setTextureMaxMemory(self, size_in_mb)`:
    #cppname: HOM_GeometryViewportSettings::setTextureMaxMemory
    
    Set the maximum size of a single texture, in megabytes. This prevents extremely large textures from starving the graphics hardware's bandwidth (mostly by 3D textures).

::`textureMaxMemory(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::textureMaxMemory
    
    Return the maximum size of a single texture, in megabytes.

::`setTextureAutoReduce(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setTextureAutoReduce
    
    Enable auto-reduction of viewport textures. This attempts to scale down textures to fit within the texture cache.

::`textureAutoReduce(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::textureAutoReduce
    
    Query if auto-reduction of viewport textures is enabled.

::`setTextureAutoReduce2D(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setTextureAutoReduce2D
    
    Allow auto-reduction of regular 2D textures.

::`textureAutoReduce2D(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::textureAutoReduce2D
    
    Query if auto-reduction of regular 2D textures is allowed.

::`setTextureAutoReduce3D(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setTextureAutoReduce3D
    
    Allow auto-reduction of 3D textures (volumes).
    

::`textureAutoReduce3D(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::textureAutoReduce3D
    
    Query if auto-reduction of 3D textures is allowed.
    

::`setTextureResLimit2D(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setTextureResLimit2D
    
    Limit the resolution of all 2D textures, so that the width and height cannot exceed the limit. Even if disabled, OpenGL has its own texture limits which will be applied (usually 8k or 16k). 

::`textureResLimit2D(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::textureResLimit2D
    
    Query if 2D textures have their resolutions limited.

::`setTextureMaxRes2D(self, res)`:
    #cppname: HOM_GeometryViewportSettings::setTextureMaxRes2D
    
    Set the maximum resolution of a 2D texture. `res` is an integer 2-tuple of (width, height). OpenGL has its own limit, and setting this limit higher than that will have no effect. The image will be scaled to fit the limit if it exceeds it.

::`textureMaxRes2D(self)` -> 2-tuple of `int`:
    #cppname: HOM_GeometryViewportSettings::textureMaxRes2D
    
    Return the maximum resolution for a 2D texture.

::`setTextureBitDepthLimit2D(self, viewportTextureDepth)`:
    #cppname: HOM_GeometryViewportSettings::setTextureBitDepthLimit2D
    
    Set the maximum bit depth for a 2D texture. Textures with a bit depth higher than this will be downconverted to this bit depth. Textures with an equal or lower bit depth will not be converted.

    - `hou.viewportTextureDepth.Compressed8`: 
        Compressed, 8b SDR texture format. Smallest memory use.
    - `hou.viewportTextureDepth.Fixed8`: 
        8b SDR texture format. Good balance between memory and quality.
    - `hou.viewportTextureDepth.HDR16`: 
        16b HDR texture format. Excellent dynamic range, but more memory use and slower texturing performance.
    - `hou.viewportTextureDepth.FullHDR`: 
        32b HDR texture format. Extreme dynamic range, but very high memory use and slow texturing performance. Use with care.

::`textureBitDepthLimit2D(self)` -> `hou.viewportTextureDepth`:
    #cppname: HOM_GeometryViewportSettings::textureBitDepthLimit2D
    
    Query the maximum bit depth for a 2D texture.
    
    - `hou.viewportTextureDepth.Compressed8`: 
        Compressed, 8b SDR texture format. Smallest memory use.
    - `hou.viewportTextureDepth.Fixed8`: 
        8b SDR texture format. Good balance between memory and quality.
    - `hou.viewportTextureDepth.HDR16`: 
        16b HDR texture format. Excellent dynamic range, but more memory use and slower texturing performance.
    - `hou.viewportTextureDepth.FullHDR`: 
        32b HDR texture format. Extreme dynamic range, but very high memory use and slow texturing performance. Use with care.


::`setTextureScale2D(self, scale)`:
    #cppname: HOM_GeometryViewportSettings::setTextureScale2D
    
    Uniformly downscale all 2D textures by this fraction (default 1.0, no scale). 

::`textureScale2D(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::textureScale2D
    
    Query the uniform scale applied to 2D textures.

::`setTextureResLimit3D(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setTextureResLimit3D
    
    Limit the resolution of all 3D textures (volumes), so that the width, height, and depth cannot exceed the limit. Even if disabled, OpenGL has its own texture limits which will be applied (usually 2k or 8k). 

::`textureResLimit3D(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::textureResLimit3D
    
    Query if 3D textures have their resolutions limited.
    
::`setTexture2DSettingsFor3D(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setTexture2DSettingsFor3D
    
    When enabled, use all the 2D texture settings for 3D textures.

::`texture2DSettingsFor3D(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::texture2DSettingsFor3D
    
    Query if the 2D settings are used for 3D textures.

::`setTextureMaxRes3D(self, res)`:
    #cppname: HOM_GeometryViewportSettings::setTextureMaxRes3D
    
    Set the maximum resolution of a 3D texture (volume). `res` is an integer 3-tuple of (width, height, depth). OpenGL has its own limit, and setting this limit higher than that will have no effect. The image will be scaled to fit the limit if it exceeds it.
    

::`textureMaxRes3D(self)` -> 3-tuple of `int`:
    #cppname: HOM_GeometryViewportSettings::textureMaxRes3D
    
    Query the maximum resolution of a 3D texture (volume).

::`setTextureBitDepthLimit3D(self, viewportTextureDepth)`:
    #cppname: HOM_GeometryViewportSettings::setTextureBitDepthLimit3D
    
    Set the maximum bit depth for a 3D texture (volume). Textures with a bit depth higher than this will be downconverted to this bit depth. Textures with an equal or lower bit depth will not be converted. 3D textures do not support compressed formats.
    
    - `hou.viewportTextureDepth.Fixed8`: 
        8b SDR texture format. Good balance between memory and quality.
    - `hou.viewportTextureDepth.HDR16`: 
        16b HDR texture format. Excellent dynamic range, but more memory use and slower texturing performance.
    - `hou.viewportTextureDepth.FullHDR`: 
        32b HDR texture format. Extreme dynamic range, but very high memory use and slow texturing performance. Use with care.


::`textureBitDepthLimit3D(self)` -> `hou.viewportTextureDepth`:
    #cppname: HOM_GeometryViewportSettings::textureBitDepthLimit3D
    
    Query the maximum bit depth of a 3D texture (volume).
    - `hou.viewportTextureDepth.Fixed8`: 
        8b SDR texture format. Good balance between memory and quality.
    - `hou.viewportTextureDepth.HDR16`: 
        16b HDR texture format. Excellent dynamic range, but more memory use and slower texturing performance.
    - `hou.viewportTextureDepth.FullHDR`: 
        32b HDR texture format. Extreme dynamic range, but very high memory use and slow texturing performance. Use with extreme care.


::`setTextureScale3D(self, scale)`:
    #cppname: HOM_GeometryViewportSettings::setTextureScale3D
    
    Uniformly downscale all 3D textures (volumes) by this fraction (default 1.0, no scale). 
    

::`textureScale3D(self)` -> `float`:
    #cppname: HOM_GeometryViewportSettings::textureScale3D
    
    Query the uniform scale applied to 3D textures (volumes).

    


== Optimize ==
 
::`useMaterialStylesheets(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::useMaterialStylesheets
    
    Enable evaluation of material stylesheets for viewport material assignment.

::`usingMaterialStylesheets(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::usingMaterialStylesheets
    
    Query if material stylesheet assignment is active.

::`usePerPrimStylesheets(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::usePerPrimStylesheets

    Enable evaluation of per-primitive stylesheets.

::`usingPerPrimStylesheets(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::usingPerPrimStylesheets

    Query if per-primitive stylesheets are evaluated.

::`usePackedStylesheets(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::usePackedStylesheets
    
    Enable assignment of material stylesheets to geometry within packed primitives.
    

::`usingPackedStylesheets(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::usingPackedStylesheets
    
    Query if material stylesheet assignments are applied to geometry within packed primitives.
    

::`useMaterialOverrides(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::useMaterialOverrides
    
    Allow material overrides from material stylesheets and the `material_override` attribute.

::`usingMaterialOverrides(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::usingMaterialOverrides
    
    Query if material overrides are being applied to material assignments.

::`setSingleObjectMaterialLimit(self, num_materials)`:
    #cppname: HOM_GeometryViewportSettings::setSingleObjectMaterialLimit
    
    Set the maximum number of material variations for a single object.

::`singleObjectMaterialLimit(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::singleObjectMaterialLimit
    
    Query the maximum number of material variations for a single object.

::`setMaterialUpdate(self, viewportMaterialUpdate)`:
    #cppname: HOM_GeometryViewportSettings::setMaterialUpdate
    
    Set the material assignment update frequency.

    - `hou.viewportMaterialUpdate.Always`: 
          Update assignments whenever needed.
    - `hou.viewportMaterialUpdate.OffForPlayback`: 
          Update assignments whenever needed, but not during playback.
    - `hou.viewportMaterialUpdate.Manual`: 
          Only update assignments when __Update Materials__ is pressed.

::`materialUpdate(self)` -> `hou.viewportMaterialUpdate`:
    #cppname: HOM_GeometryViewportSettings::materialUpdate
    
    Query the material assignment update frequency.    
    - `hou.viewportMaterialUpdate.Always`: 
          Update assignments whenever needed.
    - `hou.viewportMaterialUpdate.OffForPlayback`: 
          Update assignments whenever needed, but not during playback.
    - `hou.viewportMaterialUpdate.Manual`: 
          Only update assignments when __Update Materials__ is pressed.


::`setInteractiveMaterialUpdate(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setInteractiveMaterialUpdate
    
    Update materials when they are changed to reflect their new state. When disabled,  __Update Materials__ must be pressed manually for changes to be reflected in the viewport.

::`interactiveMaterialUpdate(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::interactiveMaterialUpdate
    
    Query if materials are updated when they change.

::`updateMaterials(self)`:
    #cppname: HOM_GeometryViewportSettings::updateMaterials
    
    Manually update all materials and material assignments.

::`setVisibleObjects(self, uv)`:
    #cppname: HOM_GeometryViewportSettings::setVisibleObjects
    
    Set the mask for all visible objects in the viewport. Wilcards can be used.

::`visibleObjects(self)` -> `str`:
    #cppname: HOM_GeometryViewportSettings::visibleObjects
    
    Query the current visible object mask.

::`setRemoveBackfaces(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setRemoveBackfaces
    
    Cull polygons facing backwards instead of rasterizing them.

::`removeBackfaces(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::removeBackfaces
    
    Query if backwards facing polygons are culled.

::`setHullsOnly(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setHullsOnly
    
    Draw only hulls for complex curves and surfaces like NURBS and Beziers. 

::`hullsOnly(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::hullsOnly
    
    Query if only hulls are drawn for complex curves and surfaces.

::`setDistanceBasedPackedCulling(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setDistanceBasedPackedCulling
    
    Enable culling of packed primitives when the polygon count of the visible objects in the frustum exceeds a certain amount, starting with the most distant.

::`distanceBasedPackedCulling(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::distanceBasedPackedCulling
    
    Query if packed primitive culling is enabled.

::`setScenePolygonLimit(self, millions_of_polygons)`:
    #cppname: HOM_GeometryViewportSettings::setScenePolygonLimit
    
    Set the maximum number of polygons in the view frustum, in millions, before the viewport begins culling packed primitives.

::`scenePolygonLimit(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::scenePolygonLimit
    
    Query the maximum allowed number of polygons in the view frustum, in millions of polygons.

::`setPackedBoundingBoxMode(self, viewportPackedBoxMode)`:
    #cppname: HOM_GeometryViewportSettings::setPackedBoundingBoxMode
    
    Define how culled packed primitives are displayed.

    - `hou.viewportPackedBoxMode.NoDisplay`: 
          Culled packed primitives are not displayed at all.
    - `hou.viewportPackedBoxMode.Wireframe`: 
          A wireframe bounding box replaces the packed primitive.
    - `hou.viewportPackedBoxMode.Shaded`: 
          A shaded bounding box replaces the packed primitive.
    - `hou.viewportPackedBoxMode.CurrentShadingMode`: 
          A bounding box replaces the packed primitive, drawn wireframe in wireframe shading modes and shaded otherwise.

::`packedBoundingBoxMode(self)` -> `hou.viewportPackedBoxMode`:
    #cppname: HOM_GeometryViewportSettings::packedBoundingBoxMode
    
    Query how culled packed primitives are displayed.

    - `hou.viewportPackedBoxMode.NoDisplay`: 
          Culled packed primitives are not displayed at all.
    - `hou.viewportPackedBoxMode.Wireframe`: 
          A wireframe bounding box replaces the packed primitive.
    - `hou.viewportPackedBoxMode.Shaded`: 
          A shaded bounding box replaces the packed primitive.
    - `hou.viewportPackedBoxMode.CurrentShadingMode`: 
          A bounding box replaces the packed primitive, drawn wireframe in wireframe shading modes and shaded otherwise.


::`setOptimizeGeometry(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setOptimizeGeometry
    
    Optimize packed geometry when loaded to make it faster for display (triangulating and splitting meshes).

::`optimizeGeometry(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::optimizeGeometry
    
    Query if packed geometry is optimized.

::`setAgentLODReduction(self, enable)`:
    #cppname: HOM_GeometryViewportSettings::setAgentLODReduction
    
    Enable the use of multiple levels of detail for crowd agents, each LOD level being half the polygon count of the previous level.

::`agentLODReduction(self)` -> `bool`:
    #cppname: HOM_GeometryViewportSettings::agentLODReduction
    
    Query if multiple levels of detail (LOD) are generated for crowd agents.

::`setAgentLODReductionBias(self, reduce_bias)`:
    #cppname: HOM_GeometryViewportSettings::setAgentLODReductionBias
    
    Set the LOD balance from Performance (0) to Quality (10), which biases which LOD levels are chosen.

::`agentLODReductionBias(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::agentLODReductionBias
    
    Query the LOD bias for agents.

::`setAgentShapePointCutoff(self, num_points)`:
    #cppname: HOM_GeometryViewportSettings::setAgentShapePointCutoff
    
    Set the minimum number of points in an agent LOD level. If an LOD level would go below this number, it is not generated.

::`agentShapePointCutoff(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::agentShapePointCutoff
    
    Query the minimum number of points in an agent LOD level.

::`setMaxLODLevels(self, num_levels)`:
    #cppname: HOM_GeometryViewportSettings::setMaxLODLevels
    
    Set the maximum number of levels to generate for an agent. This will be the original model plus this number.

::`maxLODLevels(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::maxLODLevels
    
    Query the maximum number of levels generated for an agent.

::`setBaseLODLevel(self, base_level)`:
    #cppname: HOM_GeometryViewportSettings::setBaseLODLevel
    
    Set the level to use as the full level of detail model, generally 0 (the original agent model). For very heavy poly count agents, this can be set to higher values to reduce the polygon count of the highest level of detail model.

::`baseLODLevel(self)` -> `int`:
    #cppname: HOM_GeometryViewportSettings::baseLODLevel
    
    Query the base level of detail.

::`setSingleBoneDeform(self, viewportAgentBoneDeform)`:
    #cppname: HOM_GeometryViewportSettings::setSingleBoneDeform
    
    Set the complexity of bone-based deformation on agents.

    - `hou.viewportAgentBoneDeform.Always`: 
          Only use 1 bone to deform on all agent instances (the one with the most influence).
    - `hou.viewportAgentBoneDeform.ReducedLOD`: 
          Use up to 4 bones to deform the highest LOD agent instances, and 1 bone on all the reduced LOD instances.
    - `hou.viewportAgentBoneDeform.Disabled`: 
          Use up to 4 bones to deform on all agent instances.


::`singleBoneDeform(self)` -> `hou.viewportAgentBoneDeform`:
    #cppname: HOM_GeometryViewportSettings::singleBoneDeform
    
    Query the complexity of bone-based deformation on agents.
    - `hou.viewportAgentBoneDeform.Always`: 
          Only use 1 bone to deform on all agent instances (the one with the most influence).
    - `hou.viewportAgentBoneDeform.ReducedLOD`: 
          Use up to 4 bones to deform the highest LOD agent instances, and 1 bone on all the reduced LOD instances.
    - `hou.viewportAgentBoneDeform.Disabled`: 
          Use up to 4 bones to deform on all agent instances.


::`setAgentWireframe(self, viewportAgentWireframe)`:
    #cppname: HOM_GeometryViewportSettings::setAgentWireframe
    
    Set the appearance of agents in wireframe mode.
    - `hou.viewportAgentWireframe.Bone`: 
          Agents are rendered as bone-based skeletons.
    - `hou.viewportAgentWireframe.Line`: 
          Agents are rendered as line-based skeletons.

::`agentWireframe(self)` -> `hou.viewportAgentWireframe`:
    #cppname: HOM_GeometryViewportSettings::agentWireframe
    
    Query the appearance of agents in wireframe mode.
    
    - `hou.viewportAgentWireframe.Bone`: 
          Agents are rendered as bone-based skeletons.
    - `hou.viewportAgentWireframe.Line`: 
          Agents are rendered as line-based skeletons.


@replaces

- [Cmd:cplane]
- [Cmd:viewbackground]
- [Cmd:viewcamera]
- [Cmd:viewcopy]
- [Cmd:viewdisplay]
- [Cmd:viewls]
- [Cmd:viewname]
- [Cmd:vieworthogrid]
- [Cmd:viewprojection]
- [Cmd:viewsnapshot]
- [Cmd:viewtransform]
- [Cmd:viewtype]
- [Cmd:viewuvgrid]

