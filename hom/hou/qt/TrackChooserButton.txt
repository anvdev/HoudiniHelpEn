= hou.qt.TrackChooserButton =
#type: homclass
#cppname: HOM_qt_TrackChooserButton
#group: ui

"""A button with the Houdini look and feel that opens the Houdini track chooser dialog when clicked."""

This class inherits from Qt's `QtWidgets.QToolButton` class.

@signals

::`trackSelected(str)`
    #cppname: HOM_qt_TrackChooserButton::trackSelected
    This signal is emitted when a selection is made in the track chooser dialog.


@methods

::`__init__(self)`:
    #cppname: HOM_qt_TrackChooserButton::HOM_qt_TrackChooserButton
    Create and return a new TrackChooserButton object.

::`setInitialSelection(self, initial_track)`:
    #cppname: HOM_qt_TrackChooserButton::setInitialSelection
    Set the initially selected track when the track chooser dialog
    is opened.

    `initial_track` must be a [Hom:hou.Track] object.

::`setNodeChooserFilter(self, node_filter)`:
    #cppname: HOM_qt_TrackChooserButton::setNodeChooserFilter
    Set the node type filter used by the track chooser dialog.

    `node_filter` must be a [Hom:hou.nodeTypeFilter] enumerated value.

::`setSelectMultiple(self, value)`:
    #cppname: HOM_qt_TrackChooserButton::setSelectMultiple
    Set if multiple tracks should be selectable with the chooser dialog.

@examples

This example demonstrates creating a chooser button for tracks and hooking
it to a callback function that is invoked when a track is selected from the
chooser dialog:
{{{
#!python

def onNodeSelected(track_path):
    print("Selected track:", track_path)

track_chooser_btn = hou.qt.TrackChooserButton()
track_chooser_btn.setNodeChooserFilter(hou.nodeTypeFilter.Chop)
track_chooser_btn.trackSelected.connect(onTrackSelected)

}}}
