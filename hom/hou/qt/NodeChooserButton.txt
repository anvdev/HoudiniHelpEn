= hou.qt.NodeChooserButton =
#type: homclass
#cppname: HOM_qt_NodeChooserButton
#group: ui

"""A button with the Houdini look and feel that opens the Houdini node chooser dialog when clicked."""

This class inherits from Qt's `QtWidgets.QToolButton` class.

@signals

::`nodeSelected(str)`
    #cppname: HOM_qt_NodeChooserButton::nodeSelected
    This signal is emitted when a selection is made in the node chooser dialog.


@methods

::`__init__(self)`:
    #cppname: HOM_qt_NodeChooserButton::HOM_qt_NodeChooserButton
    Create and return a new NodeChooserButton object.

::`setNodeChooserRelativeToNode(self, relative_to_node)`:
    #cppname: HOM_qt_NodeChooserButton::setNodeChooserRelativeToNode
    Set the reference node to use in the node chooser dialog.  This will cause
    the Use Relative Paths checkbox in the dialog to be set.
    Node paths returned by the node chooser dialog will be relative
    to the reference node when the checkbox is set.

    `relative_to_node` must be a [Hom:hou.Node] object.

    If no reference node is set or if the Use Relative Paths checkbox is not
    set then returned paths will be absolute.

::`setNodeChooserInitialNode(self, initial_node)`:
    #cppname: HOM_qt_NodeChooserButton::setNodeChooserInitialNode
    Set the node that is initially selected when the node chooser dialog
    is opened.

    `initial_node` must be a [Hom:hou.Node] object.

::`setNodeChooserFilter(self, node_filter)`:
    #cppname: HOM_qt_NodeChooserButton::setNodeChooserFilter
    Set the node type filter used by the node chooser dialog.
   
    `node_filter` must be a [Hom:hou.nodeTypeFilter] enumerated value.

::`setSelectMultiple(self, value)`:
    #cppname: HOM_qt_NodeChooserButton::setSelectMultiple
    Set if multiple nodes should be selectable with the chooser dialog.

@examples

This example demonstrates creating a chooser button for SOP nodes and hooking
it to a callback function that is invoked when a node is selected from the
chooser dialog:
{{{
#!python

def onNodeSelected(node_path):
    print("Selected node:", node_path)

node_chooser_btn = hou.qt.NodeChooserButton()
node_chooser_btn.setNodeChooserFilter(hou.nodeTypeFilter.Sop)
node_chooser_btn.nodeSelected.connect(onNodeSelected)

}}}
