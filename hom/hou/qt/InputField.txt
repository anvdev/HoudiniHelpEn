= hou.qt.InputField =
#type: homclass
#cppname: HOM_qt_InputField
#group: ui

"""A vector of text fields (one to four) that store either integers, floats or
strings."""

The input field is designed to look like the Houdini input fields that appear
in the Parameters pane.  The field supports the ((MMB)) click value ladder.

This class inherits from Qt's `QtWidgets.QWidget` class.

@enums

== Type ==

This enumeration specifies an input field's data type.

:: IntegerType
    Integer data type.
:: FloatType
    Float data type.
:: StringType
    String data type.

@signals

::`valueChanged()`
    #cppname: HOM_qt_InputField::valueChanged
    This signal is emitted when the value stored in the input field
    has changed.

::`hotkeyInvoked(str)`
    #cppname: HOM_qt_InputField::hotkeyInvoked
    This signal is emitted when a hotkey is invoked.  The first parameter
    is the hotkey symbol that was invoked.

@methods

::`__init__(self, data_type, num_components, label=None)`:
    #cppname: HOM_qt_InputField::HOM_qt_InputField
    Create and return a new input field that has `num_components` line edit
    fields for the given data type.

    `data_type`:
        Must be a [Hom:hou.qt.InputField#Type] enumeration value.

    `num_components`:
        Must be an integer between 1 and 4 inclusive.

    `label`:
        Text that will appear beside the input field.  If None then no label
        will be shown.

::`setValue(self, value, index=0)`:
    #cppname: HOM_qt_InputField::setValue
    Set the value for the component at `index`.

    `index`:
        The vector component index.  For scalars this would default to 0.

    Raise an AssertionError if the value's data type does not match
    the input field's data type.

    Raise an AssertionError if the index is outside the range of components
    (i.e. index must be greater than or equal to 0 and less than the
    number of components in the field).

::`setValues(self, values)`:
    #cppname: HOM_qt_InputField::setValues
    Sets the field's values.  This is a convenience method for setting
    all of the field's values in one call.

    `values`:
        Either a tuple or list of values.

    Raise an AssertionError if any values in `values` do not match
    the input field's data type.

    Raise an AssertionError if the number of items in `values` is not
    equal to the number of components in the input field.

::`value(self, index=0)` -> `int`, `float` or `str` :
    #cppname: HOM_qt_InputField::value
    Return the value for the component at `index`.

    `index`:
        The vector component index.  For scalars this would default to 0.

    Raise an AssertionError if the index is outside the range of components
    (i.e. index must be greater than or equal to 0 and less than the
    number of components in the field).

::`values(self)` -> tuple of `int`, `float` or `str`:
    #cppname: HOM_qt_InputField::values
    Return all of the values in the input field.

::`setMenu(self, menu)`:
    #cppname: HOM_qt_InputField::setMenu
    Set this widget's context menu.  The context menu is applied to all
    components' fields.

    `menu`:
        QtWidgets.QMenu object to be applied to this widget.

::`menu(self)` -> [QtWidgets.QMenu]:
    #cppname: HOM_qt_InputField::menu
    Accessor for the widget's context menu.

::`setAlignment(self, alignment)`:
    #cppname: HOM_qt_InputField::setMenu
    Set the text alignment for the all of the components' fields

    `alignment`:
        [QtCore.Qt.Alignment] to specify the text alignment.

::`setState(self, state_name, state_value, index=0)`:
    #cppname: HOM_qt_InputField::setState
    Sets the field's state_value for the named state at `index`.

    `state_name`:
        An arbitrary state name string.

    `state_value`:
        A bool value for the state.

    `index`:
        The vector component index.  For scalars this would default to 0.

    Raise an AssertionError if the index is outside the range of components
    (i.e. index must be greater than or equal to 0 and less than the
    number of components in the field).

::`state(self, state_name, index=0)` -> `bool` :
    #cppname: HOM_qt_InputField::state
    Return the value of the named state for the component at `index`.

    `state_name`:
        An arbitrary state name string.

    `index`:
        The vector component index.  For scalars this would default to 0.

    Raise an AssertionError if the index is outside the range of components
    (i.e. index must be greater than or equal to 0 and less than the
    number of components in the field).

