= hou.qt.ColorSwatchButton=
#type: homclass
#cppname: HOM_qt_ColorSwatchButton
#group: ui

"""A button used for selecting colors with the Houdini look and feel."""

When clicked, the button opens a Houdini color picker dialog.

This class inherits from Qt's `QtWidgets.QPushButton` class.

@enums

== Position ==

This enumeration specifies where on the colour swatch to show the secondary
color.

:: PositionOff
    Don't show on the swatch.
:: PositionTop
    Show at the top of the swatch.
:: PositionBottom
    Show at the bottom of the swatch.
:: PositionLeft
    Show at the left of the swatch.
:: PositionRight
    Show at the right of the swatch.
:: PositionAll
    Fille the whole sdwatch.


@signals

::`colorChanged(QtGui.QColor)`
    #cppname: HOM_qt_ColorSwatchButton::colorChanged
    This signal is emitted when the color in the swatch button has changed.

@methods

::`__init__(self, include_alpha=False)`:
    #cppname: HOM_qt_ColorSwatchButton::HOM_qt_ColorSwatchButton
    Create and return a new ColorSwatchButton object.

    `include_alpha`:
        If True, then an alpha component is added to the color swatch button.

::`color(self)` -> `QtGui.QColor`:
    #cppname: HOM_qt_ColorSwatchButton::color
    Return the button's current color.

::`setColor(self, color)`:
    #cppname: HOM_qt_ColorSwatchButton::setColor
    Set the button's current color.  

    `color`:
        `QtGui.QColor` object of the desired color.

::`hasAlpha(self)` -> `bool`:
    #cppname: HOM_qt_ColorSwatchButton::hadAlpha
    Return if the button will show an alpha value.

::`secondaryColor(self)` -> `QtGui.QColor`:
    #cppname: HOM_qt_ColorSwatchButton::secondaryColor
    Return the button's optional secondary color.  The secondary color isn't
    modified using this button's UI and is there for visual comparison only.

::`setSecondaryColor(self, color)`:
    #cppname: HOM_qt_ColorSwatchButton::setSecondaryColor
    Set the button's secondary color.

    `color`:
        `QtGui.QColor` object of the desired color.

::`secondaryColorPosition(self)` -> [Hom:hou.qt.ColorSwatchButton#Position]:
    #cppname: HOM_qt_ColorSwatchButton::secondaryColor
    Return the position of the button's optional secondary color.

::`setSecondaryColorPosition(self, color)`:
    #cppname: HOM_qt_ColorSwatchButton::setSecondaryColor
    Set the position of the button's secondary color.

    `position`:
        [Hom:hou.qt.ColorSwatchButton#Position] object of the desired color.


@examples

This example demonstrates creating a color swatch button and hooking
it to a callback function that is invoked when the color changes
in the Houdini color picker dialog:
{{{
#!python

def onColorSelected(color):
    print("Selected color:", color)

color_chooser_btn = hou.qt.ColorSwatchButton()
color_chooser_btn.setSecondaryColorPosition(color_chooser_btn.PositionBottom)
color_chooser_btn.colorSelected.connect(onColorSelected)
}}}
