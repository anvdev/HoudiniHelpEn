= hou.VopNodeType =
#type: homclass
#cppname: HOM_VopNodeType
#superclass: hou.NodeType
#group: utility

"""This kind of NodeType contains extra attributes specific to VOP nodes."""

@methods

::`renderMask(self)` -> `str`:
    #cppname: HOM_VopNodeType::renderMask
    Returns a string with space-separated names of the renderers that this
    VOP type supports.  Note that some VOP types, like the switch VOP,
    return `"*"` to indicate that they support all renderers, while others
    return an empty string to indicate they are not real shaders.

    See [Hom:hou.VopNode#shaderString] for an example.

::`shaderType(self)` -> `[Hom:hou.shaderType] enum value`:
    #cppname: HOM_VopNodeType::shaderType
    Returns the type of shader for this VOP type.  For example, this vop
    type might be a surface shader or a displacement shader.  See
    [Hom:hou.shaderType] for the possible shader types.

    See also [Hom:hou.VopNode#shaderType].

::`inputTags(self, input_name)` -> `dict of string to string`:
    #cppname: HOM_VopNodeType::inputTags
    Returns a dictionary of key-value pairs associated with the given input.
    This dictionary allows attaching arbitrary data to node inputs.

::`outputTags(self, output_name)` -> `dict of string to string`:
    #cppname: HOM_VopNodeType::outputTags
    Returns a dictionary of key-value pairs associated with the given output.
    This dictionary allows attaching arbitrary data to node outputs.

