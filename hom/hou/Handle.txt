= hou.Handle =
#type: homclass
#cppname: HOM_Handle
#group: view

"""Gives access to an handle bound to a viewer state."""

== Overview ==

The `Handle` class lets you manipulate handles bound to [viewer states|/hom/python_states]. 

@methods
::`__init__(self, scene_viewer, name)`:
    #cppname: HOM_Handle::HOM_Handle

    Creates an object for accessing a handle of a given name. [Hom:hou.Handle] is typically used with viewer states, its methods can be called from any python state callbacks -- with one small caveat. 
    Avoid calling methods from the python state constructor, doing so will lead to a runtime error.
    
    `scene_viewer`:
        A [Hom:hou.SceneViewer] object referencing the scene viewer where the handle is going to be used. Exception is thrown if the scene viewer is not compatible.

    `name`:
        A string to identify the handle object. The name corresponds to the handle's name used at binding time. See [Hom:hou.ViewerStateTemplate#bindHandle] or 
        [Hom:hou.ViewerStateTemplate#bindStaticHandle] for details.

    {{{
    #!python
    class MyState(object):
        def __init__(self, state_name, scene_viewer):
            self.state_name = state_name
            self.scene_viewer = scene_viewer
            self.handle = hou.Handle(scene_viewer, "Transform")

    # Create a template to describe the state and its bindings
    template = hou.ViewerStateTemplate("mystate", "My Custom State", hou.sopNodeTypeCategory())
    template.bindFactory(MyState)
    template.bindHandle("xform", "Transform")
    }}}
::`name(self)`: -> `string`
    #cppname: HOM_Handle::name

    The name of this handle.

::`show(self,value)`:
    #cppname: HOM_Drawable::enable

    Shows or hides the handle. 
    
    `value`:
        `Bool` value, `True` to show the handle, `False` to hide it.

::`type(self)`: -> `string`
    #cppname: HOM_Handle::type

    Returns the type name of the handle. The return value corresponds to the type used for binding the handle. See [Hom:hou.ViewerStateTemplate#bindHandle] or 
    [Hom:hou.ViewerStateTemplate#bindStaticHandle] for details.

::`update(self)`:
    #cppname: HOM_Handle::update

    This method forces the handle to update. Useful if a change made to a viewer state requires one of its handle to get updated. For [dynamic handles|/hom/state_handles#dynamic-handles], this will trigger a call to the `onStateToHandle` callback, allowing the viewer state to update the proper handle parameter(s).


::`visible(self)`: -> `bool`
    #cppname: HOM_Handle::visible

    Returns `True` if the handle is visible, `False` otherwise.