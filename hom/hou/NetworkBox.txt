= hou.NetworkBox =
#type: homclass
#cppname: HOM_NetworkBox
#superclass: hou.NetworkMovableItem
#group: organize

"""Represents a network box."""

To create a network box, use the [Hom:hou.Node#createNetworkBox] method on
the node inside which you want to create the box. To get an existing
network box, use the [Hom:hou.Node#findNetworkBox] method on the node
containing the network box. To get a list of all network boxes in a network,
use the [Hom:hou.Node#networkBoxes] method on the containing node.

@methods

::`addItem(self, item)`:
    #cppname: HOM_NetworkBox::addItem
    Adds a [Hom:hou.NetworkMovableItem] of any kind to the network box.

::`addNetworkBox(self, netbox)`:
    #cppname: HOM_NetworkBox::addNetworkBox
    Adds a [Hom:hou.NetworkDot] to the network box.
    This method is deprecated. Use [Hom:hou.NetworkBox#addItem] instead.

::`addNode(self, node)`:
    #cppname: HOM_NetworkBox::addNode
    Adds a [Hom:hou.Node] to the network box.
    This method is deprecated. Use [Hom:hou.NetworkBox#addItem] instead.

::`addStickyNote(self, stickynote)`:
    #cppname: HOM_NetworkBox::addStickyNote
    Adds a [Hom:hou.StickyNote] to the network box.
    This method is deprecated. Use [Hom:hou.NetworkBox#addItem] instead.

::`addSubnetIndirectInput(self, indirect)`:
    #cppname: HOM_NetworkBox::addSubnetIndirectInput
    Adds a [Hom:hou.SubnetIndirectInput] to the network box.
    This method is deprecated. Use [Hom:hou.NetworkBox#addItem] instead.

::`asCode(self, brief=False, recurse=False, save_box_contents=False, save_channels_only=False, save_creation_commands=False, save_keys_in_frames=False, save_parm_values_only=False, save_spare_parms=False, function_name=None) -> string`:
    #cppname: HOM_NetworkBox::asCode
    Prints the Python code necessary to recreate a network box.

    See [Hom:hou.Node#asCode] for information on the keyword arguments.

::`autoFit(self)` -> `bool`:
    #cppname: HOM_NetworkBox::autoFit
    Returns the value of the auto fit flag on this network box.

::`comment(self)` -> `str`:
    #cppname: HOM_NetworkBox::comment
    Returns the comment for this network box.

::`destroy(self, destroy_contents=False)`:
    #cppname: HOM_NetworkBox::destroy
    Remove and delete the network box, optionally deleting the nodes it
    contains.

::`fitAroundContents(self)`:
    #cppname: HOM_NetworkBox::fitAroundContents
    Resizes the network box to fit its contents.

::`isMinimized(self)` -> `bool`:
    #cppname: HOM_NetworkBox::isMinimized
    Returns whether the network box is minimized.

::`items(self, recurse=True)` -> `tuple` of [Hom:hou.NetworkMovableItem]:
    #cppname: HOM_NetworkBox::items
    Returns the items of any type inside the network box.

    recurse:
        If True, recurses down into nested network boxes.

::`minimizedSize(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_NetworkBox::minimizedSize

    Return the size of this item's tile in the network editor graph if it is
    minimized. Returned as a `Vector2`.

::`nodes(self, recurse=True)` -> `tuple` of [Hom:hou.Node]:
    #cppname: HOM_NetworkBox::nodes
    Returns the nodes inside the network box.

    recurse:
        If True, recurses down into nested network boxes.

::`networkBoxes(self, recurse=True)` -> `tuple` of [Hom:hou.NetworkBox]:
    #cppname: HOM_NetworkBox::networkBoxes
    Returns the network boxes inside the network box.

    recurse:
        If True, recurses down into nested network boxes.

::`removeAllItems(self)`:
    #cppname: HOM_NetworkBox::removeAllItems
    Removes all items from the network box.

::`removeAllNodes(self)`:
    #cppname: HOM_NetworkBox::removeAllNodes
    Removes all nodes from the network box.
    This method if deprecated. Use [Hom:hou.NetworkBox#removaAllItems] or
    [Hom:hou.NetworkBox#removeItems] instead.

::`removeItem(self, item)`:
    #cppname: HOM_NetworkBox::removeItem
    Removes the given item from the network box.

::`removeNetworkBox(self, netbox)`:
    #cppname: HOM_NetworkBox::removeNetworkBox
    Removes the given network box from the network box.
    This method if deprecated. Use [Hom:hou.NetworkBox#removeItem] instead.

::`removeNode(self, node)`:
    #cppname: HOM_NetworkBox::removeNode
    Removes the given node from the network box.
    This method if deprecated. Use [Hom:hou.NetworkBox#removeItem] instead.

::`removeStickyNote(self, stickynote)`:
    #cppname: HOM_NetworkBox::removeStickyNote
    Removes the given sticky note from the network box.
    This method if deprecated. Use [Hom:hou.NetworkBox#removeItem] instead.

::`removeSubnetIndirectInput(self, indirect)`:
    #cppname: HOM_NetworkBox::removeSubnetIndirectInput
    Removes the given indirect input from the network box.
    This method if deprecated. Use [Hom:hou.NetworkBox#removeItem] instead.

::`resize(self, vector2)`:
    #cppname: HOM_NetworkBox::resize
    Resizes a network box by the increments in the given [Hom:hou.Vector2].
    Use `setSize()` to set the box's absolute size.

::`restoredSize(self)` -> [Hom:hou.Vector2]:
    #cppname: HOM_NetworkBox::restoredSize

    Return the size of this item's tile in the network editor graph if it is
    not minimized. Returned as a `Vector2`.

::`setAutoFit(self, auto_fit)`:
    #cppname: HOM_NetworkBox::setAutoFit
    Set the value of the auto fit flag on this network box. The default value
    is `True` which causes the network box to resize itself when nodes that
    belong to the network box are moved outside the bounds of the box.
    Setting this values to `False` prevents this automatic resizing. The
    Network View will draw the network box around it's contents in any case.
    The default setting of `True` is primarily useful for backward
    compatibility with the old network editor which relies on this
    automatic resizing to draw the network box properly.

::`setBounds(self, bounds)`:
    #cppname: HOM_NetworkBox::setBounds
    Sets the size and position of this network box to the given
    [Hom:hou.BoundingRect] `bounds` parameter. Similar to calling `setSize`
    then `setPosition`, but the contents of the network box are not moved.
    The supplied bounds are expanded if necessary to contain the box's
    children.

::`setComment(self, comment)`:
    #cppname: HOM_NetworkBox::setComment
    Set the comment string for this network box. This comment is visible in
    the network editor and can be used to describe the purpose of the box.

::`setMinimized(self, on)`:
    #cppname: HOM_NetworkBox::setMinimized
    Minimizes or restores the network box.

::`setSize(self, size)`:
    #cppname: HOM_NetworkBox::setSize
    Sets the size of this network box to the given [Hom:hou.Vector2]
    `size` parameter. Use `resize()` to set the box's size relative to
    its current size.

::`stickyNotes(self, recurse=True)` -> `tuple` of [Hom:hou.StickyNote]:
    #cppname: HOM_NetworkBox::stickyNotes
    Returns the sticky notes inside the network box.

    recurse:
        If True, recurses down into nested network boxes.

::`subnetIndirectInputs(self, recurse=True)` -> `tuple` of [Hom:hou.SubnetIndirectInput]:
    #cppname: HOM_NetworkBox::subnetIndirectInputs
    Returns the subnet indirect inputs inside the network box.

    recurse:
        If True, recurses down into nested network boxes.

@replaces

- [Cmd:nbcolor]
- [Cmd:nbget]
- [Cmd:nblocate]
- [Cmd:nbls]
- [Cmd:nblsop]
- [Cmd:nbname]
- [Cmd:nbop]
- [Cmd:nbrm]
- [Cmd:nbset]
- [Cmd:nbsize]
- [Cmd:opscript]


