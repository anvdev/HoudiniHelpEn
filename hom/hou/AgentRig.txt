= hou.AgentRig =
#type: homclass
#cppname: HOM_AgentRig
#group: crowds

"""The rig of an agent primitive."""

See [Crowd Agents|/crowds/agents] for more information.

@methods

::`__init__(filename, keep_external_ref = True)`
    #cppname: HOM_AgentRig::HOM_AgentRig

    Creates a new agent rig by loading it from the specified [JSON file|/crowds/agents#rig].

    Raises [Hom:hou.OperationFailed] if the file does not exist or otherwise cannot be loaded.

    `filename`:
        A path to a JSON file.

    `keep_external_ref`:
        A `bool` indicating whether the external reference should be maintained when the agent is saved to a geometry file.
        If the reference is maintained, then the rig file needs to be available when the saved geometry is used (only the path to the rig file is saved in the geometry file).
        Otherwise, a copy of the rig will be inlined when saving out the geometry so that the original rig file is no longer needed.

::`__init__(name, transform_names, hierarchy)`
    #cppname: HOM_AgentRig::HOM_AgentRig

    Creates a new agent rig from the given transform hierarchy.

    `name`:
        The name of the new rig.

    `transform_names`:
        A sequence of transform names.

    `hierarchy`:
        A sequence of `int` sequences that specifies, for each transform in `transform_names`, the indices of its children in `transform_names`.

    The following example shows how to create a simple rig where transforms "b"
    and "c" are children of transform "a".
    {{{
    #!python
    transforms = ["a", "b", "c"]
    hierarchy = [ [1, 2], [], [] ]
    rig = hou.AgentRig("my_rig", transforms, hierarchy)
    }}}

::`asJSON(self)` -> `str`
    #cppname: HOM_AgentRig::asJSON

    Returns a string containing the JSON that [represents the rig|/crowds/agents#rig].

::`childIndices(self, transform)` -> `tuple` of `int`
    #cppname: HOM_AgentRig::childIndices

    Returns the children of the specified transform.

    `transform`:
        Index of a transform in the rig.

::`fileName(self, expanded = False)` -> `str`
    #cppname: HOM_AgentRig::fileName

    If the rig is an [external reference|Hom:hou.AgentRig#isExternalReference], returns the path to the file on disk.

    `expanded`:
        Specifies whether to expand any variables in the path, such as `$HIP`.

::`findTransform(self, transform_name)` -> `int`
    #cppname: HOM_AgentRig::findTransform

    Returns the index of the transform with the given name, or -1 if the
    transform name is invalid.

    `transform_name`:
        Name of a transform in the rig.

::`isExternalReference(self)` -> `bool`
    #cppname: HOM_AgentRig::isExternalReference

    Returns a `bool` indicating whether the rig [references a file on disk|/crowds/agents#agentdefinition].

::`name(self)` -> `str`
    #cppname: HOM_AgentRig::name

    Returns the name or filename of the rig.

::`parentIndex(self, transform)` -> `int`
    #cppname: HOM_AgentRig::parentIndex

    Returns the parent of the specified transform, or -1 if the transform is a
    root of the transform hierarchy.

    `transform`:
        Index of a transform in the rig.

::`transformCount(self)` -> `int`
    #cppname: HOM_AgentRig::transformCount

    Returns the number of transforms in the rig.

::`transformName(self, transform)` -> `str`
    #cppname: HOM_AgentRig::transformName

    Returns the name of the specified transform.

    `transform`:
        Index of a transform in the rig.
