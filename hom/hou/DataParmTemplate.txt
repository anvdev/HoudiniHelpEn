= hou.DataParmTemplate =
#type: homclass
#cppname: HOM_DataParmTemplate
#superclass: hou.ParmTemplate
#group: parmtemplates

"""Describes a parameter tuple containing data values."""

@methods

::`__init__(self, name, label, num_components, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW, disable_when=None, is_hidden=False, is_label_hidden=False, join_with_next=False, help=None, script_callback=None, script_callback_language=hou.scriptLanguage.Hscript, tags={}, default_expression=(), default_expression_language=())`:
    #cppname: HOM_DataParmTemplate::HOM_DataParmTemplate
    Construct a new DataParmTemplate.

    name:
	See [Hom:hou.ParmTemplate#name] for more information.
    label:
	See [Hom:hou.ParmTemplate#label] for more information.
    num_components:
	See [Hom:hou.ParmTemplate#numComponents] for more information.
    look:
	See [Hom:hou.ParmTemplate#look] for more information.
    naming_scheme:
	See [Hom:hou.ParmTemplate#namingScheme] for more information.
    disable_when:
	See [Hom:hou.ParmTemplate#disableWhen] for more information.
    is_hidden:
	See [Hom:hou.ParmTemplate#isHidden] for more information.
    is_label_hidden:
	See [Hom:hou.ParmTemplate#isLabelHidden] for more information.
    join_with_next:
	See [Hom:hou.ParmTemplate#joinsWithNext] for more information.
    help:
	See [Hom:hou.ParmTemplate#help] for more information.
    script_callback:
	See [Hom:hou.ParmTemplate#scriptCallback] for more information.
    script_callback_language:
	See [Hom:hou.ParmTemplate#scriptCallbackLanguage] for more information.
    tags:
	See [Hom:hou.ParmTemplate#tags] for more information.
    default_expression:
	See the [defaultExpression|Hom:hou.DataParmTemplate#defaultExpression]
	method for more information.
    default_expression_language:
	See the [defaultExpressionLanguage|Hom:hou.DataParmTemplate#defaultExpressionLanguage] method for more information.

::`defaultExpression(self)` -> tuple of strings:
    #cppname: HOM_DataParmTemplate::defaultExpression
    Return the default expression for new parameter instances.

    The default expression takes precedence over the default value.
    If a component has no default expression (i.e. an empty string),
    then the default value is used for new parameter instances.

    Note that the default expression language is needed
    to interpret the meaning of the default expression.

    For example, suppose this parm template is named "t", the naming scheme
    is XYZW, it has 3 components, the default value is (1.0, 2.0, 3.0),
    the default expression is ("$F", "hou.frame()", "") and the default
    expression language is (`hou.scriptLanguage.Hscript`,
    `hou.scriptLanguage.Python`, `hou.scriptLanguage.Hscript`).
    Then the corresponding parm tuple instance on a node would be named "t"
    and would contain parameters "tx", "ty", "tz".  When the node is created,
    "tx" would have a default Hscript expression of "$F", "ty" would have
    a default Python expression of "hou.frame()", and "tz" would have a
    default value of 3.0.

::`dataParmType(self)` -> [Hom:hou.dataParmType] enum value:
    #cppname: HOM_DataParmTemplate::dataParmType
    Return the type of this data parameter.  This type determines whether
    the parameter stores geometry data or a JSON map structure.

    See [Hom:hou.dataParmType] for more information.

::`setDataParmType(self, data_parm_type)`:
    #cppname: HOM_DataParmTemplate::setDataType
    Set the type of this data parameter to a [Hom:hou.dataParmType] enum
    value.

    See the `dataParmType` method for more information.

::`setDefaultExpression(self, default_expression)`:
    #cppname: HOM_DataParmTemplate::setDefaultExpression
    Set the default expression for new parameter instances to a sequence 
    of strings.

    See the [Hom:hou.DataParmTemplate#defaultExpression] method 
    for more information.  Note that if the number of strings in the sequence 
    is different from the number of components in the parm template, 
    any extra values will be discarded and any missing
    expressions will become the empty string.

::`defaultExpressionLanguage(self)` -> tuple of [Hom:hou.scriptLanguage]:
    #cppname: HOM_DataParmTemplate::defaultExpressionLanguage
    Return the default expression language for new parameter instances.

    The default expression language only applies if the default expression
    is set.  If the default expression of a component is not set,
    then the expression language is set to [Hom:hou.scriptLanguage#Hscript].

::`setDefaultExpressionLanguage(self, default_expression_language)`:
    #cppname: HOM_DataParmTemplate::setDefaultExpressionLanguage
    Set the default expression language for new parameter instances 
    to a sequence of [Hom:hou.scriptLanguage] values.

    See the `defaultExpressionLanguage` method for more information.  
    Note that if the number of [Hom:hou.scriptLanguage] values in the sequence 
    is different from the number of components in the parm template, 
    any extra values will be discarded and any missing expression languages 
    will become [Hom:hou.scriptLanguage#Hscript].
