= hou.StringParmTemplate =
#type: homclass
#cppname: HOM_StringParmTemplate
#superclass: hou.ParmTemplate
#group: parmtemplates

"""Describes a parameter tuple containing string values.  These values can
be arbitrary strings or references to files or nodes"""

Note that string parameters may also be menu parameters.  String parameters
with menus are different from [Hom:hou.MenuParmTemplate] objects because
menu parm templates evaluate to integers.

@methods

::`__init__(self, name, label, num_components, default_value=(), naming_scheme=hou.parmNamingScheme.Base1, string_type=hou.stringParmType.Regular, file_type=hou.fileType.Any, menu_items=(), menu_labels=(), icon_names=(), item_generator_script=None, item_generator_script_language=None, menu_type=hou.menuType.Normal, disable_when=None, is_hidden=False, is_label_hidden=False, join_with_next=False, help=None, script_callback=None, script_callback_language=hou.scriptLanguage.Hscript, tags={}, default_expression=(), default_expression_language=())`:
    #cppname: HOM_StringParmTemplate::HOM_StringParmTemplate
    Construct a new StringParmTemplate.

    name:
	See [Hom:hou.ParmTemplate#name] for more information.
    label:
	See [Hom:hou.ParmTemplate#label] for more information.
    num_components:
	See [Hom:hou.ParmTemplate#numComponents] for more information.
    default_value:
	See the [defaultValue|Hom:hou.StringParmTemplate#defaultValue] method
	for more information.
    string_type:
	See the [stringType|Hom:hou.StringParmTemplate#stringType] method
	for more information.  This parameter determines whether the parm
	template is for arbitrary strings, node references, or file references.
    file_type:
	See the [fileType|Hom:hou.StringParmTemplate#fileType] method
	for more information.  This parameter determines the file type
        when `string_type` is [Hom:hou.stringParmType#FileReference].
    look:
	See [Hom:hou.ParmTemplate#look] for more information.
    naming_scheme:
	See [Hom:hou.ParmTemplate#namingScheme] for more information.
    menu_items:
	See the [menuItems|Hom:hou.StringParmTemplate#menuItems] method
	for more information.  Note that `num_components` must be `1` if
	menu items are supplied.
    menu_labels:
	See the [menuLabels|Hom:hou.StringParmTemplate#menuLabels] method
	for more information.

	If this parameter is not given, it defaults to the value of
	the `menu_items` parameter.
    icon_names:
	See the [iconNames|Hom:hou.StringParmTemplate#iconNames] method
	for more information.
	
	If this parameter is an empty tuple, the menu will not contain icons.
    item_generator_script:
	See the
	[itemGeneratorScript|Hom:hou.StringParmTemplate#itemGeneratorScript]
	method for more information.  for more information.  Note that
	`num_components` must be `1` if a script is given.
    item_generator_script_language:
	See the
	[itemGeneratorScriptLanguage|Hom:hou.StringParmTemplate#itemGeneratorScriptLanguage]
	method for more information.  If this parameter is `None` it defaults
	to [hou.scriptLanguage.Python|Hom:hou.scriptLanguage].
    menu_type:
	See the [menuType|Hom:hou.StringParmTemplate#menuType] method for more
	information.
    disable_when:
	See [Hom:hou.ParmTemplate#disableWhen] for more information.
    is_hidden:
	See [Hom:hou.ParmTemplate#isHidden] for more information.
    is_label_hidden:
	See [Hom:hou.ParmTemplate#isLabelHidden] for more information.
    join_with_next:
	See [Hom:hou.ParmTemplate#joinsWithNext] for more information.
    help:
	See [Hom:hou.ParmTemplate#help] for more information.
    script_callback:
	See [Hom:hou.ParmTemplate#scriptCallback] for more information.
    script_callback_language:
	See [Hom:hou.ParmTemplate#scriptCallbackLanguage] for more information.
    tags:
	See [Hom:hou.ParmTemplate#tags] for more information.
    default_expression:
	See the [defaultExpression|Hom:hou.StringParmTemplate#defaultExpression]
	method for more information.
    default_expression_language:
	See the [defaultExpressionLanguage|Hom:hou.StringParmTemplate#defaultExpressionLanguage] method for more information.

::`defaultValue(self)` -> tuple of `str`:
    #cppname: HOM_StringParmTemplate::defaultValue
    Return the default value for new parameter instances.

    The number of strings in the return value is the same as the number of
    components in the parm template.

::`setDefaultValue(self, default_value)`:
    #cppname: HOM_StringParmTemplate::setDefaultValue
    Set the default value for new parameter instances to a sequence of strings.

    See the `defaultValue` method for more information.  Note that if the
    number of strings in the sequence is different from the number of
    components in the parm template, any extra values will be discarded and any
    missing values will become the last value in the sequence or an empty
    string if the sequence is empty.

::`defaultExpression(self)` -> tuple of strings:
    #cppname: HOM_StringParmTemplate::defaultExpression
    Return the default expression for new parameter instances.

    The default expression takes precedence over the default value.
    If a component has no default expression (i.e. an empty string),
    then the default value is used for new parameter instances.

    Note that the default expression language is needed
    to interpret the meaning of the default expression.

::`setDefaultExpression(self, default_expression)`:
    #cppname: HOM_StringParmTemplate::setDefaultExpression
    Set the default expression for new parameter instances to a sequence 
    of strings.

    See the [Hom:hou.StringParmTemplate#defaultExpression] method 
    for more information.  Note that if the number of strings in the sequence 
    is different from the number of components in the parm template, 
    any extra values will be discarded and any missing
    expressions will become the empty string.

::`defaultExpressionLanguage(self)` -> tuple of [Hom:hou.scriptLanguage]:
    #cppname: HOM_StringParmTemplate::defaultExpressionLanguage
    Return the default expression language for new parameter instances.

    The default expression language only applies if the default expression
    is set.  If the default expression of a component is not set,
    then the expression language is set to [Hom:hou.scriptLanguage#Hscript].

::`setDefaultExpressionLanguage(self, default_expression_language)`:
    #cppname: HOM_StringParmTemplate::setDefaultExpressionLanguage
    Set the default expression language for new parameter instances 
    to a sequence of [Hom:hou.scriptLanguage] values.

    See the `defaultExpressionLanguage` method for more information.  
    Note that if the number of [Hom:hou.scriptLanguage] values in the sequence 
    is different from the number of components in the parm template, 
    any extra values will be discarded and any missing expression languages 
    will become [Hom:hou.scriptLanguage#Hscript].

::`stringType(self)` -> [Hom:hou.stringParmType] enum value:
    #cppname: HOM_StringParmTemplate::stringType
    Return the type of this string parameter.  This type determines whether
    the parameter has special selection controls to choose a file path or
    the paths to one or more nodes.

    See [Hom:hou.stringParmType] for more information.

::`setStringType(self, string_type)`:
    #cppname: HOM_StringParmTemplate::setStringType
    Set the type of this string parameter to a [Hom:hou.stringParmType] enum
    value.

    See the `stringType` method for more information.

::`fileType(self)` -> [Hom:hou.fileType] enum value:
    #cppname: HOM_StringParmTemplate::fileType
    Return the file type of this string parameter.  The file type applies
    only when stringType() == [Hom:hou.stringParmType#FileReference].  Only
    [Hom:hou.fileType#Any], [Hom:hou.fileType#Image], and
    [Hom:hou.fileType#Geometry] are supported by dialog scripts.

    See [Hom:hou.fileType] for more information.

::`setFileType(self, file_type)`:
    #cppname: HOM_StringParmTemplate::setFileType
    Set the type of this string parameter to a [Hom:hou.fileType] enum
    value.

    See the `fileType` method for more information.

::`menuItems(self)` -> `tuple` of `str`:
    #cppname: HOM_StringParmTemplate::menuItems
    Return the tuple of internal menu names.  If this string does not use a
    menu, returns an empty tuple.

    These internal menu names are not displayed in the UI, but they can be
    passed to [Hom:hou.Parm#set] and will be returned by 
    [Hom:hou.Parm#evalAsString] for menu parameters.

::`setMenuItems(self, menu_items)`:
    #cppname: HOM_StringParmTemplate::setMenuItems
    Set the internal menu names to the given sequence of strings.

    See the [menuItems|Hom:hou.StringParmTemplate#menuItems] method for more
    information.

    If the new number of menu items is less than the old number, the menu
    labels will be shortened and the default value will be modified if it is
    out of range.

::`menuLabels(self)` -> `tuple` of `str`:
    #cppname: HOM_StringParmTemplate::menuLabels
    Return the tuple of menu labels displayed in the UI.  These labels are
    used when this parm template uses a menu.

::`menuLabels(self)` -> `tuple` of `str`:
    #cppname: HOM_StringParmTemplate::menuLabels
    Return the tuple of menu labels displayed in the UI.

::`iconNames(self)` -> `tuple` of `str`:
    #cppname: HOM_StringParmTemplate::iconNames
    Return the tuple of icons corresponding to the menu items.
    If there are no icons, returns a tuple of empty strings.

    These icons are used when this parm template uses a menu.

::`setIconNames(self, icon_names)`:
    #cppname: HOM_StringParmTemplate::setIconNames
    Set the icon names to the given sequence of strings.

::`itemGeneratorScript(self)` -> `str`:
    #cppname: HOM_StringParmTemplate::itemGeneratorScript
    Return the script used to generate menu items, or an empty string if
    there is no such script.

    This script is used when this parm template uses a menu.

    Note that if the item generator script language is
    [hou.scriptLanguage.Python|Hom:hou.scriptLanguage], this script may be
    either a single-line Python expression or a multi-line body of a Python
    function.

::`setItemGeneratorScript(self, item_generator_script)`:
    #cppname: HOM_StringParmTemplate::setItemGeneratorScript
    Set the script used to generate menu items.

    See the `itemGeneratorScript` method for more information.

::`itemGeneratorScriptLanguage(self)` -> [Hom:hou.scriptLanguage] enum value:
    #cppname: HOM_StringParmTemplate::itemGeneratorScript
    Return the script used to generate menu items, or an empty string if
    there is no such script.

::`setItemGeneratorScriptLanguage(self, language)`:
    #cppname: HOM_StringParmTemplate::setItemGeneratorScriptLanguage
    Set the script language used to generate menu items to a
    [Hom:hou.scriptLanguage] enum value.

    See the `itemGeneratorScriptLanguage` method for more information.

::`menuType(self)` -> [Hom:hou.menuType] enum value:
    #cppname: HOM_StringParmTemplate::menuType
    Return the type of menu.  See [Hom:hou.menuType] for more information.

::`setMenuType(self, menu_type)`:
    #cppname: HOM_StringParmTemplate::setMenuType
    Set the type of menu to a [Hom:hou.menuType] enum value.

    See the `menuType` method for more information.

