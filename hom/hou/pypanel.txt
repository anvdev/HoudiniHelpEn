= hou.pypanel =
#type: hommodule
#cppname: HOM_pypanel
#group: ui

"""Module containing functions related to Python panels."""

@functions

::`installFile(file_path)`:
    #cppname: HOM_pypanel::installFile
    Install all the Python Panel interfaces defined in the given .pypanel file
    into the current Houdini session.

    file_path:
	The .pypanel file to load.

::`interfaceByName(name)` -> [Hom:hou.PythonPanelInterface]:
    #cppname: HOM_pypanel::interfaceByName
    Return the Python Panel interface definition that corresponds to the given
    interface name.

    Return None if no such interface definition exists.

::`interfacesInFile(file_path)` -> `tuple` of [Hom:hou.PythonPanelInterface]:
    #cppname: HOM_pypanel::interfacesInFile
    Return all the Python Panel interface definitions inside the given .pypanel
    file.  See [Hom:hou.PythonPanelInterface] for more information.

    Raises [Hom:hou.OperationFailed] if `file_path` does not refer to a valid
    .pypanel file.

::`interfaces()` -> `dict` of `str` to [Hom:hou.PythonPanelInterface]:
    #cppname: HOM_pypanel::interfaces
    Return all the Python Panel interface definitions currently installed. 
    Returns a a dictionary mapping interface names to corresponding 
    [Hom:hou.PythonPanelInterface] instances.

    See [Hom:hou.PythonPanelInterface] for more information.

::`menuInterfaces()` -> `tuple` of `str`:
    #cppname: HOM_pypanel::menuInterfaces
    Return a tuple of the names of the interfaces currently shown
    in the Python Panel drop-down menu.

::`setMenuInterfaces(names)`:
    #cppname: HOM_pypanel::setMenuInterfaces
    Set the Python Panel drop-down menu to the list of interface names.  Note
    that `__separator__` is a valid name to indicate a separator in the list.

    Raises [Hom:hou.OperationFailed] if `names` contains interfaces that are not installed
