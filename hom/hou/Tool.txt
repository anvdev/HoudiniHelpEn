= hou.Tool =
#type: homclass
#cppname: HOM_Tool
#superclass: hou.ShelfElement
#group: shelf

"""Represents a tool on the shelf, encapsulating a script as well as a label,
help, and other information."""

You can't instantiate this object directly, call [Hom:hou.shelves#newTool] instead.


@methods

== General ==

::`destroy(self)`:
    #cppname: HOM_Tool::destroy
    
    Deletes the tool from Houdini session and removes its definition 
    from the file it's stored in.

::`setData(self, script='', language=hou.scriptLanguage.Python, icon='', help='', help_url='', network_categories=(), viewer_categories=(), cop_viewer_categories=(), network_op_type='', viewer_op_type='', locations=())`:
    #cppname: HOM_Tool::setData
    
    Convenience method for setting multiple options at once, rather than
    calling multiple `set` methods.
    Sets various options on the tool based on optional keyword arguments you pass.
    
    {{{
    #!python
    # Get a tool
    t = shelves.tool("geometry_sphere")
    # Set the tool's icon and help URL
    t.setData(icon="SOP_sphere", help_url="tool:sphere")
    }}}


== Help and icon ==

::`setHelp(self, help)`:
    #cppname: HOM_Tool::setHelp
    
    Sets the tool's help text. Houdini will parse this as [wiki text|/help/format]
    and display it in the help viewer when the user requests help for this tool.
    To have the help viewer go to a URL instead, use [setHelpURL|#setHelpURL].

::`help(self)` -> `str`:
    #cppname: HOM_Tool::help
    
    Returns the tool's help text.

::`setHelpURL(self, help_url)`:
    #cppname: HOM_Tool::setHelpURL
    
    Sets a URL the help viewer should go to when the user requests help for this tool.
    If this is not empty, Hoduini will open this URL in the help viewer
    instead of parsing and displaying the contents of `Tool.help()`.

::`helpURL(self)` -> `str`:
    #cppname: HOM_Tool::helpURL
    
    Returns the URL pointing to this tool's help.

::`setIcon(self, icon)`:
    #cppname: HOM_Tool::setIcon
    
    Sets a new icon string for the tool. The string can contain a file path or
    URL pointing to an SVG file or an image file Houdini knows how to load.
    You can use an `opdef:` path to refer to an icon file inside an asset.

::`icon(self)` -> `str`:
    #cppname: HOM_Tool::icon
    
    Returns the tool's icon string.


== Script ==

::`setScript(self, script)`:
    #cppname: HOM_Tool::setScript
    
    Sets the text of the script to run when the user clicks the tool
    in the shelf. See [how to write a tool script|/hom/tool_script]
    for information on the global variables available to the script
    and tips for common tasks.

::`script(self)` -> `str`:
    #cppname: HOM_Tool::script
    
    Returns the text of the script that runs when the user clicks the tool.

::`setLanguage(self, language)`:
    #cppname: HOM_Tool::setLanguage
    
    Sets a new language for the script, where <<language>> is a value from the
    [Hom:hou.scriptLanguage] module (usually `hou.scriptLanguage.Python`).
    
    {{{
    #!python
    t = shelves.tool("tool_1")
    t.setLanguage(hou.scriptLanguage.Hscript)
    t.setScript("message hello")
    }}}
    
    NOTE:
        We *highly* recommend writing scripts in Python rather than Hscript.

::`language(self)` -> [Hom:hou.scriptLanguage] enum value:
    #cppname: HOM_Tool::language
    
    Returns a value representing the language in which the tool script is written.
    
    {{{
    #!pycon
    >>> t = shelves.tool("geometry_sphere")
    >>> t.language() == hou.scriptLanguage.Python
    True
    }}}

== Categorization ==

::`setToolLocations(self, locations)`:
    #cppname: HOM_Tool::setToolLocations
    
    Sets the description of the places that the tool should show up in the UI.
    Eg, a tool could be configured to be included in the network pane's TAB menu
    but not in the viewport pane's TAB menu.

::`setToolMenuCategories(self, pane_type, categories)`:
    #cppname: HOM_Tool::setToolMenuCategories
    
    Set the tool categories. The categories are used to further control the
    visibility of the tool. For example, some tools specify "Mantra" or
    "RenderMan" as keywords, and they show up in the TAB menu only if the
    specified renderer is configured as active in the preferences pane.

::`setToolMenuLocations(self, locations)`:
    #cppname: HOM_Tool::setToolMenuLocations
    #status: ni
    
    Sets the submenus of the TAB menu in which to include the tool.

::`setToolMenuOpType(self, pane_type, op_type)`:
    #cppname: HOM_Tool::setToolMenuOpType
    
    Sets the operator type to be associated with the tool. The tool will
    show up in the TAB menu only if the operator can be created. For example,
    some operator types are scoped only to a particular parent, thus the 
    tool that creates nodes of this type makes sense only inside that parent.

::`toolMenuCategories(self, pane_type)` -> tuple of [Hom:hou.NodeTypeCategory]:
    #cppname: HOM_Tool::toolMenuCategories
    
    Returns the categories specified for the tool.

::`toolMenuLocations(self)` -> tuple of `str`:
    #cppname: HOM_Tool::toolMenuLocations
    
    Returns the submenus of the TAB menu in which the tool is included.

::`toolMenuOpType(self, pane_type)` -> `str`:
    #cppname: HOM_Tool::toolMenuOpType
    
    Returns the operator type associated with this tool.



