= hou.UIEventDevice =
#type: homclass
#cppname: HOM_UIEventDevice
#group: view

"""Object containing methods for testing input-device-specific information on a UI event, such as which mouse button was pressed."""

Do not instantiate this object yourself.
You can get a `UIEventDevice` object from a [Hom:hou.UIEvent] using [Hom:hou.UIEvent#device].
For more information see [Python states|/hom/python_states].


@methods

::`time(self)`: -> double
    #cppname: HOM_UIEventDevice::time
    
    Returns the time in seconds relative to the event.


== Keyboard ==

::`isAltKey(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isAltKey
    
    Returns True if an Alt/Option key was pressed.
    
::`isAutoRepeat(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isAutoRepeat
    
    Returns True if the held key was auto-repeating. 

::`isCapsLock(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isCapsLock
    
    Returns True if the Caps Lock key was pressed.

::`isCtrlKey(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isCtrlKey
    
    Returns True if the Control key was pressed.

::`isKeyPad(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isKeyPad
    
    Returns True if the pressed key was on the number pad.

::`isShiftKey(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isShiftKey
    
    Returns True if the a Shift key was pressed.

::`isArrowDown(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isArrowDown
    
    Returns True if the Down arrow key was pressed.

::`isArrowLeft(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isArrowLeft
    
    Returns True if the Left arrow key was pressed.

::`isArrowRight(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isArrowRight
    
    Returns True if the Right arrow key was pressed.

::`isArrowUp(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isArrowUp
    
    Returns True if the Up arrow key was pressed.

::`isKeyPressed(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isKeyPressed
    
    Returns True if any key is pressed. 

::`keyValue(self)` -> `int`
    #cppname: HOM_UIEventDevice::keyValue
    
    Returns the ascii code for the key being pressed. If modifiers, such as `shift` and `ctrl`, are pressed
    with a key, `keyValue` returns only the ascii code of the key, unlike [Hom:hou.UIEvent#value] which 
    returns the encoded value of the keys combination. 

::`keyString(self)` -> `string`
    #cppname: HOM_UIEventDevice::keyString

    Returns the `string` representation of the key being pressed. The return value can also contain space separated modifier symbols.
    
    Few examples:

    Key(s) pressed ||
        Return value ||

    `a` |
        a
    `<cariage return>` |
        CR
    `<tab space>` |
        TAB
    `<back space>` |
        BS
    `<esc>` |
        ESC
    `<ctrl-space>` |
        ctrl SP
    `<shft-a>` |
        shift a
    `<ctrl-shift-a>` |
        ctrl shift a
    `<alt-ctrl-a>` |
        alt ctrl a    

::`modifierString(self)` -> `string`
    #cppname: HOM_UIEventDevice::modifierString

    Returns the `string` representation of the modifier keys being pressed. 
    
    The return value contain only modifier symbols, the key pressed is ignored.

    Few examples:

    Key(s) pressed ||
        Return value ||

    `<shift>` |
        shift
    `<ctrl shift>` |
        ctrl shift
    `<alt shift>` |
        alt shift

== Mouse ==

::`isLeftButton(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isLeftButton
    
    Returns True if the ((LMB)) left mouse button was pressed.

::`isMiddleButton(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isMiddleButton
    
    Returns True if the ((MMB)) middle mouse button was pressed.

::`isRightButton(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isRightButton
    
    Returns True if the ((RMB)) right mouse button was pressed.

::`mouseX(self)` -> int
    #cppname: HOM_UIEventDevice::mouseX
    
    Returns the horizontal mouse position in screen coordinates, counting from the left edge of the view.

::`mouseY(self)` -> int
    #cppname: HOM_UIEventDevice::mouseY
    
    Returns the vertical mouse position in screen coordinates, counting from the bottom edge of the view.


== Mouse wheel ==

NOTE:
    This API does not currently support scroll axes other than vertical.

::`mouseWheel(self)` -> int
    #cppname: HOM_UIEventDevice::mouseWheel
    
    The result is negative if the wheel was rotated up and positive if it was rotated down.

    Different mice will produce different outputs:

    * Mice with "clicky" wheels will generally output a `-1` or `+1` event for each click (at least that is the intention).

    * Mice with "free spinning" wheels, or touch sensitive surfaces (such as the Apple Magic Mouse), will produce a wider range of values. Small/slow scrolling might trigger a mouse wheel event but this method returns `0`, whereas big/fast scrolling can produce higher numbers for each event, up to around `7`, with the numbers increasing as the user "throws" the wheel and decreasing as it slows.


== Tablet ==

Note that some tablet hardware may not support providing all the following data.

::`isTablet(self)` -> `bool`
    #cppname: HOM_UIEventDevice::isTablet
    
    Returns True if the event was generated by a tablet stylus.

::`tabletAngle(self)` -> double
    #cppname: HOM_UIEventDevice::tabletAngle
    
    Returns tablet stylus angle value.

::`tabletPressure(self)` -> double
    #cppname: HOM_UIEventDevice::tabletPressure
    
    Returns the tablet pressure value.

::`tabletRoll(self)` -> double
    #cppname: HOM_UIEventDevice::tabletRoll
    
    Returns the tablet stylus roll value.

::`tabletTilt(self)` -> double
    #cppname: HOM_UIEventDevice::tabletTilt
    
    Returns the tablet stylus tilt value.
    
