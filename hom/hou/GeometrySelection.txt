= hou.GeometrySelection =
#type: homclass
#cppname: HOM_GeometrySelection
#group: view

"""Represents a component selection performed by the user in a viewport."""

Calling [Hom:hou.SceneViewer#selectGeometry] waits for the user to perform a
selection in the viewport, and returns an object of this type representing
the elected components. The returned selection can be manipulated by
converting it to a specific component type, grown, or shrunk. Then the
selection can be converted to a string that can be used in a
[SOP node|Hom:hou.SopNode] group [parameter|Hom:hou.Parm].

If the selection contains components from more than one SOP, you can use the
[Hom:hou.GeometrySelection#mergedNode] function to create a Merge SOP and/or
Object Merge SOPs that brings all the referenced geometry into a single node.

@methods

::`connectivity(self) -> hou.connectivityType enum value`:
    #cppname: HOM_GeometrySelection::connectivity
    Returns the [Hom:hou.connectivityType] that has been set on this geometry
    selection. Unless you call [Hom:hou.GeometrySelection#setConnectivity],
    this function will return the no connectivity value.

::`geometryType(self) -> hou.geometryType enum value`:
    #cppname: HOM_GeometrySelection::geometryType
    Returns the type of component that was selected.

::`mergedNode(self, parent, creator_name, force_keep_original_objects=False, display_original_objects=False) -> Node`:
    #cppname: HOM_GeometrySelection::mergedNode
    Creates a Merge SOP that combines all the SOPs referenced by the
    selection. Most selections will only reference a single SOP in which
    case no Merge SOP is required, and the selected SOP will be returned.

::`mergedSelectionString(self, empty_string_selects_all=True, force_numeric=False) -> string`:
    #cppname: HOM_GeometrySelection::mergedSelectionString
    Returns a single string that can be used in group parameters of the
    merged node returned by [Hom:hou.GeometrySelection#mergedNode]. If all
    components are selected from a single node this is equivalent to the
    first string in the tuple returned by
    [Hom:hou.GeometrySelection#selectionStrings].

::`shrinkSelection(checkuv = true)`:
    #cppname: HOM_GeometrySelection::shrinkSelection
    Removes components that are on the boundary of the selection.

::`growSelection()`:
    #cppname: HOM_GeometrySelection::growSelection
    Expands the selection by adding all components that are connected to
    components currently in the selection.

::`needsMergedNode(self, parent) -> bool`:
    #cppname: HOM_GeometrySelection::needsMergedNode
    Returns true if a Merge SOP needs to be created in order to access all
    components in the selection.

::`nodes(self) -> tuple of Nodes`:
    #cppname: HOM_GeometrySelection::nodes
    Returns a tuple of all nodes referenced by the selection.

::`ordered(self) -> bool`:
    #cppname: HOM_GeometrySelection::ordered
    Returns true if this is an ordered selection. This means that the order
    in which the user selected the components is preserved. To have an
    ordered selection, the `ordered` parameter needs to have been set to
    True when calling [Hom:hou.SceneViewer#geometrySelection].

::`primitiveTypes(self) -> tuple of hou.primitiveType enum values`:
    #cppname: HOM_GeometrySelection::primitiveTypes
    Returns a tuple containing all [primitive types|Hom:hou.primitiveType]
    that are contained in the selection.

::`selections(self) -> tuple of [Hom:hou.Selection]`:
    #cppname: HOM_GeometrySelection::selections
    Returns a tuple of component selection objects. These correspond to the
    nodes returned by the nodes function.

::`selectionStrings(self, empty_string_selects_all=True, bool force_numeric=False) -> tuple of strings`:
    #cppname: HOM_GeometrySelection::selectionStrings
    Returns a tuple of strings that can be used to refer to the selected
    components in each SOP node referenced by the selection.

::`setConnectivity(self, connectivity)`:
    #cppname: HOM_GeometrySelection::setConnectivity
    Sets the type of connectivity to enforce when modifying the selection.
    The current selection is also expanded so that all connected components
    (using the supplied style of connectivity) become part of the selection.

::`setGeometryType(self, type)`:
    #cppname: HOM_GeometrySelection::setGeometryType
    Changes the type of component contained in the selection, converting the
    existing selection to the new component type.

::`setPrimitiveTypes(self, primitive_types)`:
    #cppname: HOM_GeometrySelection::setPrimitiveTypes
    Sets the tuple of primitive types allowed in the selection. Any primitives
    that are not of an allowed type are removed from the selection. Only has
    an effect if this is a primitive selection.

