= hou.FolderParmTemplate =
#type: homclass
#cppname: HOM_FolderParmTemplate
#superclass: hou.ParmTemplate
#group: parmtemplates

"""Describes a folder in a parameter dialog."""

Unlike all other [Hom:hou.ParmTemplate] subclasses, a folder does not
correspond to an individual [Hom:hou.ParmTuple].  Instead, the set of adjacent
folders form a folder set, and there is one parameter for this set that
controls which folder is currently visible.  These folder sets correspond to
[Hom:hou.FolderSetParmTemplate] objects.

Folder parm template objects are useful when manipulating the parameter
interface of a node or a digital asset definition.  Unlike folder set
parm templates, they contain the parm templates inside the folder.  They also
let you add, remove, or hide an individual folder or move it from set one to
another using [Hom:hou.ParmTemplateGroup] objects.  Doing these individual
folder-level operations is not possible with folder set parm templates.

Note that folder parm templates are also used to represent multiparm blocks,
much like the <<Type Properties>> dialog does.  The folder parm template's
[Hom:hou.folderType] determines whether it is a folder or a multiparm block.  
Unlike folder parm templates, which do not correspond directly to parameter
instances, a multiparm parm template does correspond to an integer parameter
that controls the number of instances of the multiparm.

@methods

::`__init__(name, label, parm_templates=(), folder_type=hou.folderType.Tabs, is_hidden=False, ends_tab_group=False, tags={}, conditionals={}, tab_conditionals={})`:
    #cppname: HOM_FolderParmTemplate::HOM_FolderParmTemplate
    Create a new folder parm template.

    `name`:
        The internal name of the parm template.  Normally, parm template names
        correspond directly to parm tuples on nodes.  However, because folder
        sets, not folders, correspond directly to parm tuples, the name used
        for the folder set parm tuple is the name of the first folder parm
        template in the set of adjacent folder parm templates.

    `label`:
        The name of the folder that is displayed in the parameter dialog.

    `parm_templates`:
        A sequence of [Hom:hou.ParmTemplate] subclass objects for the
        parameters inside the folder.  Folders may be nested in other folders
        by putting FolderParmTemplates in this sequence.

    `folder_type`:
        A [Hom:hou.folderType] enumerated value controlling whether the
        parameter is a folder or a multiparm block.  This value controls the
        look of the folder/multiparm instance.

    `is_hidden`:
        Whether or not this folder is hidden.

    `ends_tab_group`:
        If `True`, this folder will be the last in the folder set, even if
        the next parameter is also a folder.  In that case, the next parameter
        will begin a new folder set.

    `tags`:
        A dictionary of extra information attached to the parm template.

    `conditionals`:
	A dictionary that specifies conditionals (i.e. disable when, hide when)
	on the parameter template.  For folder tab parameters these
	conditionals affect the entire folder set.

	The dictionary maps [Hom:hou.parmCondType] types to conditional strings.

	See the [Conditionals|/ref/windows/optype#conditionals] section of the
	<<Operator Type Properties window>> help for more information on
	conditional strings.

    `tab_conditionals`:
	A dictionary that specifies conditionals (i.e. disable when, hide when)
	on the parameter template.  These conditionals affect only the folder
	tab generated by this parameter template and not the entire
	folder set.

	The dictionary maps [Hom:hou.parmCondType] types to conditional strings.

	See the [Conditionals|/ref/windows/optype#conditionals] section of the
	<<Operator Type Properties window>> help for more information on
	conditional strings.

	[Hom:hou.OperationFailed] is raised if tab conditionals are specified
	for multi-parameter templates or import blocks.

::`parmTemplates(self)` -> tuple of [Hom:hou.ParmTemplate]:
    #cppname: HOM_FolderParmTemplate::parmTemplates
    Return a tuple of copies of the parm templates stored inside this folder.

    Because copies are returned, you cannot change the contents of the
    parm templates inside this folder by modifying the parm templates returned.
    Instead, use methods in [Hom:hou.ParmTemplateGroup] to modify parm
    templates in this folder.

::`addParmTemplate(self, parm_template)`:
    #cppname: HOM_FolderParmTemplate::addParmTemplate
    Append a parm template to the end of the list of parm templates inside
    the folder.

    Note that [Hom:hou.ParmTemplateGroup] provides a number of methods to
    insert parm templates inside folders, including
    [Hom:hou.ParmTemplateGroup#appendToFolder].

::`setParmTemplates(self, parm_templates)`:
    #cppname: HOM_FolderParmTemplate::setParmTemplates
    Replace the parm templates inside this folder with a new sequence of parm
    templates.

::`folderType(self)` -> [Hom:hou.folderType] enum value:
    #cppname: HOM_FolderParmTemplate::folderType
    Return the type of folder.  Note that the folder may actually be a
    multiparm block.

::`setFolderType(self, folder_type)`:
    #cppname: HOM_FolderParmTemplate::setFolderType
    Set the type of folder to a [Hom:hou.folderType] enum value.

::`isActualFolder(self)` -> `bool`:
    #cppname: HOM_FolderParmTemplate::isActualFolder
    Return whether or not this parm template corresponds to an actual folder,
    as opposed to a multiparm or import block.

    This method can be implemented as follows:
    {{{
    #!python
    def isActualFolder(self):
        return self.folderType() in (
            hou.folderType.Tabs, hou.folderType.RadioButtons)
    }}}

::`defaultValue(self)` -> `int`:
    #cppname: HOM_FolderParmTemplate::defaultValue
    Return the integer default value.

    The default value is only used for folders that are multiparm blocks, and
    controls the default number of multiparm instances in newly created nodes.

::`setDefaultValue(self, tuple_of_default_values)`:
    #cppname: HOM_FolderParmTemplate::setDefaultValue
    Set the default value to an integer.

    The default value is only used for folders that are multiparm blocks.  See
    the [defaultValue|Hom:hou.FolderParmTemplate#defaultValue] method for more
    information.

::`tabConditionals(self)` -> `dict of [Hom:hou.parmCondType] enum value to string`:
    #cppname: HOM_ParmTemplate::tabConditionals
    Returns the set of conditionals that affect the folder tab generated
    by this parameter template.  The conditionals correspond to the 
    `Tab disable when` and `Tab hide when` properties that appear 
    Edit Parameter Interface window for folder parameters.
    
    See the [Conditionals|/ref/windows/optype#conditionals] section of the
    <<Operator Type Properties window>> help for more information on
    conditional strings.

    This method returns an empty dictionary if this parameter template
    is for a multi-parameter or import block.

::`setTabConditional(self, type, conditional)`:
    #cppname: HOM_ParmTemplate::setTabConditional
    Set a conditional string of the given [Hom:hou.parmCondType] type 
    that affects the folder tab generated by this parameter template.
    The string consists of rules on how this parameter's folder tab's display 
    behaves when other parameters change. 
    
    See the [Conditionals|/ref/windows/optype#conditionals] section of the
    <<Operator Type Properties window>> help for more information on 
    conditional strings.

    Raises [Hom:hou.OperationFailed] if this parameter template is
    for a multi-parameter or import block.

::`endsTabGroup(self)` -> `bool`:
    #cppname: HOM_FolderParmTemplate::endsTabGroup
    Return whether this folder will be the last in the folder set, even if
    the next parameter is also a folder.  In that case, the next parameter
    will begin a new folder set.

    This parameter only has meaning if the parm template is for an actual
    folder and not for a multiparm block.

