= hou.UIEvent =
#type: homclass
#cppname: HOM_UIEvent
#group: view

"""Represents a user interface event, such as a mouse press. You can access this object in an event handler to respond to user input."""

`hou.UIEvent` provides information to interact with user input and is used with [Python states|/hom/python_states]. You do not instantiate this type of object yourself. 

@related 
    [Hom:hou.ViewerEvent]

@methods

::`device(self)` -> [Hom:hou.UIEventDevice]
    #cppname: HOM_UIEvent::device
    
    Returns an object containing input-device-specific event data.
    For example, if this is a mouse click event, you can use `event.device().mouseX()` to get the X coordinate in screen space, and `event.device().isLeftButton()` to check whether the left mouse button was pressed.
    
    {{{
    #!python
    if ui_event.device().isLeftButton():
        ...
    }}}

::`hasQueuedEvents(self)` -> `bool`
    #cppname: HOM_UIEvent::hasQueuedEvents
    
    Returns true if this event contains queued device events.

::`queuedEvents(self)` -> `list` of [Hom:hou.UIEventDevice]
    #cppname: HOM_UIEvent::queuedEvents
    
    If [Hom:hou.UIEvent#hasQueuedEvents] returns True, this method returns the list of queued input device events.

::`value(self)` -> obj
    #cppname: HOM_UIEvent::value
    
    Returns the `value` payload of this event. You can tell the type of this value by calling [Hom:hou.UIEvent#valueType].

::`valueType(self)` -> [Hom:hou.uiEventValueType]
    #cppname: HOM_UIEvent::state
    
    Returns an [enum value|Hom:hou.uiEventValueType] corresponding to the event value's type, or `hou.uiEventValueType.NoType` if the event contains no single scalar value.

::`reason(self)` -> [Hom:hou.uiEventReason]
    #cppname: HOM_UIEvent::reason
    
    For events related to state changes, returns an [enum value|Hom:hou.uiEventReason] representing the type of state change that triggered the event.


