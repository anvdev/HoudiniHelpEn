= hou.TopNode =
#type: homclass
#cppname: HOM_TopNode
#superclass: hou.Node
#group: nodes

"""Represents a task node."""

@methods

::`bypass(self, on)`:
    #cppname: HOM_TopNode::bypass

    Turns this node's bypass flag on or off, making this node have no effect.

::`displayNode(self)` -> Node:
    #cppname: HOM_TopNode::displayNode

    If this is a subnet TOP, return the TOP node inside the subnet with its
    display flag on. Otherwise, return None.

::`isBypassed(self)` -> `bool`:
    #cppname: HOM_TopNode::isBypassed

    Returns whether this node's bypass flag is on.

::`isDisplayFlagSet(self)` -> `bool`:
    #cppname: HOM_TopNode::isDisplayFlagSet

    Returns whether this node's display flag is on.

::`isRenderFlagSet(self)` -> `bool`:
    #cppname: HOM_TopNode::isRenderFlagSet

    Returns whether this node's render flag is on.

::`renderNode(self)` -> Node:
    #cppname: HOM_TopNode::renderNode

    If this is a subnet TOP, return the TOP node inside the subnet with its
    render flag on. Otherwise, return None.

::`setDisplayFlag(self, on)`:
    #cppname: HOM_TopNode::setDisplayFlag

    Turn this node's display flag on or off.

::`setRenderFlag(self, on)`:
    #cppname: HOM_TopNode::setRenderFlag

    Turns this node's render flag on or off.

::`executeGraph(self, filter_static, block, generate_only, tops_only)`:
    #cppname: HOM_TopNode::executeGraph

    Generates and then cooks the PDG graph owned by the parent network of this node.

    `filter_static`:
        If True, then the graph will be executed with respect to the static work items stored by the TOP Network filter.

    `block`:
        If True, the call will not return until the cook is complete.

    `generate_only`:
        If True, only the generation phase of the cook will be done.

    `tops_only`:
	If True, TOP nodes will be cooked and schedulers will be initialized. No PDG cooking will occur, and no work items will be generated.

::`generateStaticItems(self, block)`:
    #cppname: HOM_TopNode::generateStaticItems

    Generates static work items on the PDG graph owned by the parent
    network of this node.

    `block`:
	If True, the call will not return until work item generation
	is complete.

::`dirtyAllTasks(self, remove_outputs)`:
    #cppname: HOM_TopNode::dirtyAllTasks

    Dirties all the tasks in a PDG graph so that when the graph
    cooks again, it will cause a complete recook. 

    `remove_outputs`:
        If True, then it will also delete all generated file results from disk.

::`dirtyTasks(self, remove_outputs)`:
    #cppname: HOM_TopNode::dirty

    Dirties the node, removing all work items. 

    `remove_outputs`:
        If True, then it will also delete the node's generated file results from disk.

::`graphCommands(self)` -> `str`:
    #cppname: HOM_TopNode::graphCommands

    Returns a string containing python commands require to construct the
    PDG graph owned by the parent network of this node.

::`taskGraphCommands(self)` -> `str`:
    #cppname: HOM_TopNode::taskGraphCommands

    Returns a string containing python commands require to construct the
    PDG task graph owned by the parent network of this node.

::`getPDGGraphContextName(self)` -> `str`:
    #cppname: HOM_TopNode::getPDGGraphContextName

    Returns a string containing the name of the graph context owned by
    the parent network of this node.

::`getPDGGraphContext(self)` -> 'pdg.GraphContext`
    #cppname: HOM_TopNode::getPDGGraphContext

    Returns the PDG graph context associated with thie TOP node.

::`getPDGNodeName(self)` -> `str`:
    #cppname: HOM_TopNode::getPDGNodeName

    Returns the name of the PDG node owned by this node.

::`getPDGNode(self)` -> `pdg.Node`:
    #cppname: HOM_TopNode::getPDGNode

    Returns the PDG node associated with this TOP node.

::`getWorkItemName(self, idx)` -> `str`:
    #cppname: HOM_TopNode::getWorkItemName

    Returns the name of the work item with the given index.

::`setSelectedWorkItem(self, idx)`:
    #cppname: HOM_TopNode::setSelectedWorkItem

    Sets the selected work item in this TOP Network to be the work item
    with the given index.

::`getSelectedWorkItem(self)` -> `int`:
    #cppname: HOM_TopNode::getSelectedWorkItem

    Returns the index of the current selected work item in this TOP Network.

::`addPDGFilter(self, idx)`:
    #cppname: HOM_TopNode::addPDGFilter

    Adds the static work item with the given index to the filter.

::`removePDGFilter(self, idx)`:
    #cppname: HOM_TopNode::addPDGFilter

    Removes the static work item with the given index from the filter.

::`isPDGFilter(self, idx)` -> `bool`:
    #cppname: HOM_TopNode::addPDGFilter

    Returns true if the static  work item with the given index part if the
    filter.

::`enablePDGFilter(self, filter_on)`:
    #cppname: HOM_TopNode::enablePDGFilter

    Sets the node's TOP network to use the current static task filter.

::`isScheduler(self)` - > `bool`:
    #cppname: HOM_TopNode::isScheduler

    Returns true if the TOP node is a scheduler.

::`isMapper(self)` - > `bool`:
    #cppname: HOM_TopNode::isMapper

    Returns true if the TOP node is a mapper.

::`isProcessor(self)` -> `bool`:
    #cppname: HOM_TopNode::isProcessor

    Returns true if the TOP node is a processor.

::`isPartitioner(self)` -> `bool`:
    #cppname: HOM_TopNode::isPartitioner

    Returns true if the TOP node is a partitioner.

::`isFilterOn(self)` -> `bool`:
    #cppname: HOM_TopNode::isFilterOn

    Returns true is this node is currently affected by a work item filter
    set on another node in the network.

::`getFilterNodes(self)` -> `tuple` of [Hom:hou.Node]:
    #cppname: HOM_TopNode::getFilterNodes

    Returns a tuple of all nodes whose filters affect the node.

::`outputDataTypes(self)` -> `tuple` of `str`:
    #cppname: HOM_TopNode::outputDataTypes

    Returns a tuple of the data types for the output ports of this node.


::`inputDataTypes(self)` -> `tuple` of `str`:
    #cppname: HOM_TopNode::inputDataTypes

    Returns a tuple of the data types for the input ports of this node.

::`getCookState(self, force)` -> [Hom:hou.topCookState]:
    #cppname: HOM_TopNode::getState

    Returns the current cook state of the TOP node. If `force` is set to true
    the state is recomputed, otherwise the cached state is returned.
