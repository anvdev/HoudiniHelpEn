= hou.NodeTypeCategory =
#type: homclass
#cppname: HOM_NodeTypeCategory
#group: nodetypes

"""Represents a category of node types, such as surface
nodes (SOPs) or dynamics nodes (DOPs)."""

Use [Hom:hou.nodeTypeCategories] to get a dict of node type category names to
NodeTypeCategory objects.  You can use [Hom:hou.objNodeTypeCategory],
[Hom:hou.sopNodeTypeCategory], etc. to directly access a particular node type
category.

See also [Hom:hou.NodeType] and [Hom:hou.Node].

{{{
#!pycon
# Get the names of all the node type categories.
>>> hou.nodeTypeCategories().keys()
['Shop', 'Cop2', 'CopNet', 'ChopNet', 'Object', 'Driver',
'Chop', 'Sop', 'Manager', 'Vop', 'Director', 'Dop', 'VopNet']
}}}

@methods

::`loadDSO(self, dso_path)`:
    #cppname: HOM_NodeTypeCategory::loadDSO
    Loads the HDK custom operator identified by the given file path for this
    node type category. It will use the HOUDINI_DSO_PATH environment variable
    to find it if necessary.

::`label(self)` -> `str`:
    #cppname: HOM_NodeTypeCategory::label
    Returns the descriptive of this node type category that appears in
    network editor panes.

::`name(self)` -> `str`:
    #cppname: HOM_NodeTypeCategory::name
    #replaces: Cmd:optype, Exp:optypeinfo
    Returns the name of this node type category.

::`nodeTypes(self)` -> `dict` of `str` to [Hom:hou.NodeType]:
    #cppname: HOM_NodeTypeCategory::nodeTypes
    #replaces: Cmd:opadd, Cmd:otglob
    Return a dict mapping node type names to node types in this category.

    For example, if this node type category is SOPs, the keys in the dictionary
    would be "box", "sphere", "polyextrude", "subdivide", etc.

    Note that the node types in this category may not all be instances of
    the same class.  For example, most node types in the SOP node type category
    are instances of [Hom:hou.SopNodeType], but some, like SHOP networks, CHOP
    networks, etc. are not.

    {{{
    #!python
    # Access the box SOP's node type.
    hou.sopNodeTypeCategory().nodeTypes()['box']
    }}}

    {{{
    #!python
    def findNodeTypes(node_type_category, pattern):
	'''Return a list of node types in a particular node type category
	   whose names match a pattern.'''
	import fnmatch

	return [node_type
	    for node_type_name, node_type in node_type_category.nodeTypes().items()
	    if fnmatch.fnmatch(node_type_name, pattern)]
    }}}

    See also [Hom:hou.nodeType_].

::`nodeType(self, type_name)` -> [Hom:hou.NodeType] or None:
    #cppname: HOM_NodeTypeCategory::nodeType
    Returns a single node type that matched the provided type name. Returns
    None if the type name doesn't match a node type in this category.

::`nodeVerbs(self)` -> `dict` of `str` to [Hom:hou.SopVerb]:
    #cppname: HOM_NodeTypeCategory::nodeVerbs
    Return a dict mapping verb names to node verbs in this category.

    Most verbs are named after their corresponding node type.  Alternatively,
    given a [Hom:hou.SopNode], one can use [Hom:hou.SopNode#verb] to extract
    the verb.

::`nodeVerb(self, name)` -> [Hom:hou.SopVerb] or None:
    #cppname: HOM_NodeTypeCategory::nodeVerb
    Return a specific verb from the provided verb name.  Returns None
    if no matching verb is found.

::`scriptDirName(self)`:
    #cppname: HOM_NodeTypeCategory::scriptDirName
    #replaces: Cmd:optype, Exp:optypeinfo
    #status: ni

::`viewerStates(self, viewer_type)` -> `tuple` of [Hom:hou.ViewerState]:
    #cppname: HOM_NodeTypeCategory::viewerStates
    #status: nd

::`hasSubNetworkType(self)` -> `bool`:
    #cppname: HOM_NodeTypeCategory::hasSubNetworkType
    Return True if the category contains a node type that creates sub-network
    nodes.

::`defaultColor(self)` -> [Hom:hou.Color]:
    #cppname: HOM_NodeType::defaultColor
    Return the color used to display a node of this type category in the
    network view if the node's [Hom:hou.nodeFlag.ColorDefault] flag is set,
    and no default color has been set for that node's [Hom:hou.NodeType].

::`clearDefaultColors(self)`:
    #cppname: HOM_NodeType::clearDefaultColors
    Clear the default color assignment for every [Hom:hou.NodeType] in this
    category. This method is faster than clearing the default for each node
    type individually.

::`setDefaultColor(self, color)`:
    #cppname: HOM_NodeType::setDefaultColor
    Set the color used to display a node of this type in the
    network view if the node's [Hom:hou.nodeFlag.ColorDefault] flag is set,
    and no default color has been set for that node's [Hom:hou.NodeType].
    Pass None as the `color` parameter to revert to the standard default.

::`defaultShape(self)` -> `str`:
    #cppname: HOM_NodeType::defaultShape
    Return the name of the shape used to display a node of this type in the
    network view if no shape is explicitly assigned to the node,
    and no default shape has been set for that node's [Hom:hou.NodeType].

::`clearDefaultShapes(self)`:
    #cppname: HOM_NodeType::clearDefaultShapes
    Clear the default shape assignment for every [Hom:hou.NodeType] in this
    category. This method is faster than clearing the default for each node
    type individually.

::`setDefaultShape(self, shape)`:
    #cppname: HOM_NodeType::setDefaultShape
    Set the name of the shape used to display a node of this type in the
    network view if no shape is explicitly assigned to the node,
    and no default shape has been set for that node's [Hom:hou.NodeType].
    Pass None as the `shape` parameter to revert to the standard default.

::`defaultWireStyle(self)` -> `str`:
    #cppname: HOM_NodeType::defaultWireStyle
    Return the name of the default wiring style used in networks consisting of
    child nodes belonging to this node type category.

::`setDefaultWireStyle(self, wirestyle)`:
    #cppname: HOM_NodeType::setDefaultWireStyle
    Set the name of the default wiring style used in networks consisting of
    child nodes belonging to this node type category. The supported wiring
    styles are `"rounded"` and the empty string (or `None`). An empty string
    uses the default straight wiring style.

@related
    - [Hom:hou.nodeTypeCategories]
    - [Hom:hou.objNodeTypeCategory]
    - [Hom:hou.sopNodeTypeCategory]
    - [Hom:hou.dopNodeTypeCategory]
    - [Hom:hou.cop2NodeTypeCategory]
    - [Hom:hou.shopNodeTypeCategory_]
    - [Hom:hou.vopNodeTypeCategory]
    - [Hom:hou.ropNodeTypeCategory]
    - [Hom:hou.chopNodeTypeCategory]
    - [Hom:hou.cop2NetNodeTypeCategory]
    - [Hom:hou.vopNetNodeTypeCategory]
    - [Hom:hou.chopNetNodeTypeCategory]
    - [Hom:hou.managerNodeTypeCategory]
    - [Hom:hou.rootNodeTypeCategory]

