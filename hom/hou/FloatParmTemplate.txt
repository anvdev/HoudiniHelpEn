= hou.FloatParmTemplate =
#type: homclass
#cppname: HOM_FloatParmTemplate
#superclass: hou.ParmTemplate
#group: parmtemplates

"""Describes a parameter tuple containing floating point values."""

@methods

::`__init__(self, name, label, num_components, default_value=(), min=0.0, max=10.0, min_is_strict=False, max_is_strict=False, look=hou.parmLook.Regular, naming_scheme=hou.parmNamingScheme.XYZW, disable_when=None, is_hidden=False, is_label_hidden=False, join_with_next=False, help=None, script_callback=None, script_callback_language=hou.scriptLanguage.Hscript, tags={}, default_expression=(), default_expression_language=())`:
    #cppname: HOM_FloatParmTemplate::HOM_FloatParmTemplate
    Construct a new FloatParmTemplate.

    name:
	See [Hom:hou.ParmTemplate#name] for more information.
    label:
	See [Hom:hou.ParmTemplate#label] for more information.
    num_components:
	See [Hom:hou.ParmTemplate#numComponents] for more information.
    default_value:
	See the [defaultValue|Hom:hou.FloatParmTemplate#defaultValue] method
	for more information.
    min:
	See the [minValue|Hom:hou.FloatParmTemplate#minValue] method
	for more information.
    max:
	See the [maxValue|Hom:hou.FloatParmTemplate#maxValue] method
	for more information.
    min_is_strict:
	See the [minIsStrict|Hom:hou.FloatParmTemplate#minIsStrict] method
	for more information.
    max_is_strict:
	See the [maxIsStrict|Hom:hou.FloatParmTemplate#maxIsStrict] method
	for more information.
    look:
	See [Hom:hou.ParmTemplate#look] for more information.
    naming_scheme:
	See [Hom:hou.ParmTemplate#namingScheme] for more information.
    disable_when:
	See [Hom:hou.ParmTemplate#disableWhen] for more information.
    is_hidden:
	See [Hom:hou.ParmTemplate#isHidden] for more information.
    is_label_hidden:
	See [Hom:hou.ParmTemplate#isLabelHidden] for more information.
    join_with_next:
	See [Hom:hou.ParmTemplate#joinsWithNext] for more information.
    help:
	See [Hom:hou.ParmTemplate#help] for more information.
    script_callback:
	See [Hom:hou.ParmTemplate#scriptCallback] for more information.
    script_callback_language:
	See [Hom:hou.ParmTemplate#scriptCallbackLanguage] for more information.
    tags:
	See [Hom:hou.ParmTemplate#tags] for more information.
    default_expression:
	See the [defaultExpression|Hom:hou.FloatParmTemplate#defaultExpression]
	method for more information.
    default_expression_language:
	See the [defaultExpressionLanguage|Hom:hou.FloatParmTemplate#defaultExpressionLanguage] method for more information.

::`defaultValue(self)` -> tuple of `float`:
    #cppname: HOM_FloatParmTemplate::defaultValue
    Return the default value for new parameter instances.
    
    For example, suppose this parm template is named "t", the naming scheme is
    XYZW, it has 3 components, and the default value is (1.0, 2.0, 3.0).
    The corresponding parm tuple instance on a node would be named "t" and
    would contain parameters "tx", "ty", and "tz".  When the node is created,
    "tx" would be 1.0, "ty" would be 2.0, and "tz" would be 3.0.

::`setDefaultValue(self, default_value)`:
    #cppname: HOM_FloatParmTemplate::setDefaultValue
    Set the default value for new parameter instances to a sequence of floats.

    See the `defaultValue` method for more information.  Note that if the
    number of floats in the sequence is different from the number of components
    in the parm template, any extra values will be discarded and any missing
    values will become zeros.

::`defaultExpression(self)` -> tuple of strings:
    #cppname: HOM_FloatParmTemplate::defaultExpression
    Return the default expression for new parameter instances.

    The default expression takes precedence over the default value.
    If a component has no default expression (i.e. an empty string),
    then the default value is used for new parameter instances.

    Note that the default expression language is needed
    to interpret the meaning of the default expression.

    For example, suppose this parm template is named "t", the naming scheme
    is XYZW, it has 3 components, the default value is (1.0, 2.0, 3.0),
    the default expression is ("$F", "hou.frame()", "") and the default
    expression language is (`hou.scriptLanguage.Hscript`,
    `hou.scriptLanguage.Python`, `hou.scriptLanguage.Hscript`).
    Then the corresponding parm tuple instance on a node would be named "t"
    and would contain parameters "tx", "ty", "tz".  When the node is created,
    "tx" would have a default Hscript expression of "$F", "ty" would have
    a default Python expression of "hou.frame()", and "tz" would have a
    default value of 3.0.

::`setDefaultExpression(self, default_expression)`:
    #cppname: HOM_FloatParmTemplate::setDefaultExpression
    Set the default expression for new parameter instances to a sequence 
    of strings.

    See the [Hom:hou.FloatParmTemplate#defaultExpression] method 
    for more information.  Note that if the number of strings in the sequence 
    is different from the number of components in the parm template, 
    any extra values will be discarded and any missing
    expressions will become the empty string.

::`defaultExpressionLanguage(self)` -> tuple of [Hom:hou.scriptLanguage]:
    #cppname: HOM_FloatParmTemplate::defaultExpressionLanguage
    Return the default expression language for new parameter instances.

    The default expression language only applies if the default expression
    is set.  If the default expression of a component is not set,
    then the expression language is set to [Hom:hou.scriptLanguage#Hscript].

::`setDefaultExpressionLanguage(self, default_expression_language)`:
    #cppname: HOM_FloatParmTemplate::setDefaultExpressionLanguage
    Set the default expression language for new parameter instances 
    to a sequence of [Hom:hou.scriptLanguage] values.

    See the `defaultExpressionLanguage` method for more information.  
    Note that if the number of [Hom:hou.scriptLanguage] values in the sequence 
    is different from the number of components in the parm template, 
    any extra values will be discarded and any missing expression languages 
    will become [Hom:hou.scriptLanguage#Hscript].

::`minValue(self)` -> `float`:
    #cppname: HOM_FloatParmTemplate::minValue
    Return the minimum value of the parameter.

    See also the [minIsStrict|Hom:hou.FloatParmTemplate#minIsStrict] method.

::`setMinValue(self, min_value)`:
    #cppname: HOM_FloatParmTemplate::setMinValue
    Set the minimum value of the parameter.

    See the `minValue` method for more information.

::`maxValue(self)` -> `float`:
    #cppname: HOM_FloatParmTemplate::maxValue
    Return the minimum value of the parameter.

    See also the [minIsStrict|Hom:hou.FloatParmTemplate#maxIsStrict] method.

::`setMaxValue(self, max_value)`:
    #cppname: HOM_FloatParmTemplate::setMaxValue
    Set the maximum value of the parameter.

    See the `maxValue` method for more information.

::`minIsStrict(self)` -> `bool`:
    #cppname: HOM_FloatParmTemplate::minIsStrict
    Return whether the minimum value is strictly enforced.

    If a minimum value is not strictly enforced, the slider will not let you
    change the value below the minimum, but you can set the value to be lower
    than the minimum by typing it in, changing it via [Hom:hou.Parm#setValue],
    or using the ladder handle.
    
    If it is strictly enforced and you try to change it below the minimum value
    using any mechanism, Houdini will set it to the minimum value.

    See also the [minValue|Hom:hou.FloatParmTemplate#minValue] method.

::`setMinIsStrict(self, on)`:
    #cppname: HOM_FloatParmTemplate::setMinIsStrict
    Set whether the minimum value is strictly enforced.

    See the `minIsStrict` method for more information.

::`maxIsStrict(self)` -> `bool`:
    #cppname: HOM_FloatParmTemplate::maxIsStrict
    Return whether the maximum value is strictly enforced.

    See the [minIsStrict|Hom:hou.FloatParmTemplate#minIsStrict] method for
    more information.

::`setMaxIsStrict(self, on)`:
    #cppname: HOM_FloatParmTemplate::setMaxIsStrict
    Set whether the maximum value is strictly enforced.

    See the `maxIsStrict` method for more information.

