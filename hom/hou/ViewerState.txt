= hou.ViewerState =
#type: homclass
#cppname: HOM_ViewerState
#group: view

"""Describes an interactive state for a viewer pane."""

Viewer panes such as a Scene Viewer or Compositor Viewer can enter specific
"states". A state controls the available handles, mouse interactions, and in
some cases node creation or deletion based on user interaction with the
viewer pane. This class does not represent a running state in a viewer, but
instead describes a state that can be entered with methods such as
[Hom:hou.SceneViewer#setCurrentState] or
[Hom:hou.CompositorViewer#setCurrentState].

Each node type that can be displayed in a viewer pane will have an associated
viewer state (though not all viewer states need to be associated with a node
type). This node type specific viewer state is used to create new instances or
edit existing instances of the node type in a viewer pane.

The list of viewer states associated with a given node type category is
returned from the [Hom:hou.NodeTypeCategory#viewerStates] method.


@methods

::`categories(self)` -> `tuple` of [Hom:hou.NodeTypeCategory]:
    #cppname: HOM_ViewerState::categories
    Return the node type category for the nodes that are associated with this
    state.

::`description(self)` -> string:
    #cppname: HOM_ViewerState::description
    Return the brief name of the state that appears in the upper left corner
    of the viewer pane when this state is active.

::`icon(self)` -> string:
    #cppname: HOM_ViewerState::icon
    Return the icon for the state that appears in the upper left corner
    of the viewer pane when this state is active.

::`isHidden(self)` -> `bool`:
    #cppname: HOM_ViewerState::hidden
    Returns whether this state is "hidden". A hidden state has no shelf
    tool and is not available on the Tab menu.

::`name(self)` -> string:
    #cppname: HOM_ViewerState::name
    Return the internal name of this state, which is the string that must be
    passed to the `setCurrentState()` method of the viewer pane to enter this
    state.

::`nodeType(self)` -> [Hom:hou.NodeType] or `None`:
    #cppname: HOM_ViewerState::nodeType
    Return the node type associated with this state. May return None if this
    state is not associated with a particular node type, such as the SOP or
    Object View states which are used for panning and tumbling in a scene
    viewer pane.

::`hotkey(self)` -> string:
    #cppname: HOM_ViewerState::hotkey
    Return the hotkey associated with this state.

::`parmTemplates(self)` -> [Hom::hou.ParmTemplateGroup]:
    #cppname: HOM_ViewerState::parmTemplates
    Return the parameter templates associated with this state.

